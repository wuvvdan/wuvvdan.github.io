<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/29/%E6%9C%AC%E5%9C%B0%E5%A4%9A%E5%A4%84%E7%90%86%E4%B8%AA%60SSH%20key%60/"/>
    <url>/2021/12/29/%E6%9C%AC%E5%9C%B0%E5%A4%9A%E5%A4%84%E7%90%86%E4%B8%AA%60SSH%20key%60/</url>
    
    <content type="html"><![CDATA[<hr><p>title : 本地多处理个<code>SSH key</code></p><p>date: 2021年12月29日11:14:54</p><p>tags: </p><ul><li> git</li><li>开发技巧<br>categories:</li><li>开发技巧</li></ul><hr><h4 id="一、创建方式"><a href="#一、创建方式" class="headerlink" title="一、创建方式"></a>一、创建方式</h4><p>创建默认<code>id_rsa</code>:<code>ssh-keygen -t rsa -C &#39;邮箱地址&#39;</code></p><p>创建特殊需要的<code>ssh key</code>命名例如<code>test</code>，创建方式为<code>ssh-keygen -t rsa -C &#39;邮箱地址&#39; -f ~/.ssh/test</code></p><h4 id="二、设置配置"><a href="#二、设置配置" class="headerlink" title="二、设置配置"></a>二、设置配置</h4><p>在目<code>~/.ssh</code>下创建<code>config</code>文件，里面填充内容实例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 默认 id_rsa</span><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/id</span>_rsa<br><br><span class="hljs-comment"># 特殊需要 key 名称为test</span><br>Host test.github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/test</span><br></code></pre></td></tr></table></figure><h4 id="三、添加到github"><a href="#三、添加到github" class="headerlink" title="三、添加到github"></a>三、添加到<code>github</code></h4><p>此处就正常的在 github-&gt; settings-&gt;SSH And GPG keys中添加就好</p><h4 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h4><h4 id="1-拉取代码"><a href="#1-拉取代码" class="headerlink" title="1. 拉取代码"></a>1. 拉取代码</h4><p>默认<code>id_rsa</code>: </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">git clone git<span class="hljs-variable">@github</span>.<span class="hljs-symbol">com:</span>仓库名称 <span class="hljs-comment">#例如：git<span class="hljs-doctag">@github</span>.com:name/name.github.io.git</span><br></code></pre></td></tr></table></figure><p>特殊<code>test</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">git clone git<span class="hljs-variable">@test</span>.github.<span class="hljs-symbol">com:</span>仓库名称 <span class="hljs-comment">#例如：git<span class="hljs-doctag">@test</span>.github.com:name/name.github.io.git</span><br></code></pre></td></tr></table></figure><h4 id="2-本地关联远程"><a href="#2-本地关联远程" class="headerlink" title="2. 本地关联远程"></a>2. 本地关联远程</h4><p>默认<code>id_rsa</code>: </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">git remote add origin git<span class="hljs-variable">@github</span>.<span class="hljs-symbol">com:</span>仓库名称 <span class="hljs-comment">#例如：git<span class="hljs-doctag">@github</span>.com:name/name.github.io.git</span><br></code></pre></td></tr></table></figure><p>特殊<code>test</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">git remote add origin git<span class="hljs-variable">@test</span>.github.<span class="hljs-symbol">com:</span>仓库名称 <span class="hljs-comment">#例如：git<span class="hljs-doctag">@test</span>.github.com:name/name.github.io.git</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue 之Element（饿了吗 Web 框架）使用-1</title>
    <link href="/2021/10/11/Vue%20%E4%B9%8BElement%EF%BC%88%E9%A5%BF%E4%BA%86%E5%90%97%20Web%20%E6%A1%86%E6%9E%B6%EF%BC%89%E4%BD%BF%E7%94%A8-1/"/>
    <url>/2021/10/11/Vue%20%E4%B9%8BElement%EF%BC%88%E9%A5%BF%E4%BA%86%E5%90%97%20Web%20%E6%A1%86%E6%9E%B6%EF%BC%89%E4%BD%BF%E7%94%A8-1/</url>
    
    <content type="html"><![CDATA[<h3 id="一、导入"><a href="#一、导入" class="headerlink" title="一、导入"></a>一、导入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i element-ui -S<br></code></pre></td></tr></table></figure><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>需要在<code>main.js</code>中导入头文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br></code></pre></td></tr></table></figure><p>并使用<code>ElementUI</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.use(ElementUI)<br></code></pre></td></tr></table></figure><h3 id="三、可以愉快的使用了"><a href="#三、可以愉快的使用了" class="headerlink" title="三、可以愉快的使用了"></a>三、可以愉快的使用了</h3><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&lt;div&gt;<br>&lt;el-radio v-model=&quot;radio&quot; label=&quot;1&quot;&gt;备选项&lt;/el-radio&gt;<br>&lt;el-radio v-model=&quot;radio&quot; label=&quot;2&quot;&gt;备选项&lt;/el-radio&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://wuvdan.oss-cn-hangzhou.aliyuncs.com/blog/20211011142402.jpg" alt="效果"></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>灰度更新</title>
    <link href="/2020/11/01/%E7%81%B0%E5%BA%A6%E6%9B%B4%E6%96%B0/"/>
    <url>/2020/11/01/%E7%81%B0%E5%BA%A6%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="灰度更新"><a href="#灰度更新" class="headerlink" title="灰度更新"></a>灰度更新</h1><h3 id="第三方"><a href="#第三方" class="headerlink" title="第三方"></a>第三方</h3><ol><li>直接使用该账号打包</li><li>上传至第三方平台，生成二维码</li><li>扫描二维码下载</li><li>去设置中同意描述文件</li></ol><ul><li>平台</li></ul><ol><li><a href="https://www.pgyer.com/">蒲公英</a></li><li><a href="fir.im">fir</a></li></ol><ul><li>账号</li></ul><ol><li>企业级账号（$299），测试用户没有数量限制</li><li>公司现有账号，测试用户最大为100，需要在打包前添加用户手机的UDID</li></ol><ul><li>效果图<br><br><img src="https://www.pgyer.com/app/qrcode/Dmvo" alt="效果图"></li></ul><h3 id="苹果的Test-Flight"><a href="#苹果的Test-Flight" class="headerlink" title="苹果的Test Flight"></a>苹果的Test Flight</h3><p>需要用户安装<code>Test Flight</code> App</p><ol><li>将打包好的 <code>ipa</code> 文件上传到 <code>iTunes Connect</code></li><li>登录到 <code>iTunes Connect</code> 进入<code>我的APP</code>，选择你的APP</li><li>到 <code>TestFlight</code> 模块下，如果 <code>App Store</code> 有提交过的版本，内部测试员就可以了，我们只需要添加内部测试员用户即可</li><li>接下来收邮件，就是刚刚添加的那个用户邮箱，会收到邮件</li><li>点击 <code>View in TestFlight</code> 获取邀请码</li><li>添加外包测试人员，第五步”点击 View in TestFlight 获取邀请码”时，可以拿到一个URL，通过URL可以在App中进行操作。</li><li>点击更新会跳转到<code>Test Flight</code>中更新</li><li>效果图<br><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1568178285309&di=661c69f86a092c8a2ac90949179eb87b&imgtype=0&src=http://hbimg.b0.upaiyun.com/6aa7b9c8dffeda919f91e32ad4c7cd260e8df2651b5da-WggNsA_fw658" alt="效果图"></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发技巧</tag>
      
      <tag>灰度更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS代码块(Snippet)</title>
    <link href="/2020/10/01/iOS%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/10/01/iOS%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-4eef772205a43353.jpeg" alt="镇楼专用"></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>以测试ViewController为例。</p><h5 id="ViewController-h文件"><a href="#ViewController-h文件" class="headerlink" title="ViewController.h文件"></a>ViewController.h文件</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">ViewController</span> : <span class="hljs-title">UIViewController</span></span><br><span class="hljs-comment">/** 逻辑测试 */</span><br>- (<span class="hljs-keyword">int</span>)getSumWithNum1:(<span class="hljs-keyword">int</span>)a num2:(<span class="hljs-keyword">int</span>)b;<br><span class="hljs-comment">/** 异步测试 */</span><br>- (<span class="hljs-keyword">void</span>)loadDataComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-keyword">id</span> info))complete;<br><span class="hljs-comment">/** 性能测试 */</span><br>- (<span class="hljs-keyword">void</span>)openCamera;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h5 id="ViewController-m文件"><a href="#ViewController-m文件" class="headerlink" title="ViewController.m文件"></a>ViewController.m文件</h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">int</span>)getSumWithNum1:(<span class="hljs-keyword">int</span>)a num2:(<span class="hljs-keyword">int</span>)b &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)loadDataComplete:(<span class="hljs-keyword">void</span> (^)(<span class="hljs-keyword">id</span>))complete &#123;    <br>    <span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), ^&#123;<br>        sleep(<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">NSString</span> *data = <span class="hljs-string">@&quot;😝&quot;</span>;<br>        <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;<br>            complete(data);<br>        &#125;);<br>    &#125;);<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)openCamera &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; ++i) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;这是一个字符串%d&quot;</span>, i);<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br>&#125;<br></code></pre></td></tr></table></figure><p>为了进行单元化测试，所以新建一个<code>ViewControllerTest</code>文件。<br>步骤<br><img src="https://upload-images.jianshu.io/upload_images/3334769-c0d1455212a740ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建文件"></p><ul><li>导入测试头文件<code>#import &quot;ViewController.h&quot;</code></li><li>声明属性<code>@property (nonatomic, strong) ViewController *vc;</code></li><li>在<code>- (void)setUp;</code>进行初始化代码<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">- (<span class="hljs-keyword">void</span>)setUp &#123;<br>    self.vc = [[ViewController alloc] <span class="hljs-keyword">init</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1、逻辑测试"><a href="#1、逻辑测试" class="headerlink" title="1、逻辑测试"></a>1、逻辑测试</h3></li></ul><ol><li><p>给出测试数据</p></li><li><p>进行测试</p></li><li><p>使用断言进行判定</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta">- (<span class="hljs-keyword">void</span>)testSum &#123;<br>    <span class="hljs-comment">// 1. given</span><br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">int</span> b = <span class="hljs-number">22</span>;<br>    <span class="hljs-comment">// 2. when</span><br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span> = [self.vc getSumWithNum1:a num2:b];<br>    <span class="hljs-comment">// 3. then</span><br>    XCTAssertEqual(<span class="hljs-keyword">sum</span>, <span class="hljs-number">32</span>, @<span class="hljs-string">&quot;错误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、异步测试"><a href="#2、异步测试" class="headerlink" title="2、异步测试"></a>2、异步测试</h3></li><li><p>创建<code>XCTestExpectation</code>，设置错误提示</p></li><li><p>调用方法，在异步中调用<code>fulfill</code></p></li><li><p>进行判断时间，是否在预期时间内容</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">XCTestExpectation</span> *exp = [<span class="hljs-keyword">self</span> expectationWithDescription:<span class="hljs-string">@&quot;超过预期时间&quot;</span>];<br>[<span class="hljs-keyword">self</span>.vc loadDataComplete:^(<span class="hljs-keyword">id</span> info) &#123;<br>    <span class="hljs-built_in">XCTAssertNil</span>(info, <span class="hljs-string">@&quot;数据为空&quot;</span>);<br>    [exp fulfill];<br>&#125;];<br>[<span class="hljs-keyword">self</span> waitForExpectationsWithTimeout:<span class="hljs-number">4</span> handler:^(<span class="hljs-built_in">NSError</span> * _Nullable error) &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, error);<br>&#125;];<br></code></pre></td></tr></table></figure><h3 id="3、性能测试"><a href="#3、性能测试" class="headerlink" title="3、性能测试"></a>3、性能测试</h3><p><img src="https://upload-images.jianshu.io/upload_images/3334769-96f0facc7307a744.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="性能测试"></p></li><li><p>设置Baseline时间</p></li><li><p>Max STDDEV 最大样本标准偏差比例</p></li></ol><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">- (<span class="hljs-literal">void</span>)testPerformanceExample &#123;<br>    <span class="hljs-meta">[</span><span class="hljs-built_in">self</span> measureBlock:^&#123;<br>        <span class="hljs-meta">[</span><span class="hljs-built_in">self</span>.vc openCamera<span class="hljs-meta">]</span>;<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="UI测试"><a href="#UI测试" class="headerlink" title="UI测试"></a>UI测试</h2><p><img src="https://upload-images.jianshu.io/upload_images/3334769-0dc163b565bdcbf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="脚本录制"></p><p>1、录制脚本<br><br>2、编辑脚本<br><br>3、自动化测试</p><h2 id="获取代码覆盖率"><a href="#获取代码覆盖率" class="headerlink" title="获取代码覆盖率"></a>获取代码覆盖率</h2><p>1、点击<code>Edit Secheme</code><br><img src="https://upload-images.jianshu.io/upload_images/3334769-4a5476214d38ea7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Edit Secheme"></p><p>2、选择<code>Test</code>-&gt;<code>Options</code>-&gt;<code>Code Coverage</code>勾起<br><img src="https://upload-images.jianshu.io/upload_images/3334769-b1b529d4111e737b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Code Coverage"></p><p>3、运行代码查看结果<br><img src="https://upload-images.jianshu.io/upload_images/3334769-01e76835566d7ae7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看结果"></p>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Snippet</tag>
      
      <tag>开发技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KVO</title>
    <link href="/2020/09/01/iOS%E5%BA%95%E5%B1%82-KVO/"/>
    <url>/2020/09/01/iOS%E5%BA%95%E5%B1%82-KVO/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-0c2f7bf66b38a01a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><h3 id="类的单个属性观察"><a href="#类的单个属性观察" class="headerlink" title="类的单个属性观察"></a>类的单个属性观察</h3><p>观察值的4中模式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/<span class="hljs-strong">**</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*  NSKeyValueObservingOptionNew     新值</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span>  NSKeyValueObservingOptionOld     旧值</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*  NSKeyValueObservingOptionInitial 注册发送通知，改变时发送通知</span></span><br><span class="hljs-emphasis"><span class="hljs-strong"> *</span>  NSKeyValueObservingOptionPrior   改变之前发送通知，改变后发送通知</span><br><span class="hljs-strong"> <span class="hljs-emphasis">*/</span></span><br></code></pre></td></tr></table></figure><p>针对<code>Person</code>类里面的<code>name</code>属性进行观察</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">[person addObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;name&quot;</span> options:<span class="hljs-built_in">NSKeyValueObservingOptionNew</span> context:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure><p>查看观察</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)observeValueForKeyPath:(<span class="hljs-built_in">NSString</span> *)keyPath ofObject:(<span class="hljs-keyword">id</span>)object change:(<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSKeyValueChangeKey</span>,<span class="hljs-keyword">id</span>&gt; *)change context:(<span class="hljs-keyword">void</span> *)context &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, change);<br>&#125;<br></code></pre></td></tr></table></figure><p>打印效果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2019-03-22</span> <span class="hljs-number">09</span>:<span class="hljs-number">20</span>:<span class="hljs-number">16.875033</span>+<span class="hljs-number">0800</span> KVO[<span class="hljs-number">1844:81256</span>] &#123;<br>    kind = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    new = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类的里面嵌套其他的属性观察"><a href="#类的里面嵌套其他的属性观察" class="headerlink" title="类的里面嵌套其他的属性观察"></a>类的里面嵌套其他的属性观察</h3><p>观察<code>Person</code>里面<code>Dog</code>类的<code>age</code>，通过点语法直接监听</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">[person addObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;dog.age&quot;</span> options:<span class="hljs-built_in">NSKeyValueObservingOptionNew</span> context:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure><p>输入结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2019-03-22</span> <span class="hljs-number">09</span>:<span class="hljs-number">23</span>:<span class="hljs-number">25.854859</span>+<span class="hljs-number">0800</span> KVO[<span class="hljs-number">1876:84141</span>] &#123;<br>    kind = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    new = <span class="hljs-number">11</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一次性观察多个值"><a href="#一次性观察多个值" class="headerlink" title="一次性观察多个值"></a>一次性观察多个值</h3><p>例如观察<code>Person</code>里面的<code>Dog</code>的<code>age</code>和<code>level</code>，则在<code>Person</code>类中重新<code>+ (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffectingValueForKey:(NSString *)key</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">+</span> (<span class="hljs-type">NSSet</span>&lt;<span class="hljs-type">NSString</span> *&gt; <span class="hljs-operator">*</span>)keyPathsForValuesAffectingValueForKey:(<span class="hljs-type">NSString</span> <span class="hljs-operator">*</span>)key &#123;<br>    <span class="hljs-type">NSSet</span> <span class="hljs-operator">*</span>keyPaths <span class="hljs-operator">=</span> [<span class="hljs-keyword">super</span> keyPathsForValuesAffectingValueForKey:key];<br>    <span class="hljs-keyword">if</span> ([key isEqualToString:@<span class="hljs-string">&quot;dog&quot;</span>]) &#123;<br>        <span class="hljs-type">NSArray</span> <span class="hljs-operator">*</span>array <span class="hljs-operator">=</span> @[@<span class="hljs-string">&quot;_dog.name&quot;</span>, @<span class="hljs-string">&quot;_dog.level&quot;</span>];<br>        keyPaths <span class="hljs-operator">=</span> [keyPaths setByAddingObjectsFromArray:array];<br>    &#125;<br>    <span class="hljs-keyword">return</span> keyPaths;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接观察<code>Dog</code>类</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">[person addObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;dog&quot;</span> options:<span class="hljs-built_in">NSKeyValueObservingOptionNew</span> context:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure><p>打印结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2019-03-22</span> <span class="hljs-number">09</span>:<span class="hljs-number">27:11.485240</span>+<span class="hljs-number">0800</span> KVO[<span class="hljs-number">1929:87568</span>] &#123;<br>    kind = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>    new = &quot;&lt;Dog: <span class="hljs-number">0</span>x60<span class="hljs-number">00027c0b80</span>&gt;&quot;<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="手动模式"><a href="#手动模式" class="headerlink" title="手动模式"></a>手动模式</h3><p>在Person类中重写<code>+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">+ (<span class="hljs-built_in">BOOL</span>)automaticallyNotifiesObserversForKey:(<span class="hljs-built_in">NSString</span> *)key &#123;<br>    <span class="hljs-comment">// 修改为手动模式</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>手动触发</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[self.person willChangeValueForKey:@<span class="hljs-string">&quot;name&quot;</span>]<span class="hljs-comment">;</span><br>[self.person didChangeValueForKey:@<span class="hljs-string">&quot;name&quot;</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="观察容器类"><a href="#观察容器类" class="headerlink" title="观察容器类"></a>观察容器类</h3><p>需要利用<code>KVC</code><br>例如观察<code>person</code>中的<code>array</code></p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[[self.person mutableArrayValueForKey:@<span class="hljs-string">&quot;array&quot;</span>] addObject:@<span class="hljs-string">&quot;obj&quot;</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">2019-03-22</span> <span class="hljs-number">11</span>:<span class="hljs-number">02</span>:<span class="hljs-number">13.996095</span>+<span class="hljs-number">0800</span> KVO[<span class="hljs-number">5521:170395</span>] &#123;<br>    indexes = &quot;&lt;_NSCachedIndexSet: <span class="hljs-number">0</span>x<span class="hljs-number">600002216160</span>&gt;[number of indexes: <span class="hljs-number">1</span> (in <span class="hljs-number">1</span> ranges), indexes: (<span class="hljs-number">0</span>)]&quot;<span class="hljs-comment">;</span><br>    kind = <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>    new =     (<br>        obj<br>    )<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="KVO的底层实现"><a href="#KVO的底层实现" class="headerlink" title="KVO的底层实现"></a>KVO的底层实现</h3><p>实质：观察值的setter方法<br>通过runtime，新建一个子类继承于观察类（NSKVONotifing_类名），动态的修改了观察类的类型为子类的类型,在子类里面重写set方法，调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">setName</span>:(NSString *)<span class="hljs-selector-tag">name</span> &#123;<br>    <span class="hljs-selector-attr">[self willChangeValueForKey:@<span class="hljs-string">&quot;name&quot;</span>]</span>;<br>    <span class="hljs-selector-attr">[super setName:name]</span>;<br>    <span class="hljs-selector-attr">[self didChangeValueForKey:@<span class="hljs-string">&quot;name&quot;</span>]</span>;   <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Block</title>
    <link href="/2020/08/01/iOS%E5%BA%95%E5%B1%82-Block/"/>
    <url>/2020/08/01/iOS%E5%BA%95%E5%B1%82-Block/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-cd0f22bd52a1e015.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><h3 id="Block的实质"><a href="#Block的实质" class="headerlink" title="Block的实质"></a>Block的实质</h3><p>本质上也是一个OC对象，他内部也有一个isa指针。Block是封装了函数调用以及函数调用环境的OC对象。</p><h3 id="Block三种类型"><a href="#Block三种类型" class="headerlink" title="Block三种类型"></a>Block三种类型</h3><table><thead><tr><th>类型</th><th>存储区域</th></tr></thead><tbody><tr><td>GlobalBlock</td><td>数据区</td></tr><tr><td>StackBlock</td><td>栈区</td></tr><tr><td>MallocBlock</td><td>堆区</td></tr></tbody></table><h3 id="Block避免循环引用的三种方式"><a href="#Block避免循环引用的三种方式" class="headerlink" title="Block避免循环引用的三种方式"></a>Block避免循环引用的三种方式</h3><p>1、利用 <code>__weak</code>和<code>__strong</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"> __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf = <span class="hljs-keyword">self</span>;<br><span class="hljs-keyword">self</span>.block = ^&#123;<br>    __<span class="hljs-keyword">strong</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) strongSelf = weakSelf;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, <span class="hljs-built_in">NSStringFromCGRect</span>(strongSelf.view.frame));<br>&#125;;<br><span class="hljs-keyword">self</span>.block();<br></code></pre></td></tr></table></figure><p>2、利用造成循环引用的临时变量</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">__block ViewController *vc = <span class="hljs-keyword">self</span>;<br><span class="hljs-keyword">self</span>.block = ^&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, <span class="hljs-built_in">NSStringFromCGRect</span>(vc.view.frame));<br>    vc = <span class="hljs-literal">nil</span>;<br>&#125;;<br><span class="hljs-keyword">self</span>.block();<br></code></pre></td></tr></table></figure><p>3、直接声明Block中添加造成循环引用的参数</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span>(^Block)(<span class="hljs-built_in">UIViewController</span> *vc);<br><br><span class="hljs-keyword">self</span>.block = ^(<span class="hljs-built_in">UIViewController</span> *vc)&#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, <span class="hljs-built_in">NSStringFromCGRect</span>(vc.view.frame));<br>&#125;;<br><span class="hljs-keyword">self</span>.block(<span class="hljs-keyword">self</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Runtime-消息转发</title>
    <link href="/2020/07/01/iOS%E5%BA%95%E5%B1%82-Runtime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/"/>
    <url>/2020/07/01/iOS%E5%BA%95%E5%B1%82-Runtime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<p>iOS 方法的动态解析和消息转发</p><p>以创建的Message类为示例<br>Message.h</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">Message</span> : <span class="hljs-title">NSObject</span></span><br><br>- (<span class="hljs-keyword">void</span>)sendMessage:(<span class="hljs-built_in">NSString</span> *)message;<br><br>+ (<span class="hljs-keyword">void</span>)sendClassMessage:(<span class="hljs-built_in">NSString</span> *)message;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>Message.m</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@implementation</span> Message<br><br><span class="hljs-variable">@end</span><br></code></pre></td></tr></table></figure><h3 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h3><p>征询接收者所属的类，是否需要动态添加类方法或实例方法，来处理这个未找到的方法。</p><ol><li>首先判断是否实现了 <code>resolveInstanceMethod</code>，如果没有实现，进入下一步处理；</li><li>如果实现了，调用 <code>resolveInstanceMethod</code>，获取返回值；</li><li>如果返回值为 YES，表示 <code>resolveInstanceMethod</code> 声称它已经提供了 <code>selector</code> 的实现，因此再次查找 method list，如果找到对应的 <code>IMP</code>，则返回该实现，否则提示警告信息，进入下一步处理；</li><li>如果返回值为 NO，进入下一步处理；<h4 id="1-对象方法"><a href="#1-对象方法" class="headerlink" title="1. 对象方法"></a>1. 对象方法</h4>通过<code>+ (BOOL)resolveInstanceMethod:(SEL)sel;</code>方法进行解析<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">+ (<span class="hljs-built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;<br>    <span class="hljs-keyword">if</span> (sel == <span class="hljs-keyword">@selector</span>(sendMessage:)) &#123;<br>        class_addMethod([<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>], sel, (IMP)innerSenderMessageMetod, <span class="hljs-string">&quot;v@:@&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">super</span> resolveInstanceMethod:sel];<br>&#125;<br><br><span class="hljs-keyword">void</span> innerSenderMessageMetod(<span class="hljs-keyword">id</span> obj, SEL _cmd) &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;对象方法，动态解析&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-类方法"><a href="#2-类方法" class="headerlink" title="2. 类方法"></a>2. 类方法</h4>通过<code>+ (BOOL)resolveClassMethod:(SEL)sel;</code>方法进行解析<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">+ (<span class="hljs-built_in">BOOL</span>)resolveClassMethod:(SEL)sel &#123;<br>    <span class="hljs-keyword">if</span> (sel == <span class="hljs-keyword">@selector</span>(sendClassMessage:)) &#123;<br>        class_addMethod(object_getClass(<span class="hljs-keyword">self</span>), sel, (IMP)innerSenderClassMessageMetod, <span class="hljs-string">&quot;v@:@&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">super</span> resolveClassMethod:sel];<br>&#125;<br><br><span class="hljs-keyword">void</span> innerSenderClassMessageMetod(<span class="hljs-keyword">id</span> obj, SEL _cmd) &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;类方法，动态解析&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3>如果没有动态添加方法，则会进入此阶段，此时询问是否要将这条消息转发给其他的对象，来处理这个方法。如果返回nil，即表示不转发给其他对象，此时会进入第3阶段<br>创建了一个备用类<code>MessageTemp</code><br>MessageTemp.h<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">MessageTemp</span> : <span class="hljs-title">NSObject</span></span><br><br>- (<span class="hljs-keyword">void</span>)sendMessage:(<span class="hljs-built_in">NSString</span> *)message;<br>- (<span class="hljs-keyword">void</span>)sendClassMessage:(<span class="hljs-built_in">NSString</span> *)message;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure>MessageTemp.m<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">MessageTemp</span></span><br>- (<span class="hljs-keyword">void</span>)sendMessage:(<span class="hljs-built_in">NSString</span> *)message &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;备用Message，解析对象方法&quot;</span>);<br>&#125;<br>- (<span class="hljs-keyword">void</span>)sendClassMessage:(<span class="hljs-built_in">NSString</span> *)message &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;备用Message，解析类方法&quot;</span>);<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h4 id="1-对象方法-1"><a href="#1-对象方法-1" class="headerlink" title="1. 对象方法"></a>1. 对象方法</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> (id)<span class="hljs-selector-tag">forwardingTargetForSelector</span>:(SEL)<span class="hljs-selector-tag">aSelector</span> &#123;<br>    <span class="hljs-selector-tag">if</span> (aSelector == <span class="hljs-variable">@selector</span>(<span class="hljs-attribute">sendMessage</span>:)) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-attr">[MessageTemp new]</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-attr">[super forwardingTargetForSelector:aSelector]</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-类方法-1"><a href="#2-类方法-1" class="headerlink" title="2. 类方法"></a>2. 类方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">+ (id)forwardingTargetForSelector:(SEL)aSelector &#123;<br>    <span class="hljs-keyword">if</span> (aSelector == <span class="hljs-meta">@selector(sendClassMessage:)</span>) &#123;<br>        <span class="hljs-keyword">return</span> [MessageTemp new];<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">super</span> forwardingTargetForSelector:aSelector];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h3>当 <code>forwardingTargetForSelector:</code> 方法未做出任何响应的话，会来到消息转发流程。消息转发时会首先调用 <code>methodSignatureForSelector:</code> 方法，在方法内部生成 <code>NSMethodSignature</code> 类型的方法签名对象。在生成签名对象时，可以指定 <code>target</code> 和 <code>SEL</code>，可以将这两个参数换成其他参数，将消息转发给其他对象。<h4 id="1-对象方法-2"><a href="#1-对象方法-2" class="headerlink" title="1. 对象方法"></a>1. 对象方法</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">forwardInvocation</span>:(NSInvocation *)<span class="hljs-selector-tag">anInvocation</span> &#123;<br>    <span class="hljs-selector-tag">if</span> ([anInvocation selector] == <span class="hljs-variable">@selector</span>(<span class="hljs-attribute">sendMessage</span>:)) &#123;<br>        <span class="hljs-selector-attr">[anInvocation invokeWithTarget:[MessageTemp new]</span>];<br>    &#125; <span class="hljs-selector-tag">else</span> &#123;<br>        <span class="hljs-selector-attr">[super forwardInvocation:anInvocation]</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-tag">-</span> (NSMethodSignature *)<span class="hljs-selector-tag">methodSignatureForSelector</span>:(SEL)<span class="hljs-selector-tag">aSelector</span> &#123;<br>    <span class="hljs-selector-tag">if</span> (aSelector == <span class="hljs-variable">@selector</span>(<span class="hljs-attribute">sendMessage</span>:)) &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-attr">[NSMethodSignature signatureWithObjCTypes:<span class="hljs-string">&quot;v@:@&quot;</span>]</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-attr">[super methodSignatureForSelector:aSelector]</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-类方法-2"><a href="#2-类方法-2" class="headerlink" title="2. 类方法"></a>2. 类方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">+ (<span class="hljs-keyword">void</span>)forwardInvocation:(NSInvocation *)anInvocation &#123;<br>    <span class="hljs-keyword">if</span> ([anInvocation selector] == <span class="hljs-meta">@selector(sendClassMessage:)</span>) &#123;<br>        [anInvocation invokeWithTarget:[MessageTemp <span class="hljs-keyword">new</span>]];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-keyword">super</span> forwardInvocation:anInvocation];<br>    &#125;<br>&#125;<br><br>+ (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;<br>    <span class="hljs-keyword">if</span> (aSelector == <span class="hljs-meta">@selector(sendClassMessage:)</span>) &#123;<br>        <span class="hljs-keyword">return</span> [NSMethodSignature signatureWithObjCTypes:<span class="hljs-string">&quot;v@:@&quot;</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">super</span> methodSignatureForSelector:aSelector];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3></li></ol><ul><li>适用于把操作给另外一个类来实现</li><li>利用分类，防止应用程序因为未处理消息而崩溃</li><li>Jspatch </li><li>Aspects</li><li>BlocksKit</li></ul>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS底层-RunLoop</title>
    <link href="/2020/07/01/iOS%E5%BA%95%E5%B1%82-RunLoop/"/>
    <url>/2020/07/01/iOS%E5%BA%95%E5%B1%82-RunLoop/</url>
    
    <content type="html"><![CDATA[<h1 id="RunLoop"><a href="#RunLoop" class="headerlink" title="RunLoop"></a>RunLoop</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>RunLoop是通过内部维护的<code>事件循环(Event Loop)</code>来对<code>事件/消息进行管理</code>的一个对象。</p><p>1、没有消息处理时，休眠已避免资源占用，由用户态切换到内核态(CPU-内核态和用户态)<br><br>2、有消息需要处理时，立刻被唤醒，由内核态切换到用户态</p><p><strong>为什么main函数不会退出？</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">int</span> main(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> * argv[]) &#123;<br>    <span class="hljs-keyword">@autoreleasepool</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">UIApplicationMain</span>(argc, argv, <span class="hljs-literal">nil</span>, <span class="hljs-built_in">NSStringFromClass</span>([AppDelegate <span class="hljs-keyword">class</span>]));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UIApplicationMain内部默认开启了主线程的RunLoop，并执行了一段无限循环的代码（不是简单的for循环或while循环）</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//无限循环代码模式(伪代码)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> * argv[])</span> </span>&#123;        <br>    BOOL running = YES;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-comment">// 执行各种任务，处理各种事件</span><br>        <span class="hljs-comment">// ......</span><br>    &#125; <span class="hljs-keyword">while</span> (running);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>UIApplicationMain函数一直没有返回，而是不断地接收处理消息以及等待休眠，所以运行程序之后会保持持续运行状态。</p><h2 id="二、RunLoop的数据结构"><a href="#二、RunLoop的数据结构" class="headerlink" title="二、RunLoop的数据结构"></a>二、RunLoop的数据结构</h2><p><code>NSRunLoop(Foundation)</code>是<code>CFRunLoop(CoreFoundation)</code>的封装，提供了面向对象的API<br>RunLoop 相关的主要涉及五个类：</p><p><code>CFRunLoop</code>：RunLoop对象<br><code>CFRunLoopMode</code>：运行模式<br><code>CFRunLoopSource</code>：输入源/事件源<br><code>CFRunLoopTimer</code>：定时源<br><code>CFRunLoopObserver</code>：观察者</p><p><strong>1、CFRunLoop</strong></p><p>由<code>pthread</code>(线程对象，说明RunLoop和线程是一一对应的)、<code>currentMode</code>(当前所处的运行模式)、<code>modes</code>(多个运行模式的集合)、<code>commonModes</code>(模式名称字符串集合)、<code>commonModelItems</code>(Observer,Timer,Source集合)构成</p><p><strong>2、CFRunLoopMode</strong></p><p>由name、source0、source1、observers、timers构成</p><p><strong>3、CFRunLoopSource</strong></p><p>分为source0和source1两种</p><ul><li><code>source0:</code><br>即非基于port的，也就是用户触发的事件。需要手动唤醒线程，将当前线程从内核态切换到用户态</li></ul><ul><li><code>source1:</code><br>基于port的，包含一个 mach_port 和一个回调，可监听系统端口和通过内核和其他线程发送的消息，能主动唤醒RunLoop，接收分发系统事件。<br>具备唤醒线程的能力</li></ul><p><strong>4、CFRunLoopTimer</strong></p><p>基于时间的触发器，基本上说的就是NSTimer。在预设的时间点唤醒RunLoop执行回调。因为它是基于RunLoop的，因此它不是实时的（就是NSTimer 是不准确的。 因为RunLoop只负责分发源的消息。如果线程当前正在处理繁重的任务，就有可能导致Timer本次延时，或者少执行一次）。</p><p><strong>5、CFRunLoopObserver</strong></p><p>监听以下时间点:<code>CFRunLoopActivity</code></p><ul><li><p><code>kCFRunLoopEntry</code><br>RunLoop准备启动</p></li><li><p><code>kCFRunLoopBeforeTimers</code><br>RunLoop将要处理一些Timer相关事件</p></li><li><p><code>kCFRunLoopBeforeSources</code><br>RunLoop将要处理一些Source事件</p></li><li><p><code>kCFRunLoopBeforeWaiting</code><br>RunLoop将要进行休眠状态,即将由用户态切换到内核态</p></li><li><p><code>kCFRunLoopAfterWaiting</code><br>RunLoop被唤醒，即从内核态切换到用户态后</p></li><li><p><code>kCFRunLoopExit</code><br>RunLoop退出</p></li><li><p><code>kCFRunLoopAllActivities</code><br>监听所有状态</p></li></ul><p><strong>6、各数据结构之间的联系</strong></p><p>线程和RunLoop一一对应， RunLoop和Mode是一对多的，Mode和source、timer、observer也是一对多的</p><h2 id="三、RunLoop的Mode"><a href="#三、RunLoop的Mode" class="headerlink" title="三、RunLoop的Mode"></a>三、RunLoop的Mode</h2><p>关于Mode首先要知道一个RunLoop 对象中可能包含多个Mode，且每次调用 RunLoop 的主函数时，只能指定其中一个 Mode(CurrentMode)。切换 Mode，需要重新指定一个 Mode 。主要是为了分隔开不同的 Source、Timer、Observer，让它们之间互不影响。</p><p>当RunLoop运行在Mode1上时，是无法接受处理Mode2或Mode3上的Source、Timer、Observer事件的</p><p>总共是有五种<code>CFRunLoopMode</code>:</p><ul><li><code>kCFRunLoopDefaultMode</code>：默认模式，主线程是在这个运行模式下运行</li><li><code>UITrackingRunLoopMode</code>：跟踪用户交互事件（用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他Mode影响）</li><li><code>UIInitializationRunLoopMode</code>：在刚启动App时第进入的第一个 Mode，启动完成后就不再使用</li><li><code>GSEventReceiveRunLoopMode</code>：接受系统内部事件，通常用不到</li><li><code>kCFRunLoopCommonModes</code>：伪模式，不是一种真正的运行模式，是同步Source/Timer/Observer到多个Mode中的一种解决方案</li></ul><h2 id="四、RunLoop的实现机制"><a href="#四、RunLoop的实现机制" class="headerlink" title="四、RunLoop的实现机制"></a>四、RunLoop的实现机制</h2><p>对于RunLoop而言最核心的事情就是保证线程在没有消息的时候休眠，在有消息时唤醒，以提高程序性能。RunLoop这个机制是依靠系统内核来完成的（苹果操作系统核心组件Darwin中的Mach）。</p><p>RunLoop通过<code>mach_msg()</code>函数接收、发送消息。它的本质是调用函数<code>mach_msg_trap()</code>，相当于是一个系统调用，会触发内核状态切换。在用户态调用 <code>mach_msg_trap()</code>时会切换到内核态；内核态中内核实现的<code>mach_msg()</code>函数会完成实际的工作。<br>即基于port的source1，监听端口，端口有消息就会触发回调；而source0，要手动标记为待处理和手动唤醒RunLoop</p><p><a href="https://www.jianshu.com/p/a764aad31847">Mach消息发送机制</a><br>大致逻辑为：<br>1、通知观察者 RunLoop 即将启动。<br>2、通知观察者即将要处理Timer事件。<br>3、通知观察者即将要处理source0事件。<br>4、处理source0事件。<br>5、如果基于端口的源(Source1)准备好并处于等待状态，进入步骤9。<br>6、通知观察者线程即将进入休眠状态。<br>7、将线程置于休眠状态，由用户态切换到内核态，直到下面的任一事件发生才唤醒线程。</p><ul><li>一个基于 port 的Source1 的事件(图里应该是source0)。</li><li>一个 Timer 到时间了。</li><li>RunLoop 自身的超时时间到了。</li><li>被其他调用者手动唤醒。</li></ul><p>8、通知观察者线程将被唤醒。<br>9、处理唤醒时收到的事件。</p><ul><li>如果用户定义的定时器启动，处理定时器事件并重启RunLoop。进入步骤2。</li><li>如果输入源启动，传递相应的消息。</li><li>如果RunLoop被显示唤醒而且时间还没超时，重启RunLoop。进入步骤2</li></ul><p>10、通知观察者RunLoop结束。</p><h2 id="五、RunLoop与NSTimer"><a href="#五、RunLoop与NSTimer" class="headerlink" title="五、RunLoop与NSTimer"></a>五、RunLoop与NSTimer</h2><p>一个比较常见的问题：滑动tableView时，定时器还会生效吗？<br>默认情况下RunLoop运行在<code>kCFRunLoopDefaultMode</code>下，而当滑动tableView时，RunLoop切换到<code>UITrackingRunLoopMode</code>，而Timer是在<code>kCFRunLoopDefaultMode</code>下的，就无法接受处理Timer的事件。<br>怎么去解决这个问题呢？把Timer添加到UITrackingRunLoopMode上并不能解决问题，因为这样在默认情况下就无法接受定时器事件了。<br>所以我们需要把Timer同时添加到<code>UITrackingRunLoopMode</code>和<code>kCFRunLoopDefaultMode</code>上。<br>那么如何把timer同时添加到多个mode上呢？就要用到<code>NSRunLoopCommonModes</code>了</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>Timer就被添加到多个mode上，这样即使RunLoop由<code>kCFRunLoopDefaultMode</code>切换到<code>UITrackingRunLoopMode</code>下，也不会影响接收Timer事件</p><h2 id="六、RunLoop和线程"><a href="#六、RunLoop和线程" class="headerlink" title="六、RunLoop和线程"></a>六、RunLoop和线程</h2><ul><li>线程和RunLoop是一一对应的,其映射关系是保存在一个全局的 Dictionary 里</li><li>自己创建的线程默认是没有开启RunLoop的</li></ul><p><strong>1、怎么创建一个常驻线程？</strong></p><p>1、为当前线程开启一个RunLoop（第一次调用 [NSRunLoop currentRunLoop]方法时实际是会先去创建一个RunLoop）<br>2、向当前RunLoop中添加一个Port/Source等维持RunLoop的事件循环（如果RunLoop的mode中一个item都没有，RunLoop会退出）<br>3、启动该RunLoop</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">@autoreleasepool</span> &#123;<br>      <br>      <span class="hljs-built_in">NSRunLoop</span> *runLoop = [<span class="hljs-built_in">NSRunLoop</span> currentRunLoop];<br>      <br>      [[<span class="hljs-built_in">NSRunLoop</span> currentRunLoop] addPort:[<span class="hljs-built_in">NSMachPort</span> port] forMode:<span class="hljs-built_in">NSDefaultRunLoopMode</span>];<br>      <br>      [runLoop run];<br>      <br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>2、输出下边代码的执行顺序</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1&quot;</span>);<br><br><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), ^&#123;<br>    <br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2&quot;</span>);<br><br>    [<span class="hljs-keyword">self</span> performSelector:<span class="hljs-keyword">@selector</span>(test) withObject:<span class="hljs-literal">nil</span> afterDelay:<span class="hljs-number">10</span>];<br>    <br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3&quot;</span>);<br>&#125;);<br><br><span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;4&quot;</span>);<br><br>- (<span class="hljs-keyword">void</span>)test<br>&#123;<br>    <br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;5&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>答案是1423，test方法并不会执行。<br>原因是如果是带afterDelay的延时函数，会在内部创建一个 NSTimer，然后添加到当前线程的RunLoop中。也就是如果当前线程没有开启RunLoop，该方法会失效。<br>那么我们改成:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), ^&#123;<br>        <br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2&quot;</span>);<br>        <br>        [[<span class="hljs-built_in">NSRunLoop</span> currentRunLoop] run];<br>        <br>        [<span class="hljs-keyword">self</span> performSelector:<span class="hljs-keyword">@selector</span>(test) withObject:<span class="hljs-literal">nil</span> afterDelay:<span class="hljs-number">10</span>];<br>  <br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3&quot;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure><p>然而test方法依然不执行。<br>原因是如果RunLoop的mode中一个item都没有，RunLoop会退出。即在调用RunLoop的run方法后，由于其mode中没有添加任何item去维持RunLoop的时间循环，RunLoop随即还是会退出。<br>所以我们自己启动RunLoop，一定要在添加item后</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), ^&#123;<br>        <br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2&quot;</span>);<br>        <br>        [<span class="hljs-keyword">self</span> performSelector:<span class="hljs-keyword">@selector</span>(test) withObject:<span class="hljs-literal">nil</span> afterDelay:<span class="hljs-number">10</span>];<br>        <br>        [[<span class="hljs-built_in">NSRunLoop</span> currentRunLoop] run];<br>  <br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3&quot;</span>);<br>    &#125;);<br></code></pre></td></tr></table></figure><p><strong>3、怎样保证子线程数据回来更新UI的时候不打断用户的滑动操作？</strong></p><p>当我们在子请求数据的同时滑动浏览当前页面，如果数据请求成功要切回主线程更新UI，那么就会影响当前正在滑动的体验。<br>我们就可以将更新UI事件放在主线程的<code>NSDefaultRunLoopMode</code>上执行即可，这样就会等用户不再滑动页面，主线程RunLoop由<code>UITrackingRunLoopMode</code>切换到<code>NSDefaultRunLoopMode</code>时再去更新UI</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">[<span class="hljs-keyword">self</span> performSelectorOnMainThread:<span class="hljs-keyword">@selector</span>(reloadData) withObject:<span class="hljs-literal">nil</span> waitUntilDone:<span class="hljs-literal">NO</span> modes:@[<span class="hljs-built_in">NSDefaultRunLoopMode</span>]];<br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h4 id="1-如何使用-Runloop-实现一个常驻线程？这种线程一般有什么作用？"><a href="#1-如何使用-Runloop-实现一个常驻线程？这种线程一般有什么作用？" class="headerlink" title="1. 如何使用 Runloop 实现一个常驻线程？这种线程一般有什么作用？"></a>1. 如何使用 <code>Runloop</code> 实现一个常驻线程？这种线程一般有什么作用？</h4><p>一般做法是向 <code>Runloop</code> 中放一个 <code>port</code>。<br><br>创建一条常驻的后台线程，做任何你想做的事。</p><h4 id="2-为什么-NSTimer-有时候不好使？"><a href="#2-为什么-NSTimer-有时候不好使？" class="headerlink" title="2. 为什么 NSTimer 有时候不好使？"></a>2. 为什么 <code>NSTimer</code> 有时候不好使？</h4><p>因为创建的  <code>NSTimer</code> 默认是被加入到了 <code>defaultMode</code>，所以当 <code>Runloop</code> 的 <code>Mode</code> 变化时，当前的 <code>NSTimer</code> 就不会工作了。</p><h4 id="3-autoreleasePool-在何时被释放？"><a href="#3-autoreleasePool-在何时被释放？" class="headerlink" title="3. autoreleasePool 在何时被释放？"></a>3. <code>autoreleasePool</code> 在何时被释放？</h4><p><code>App</code>启动后，苹果在主线程 <code>RunLoop</code> 里注册了两个 <code>Observer</code>，其回调都是 <code>_wrapRunLoopWithAutoreleasePoolHandler()</code>。</p><p>第一个 <code>Observer</code> 监视的事件是 <code>Entry(即将进入Loop)</code>，其回调内会调用 <code>_objc_autoreleasePoolPush()</code> 创建自动释放池。其 <code>order</code> 是 <code>-2147483647</code>，优先级最高，保证创建释放池发生在其他所有回调之前。</p><p>第二个 <code>Observer</code> 监视了两个事件： <code>BeforeWaiting</code>(准备进入休眠) 时调用<code>_objc_autoreleasePoolPop()</code>  和 <code>_objc_autoreleasePoolPush()</code> 释放旧的池并创建新池；<code>Exit</code>(即将退出Loop) 时调用 <code>_objc_autoreleasePoolPop()</code> 来释放自动释放池。这个 <code>Observer</code> 的 <code>order</code> 是 <code>2147483647</code>，优先级最低，保证其释放池子发生在其他所有回调之后。</p><p>在主线程执行的代码，通常是写在诸如事件回调、<code>Timer</code>回调内的。这些回调会被 <code>RunLoop</code> 创建好的 <code>AutoreleasePool</code> 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 <code>Pool</code> 了。</p><h4 id="4-PerformSelector-的实现原理？"><a href="#4-PerformSelector-的实现原理？" class="headerlink" title="4. PerformSelector 的实现原理？"></a>4. <code>PerformSelector</code> 的实现原理？</h4><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p><h4 id="5-PerformSelector-afterDelay-这个方法在子线程中是否起作用？为什么？怎么解决？"><a href="#5-PerformSelector-afterDelay-这个方法在子线程中是否起作用？为什么？怎么解决？" class="headerlink" title="5. PerformSelector:afterDelay:这个方法在子线程中是否起作用？为什么？怎么解决？"></a>5. <code>PerformSelector:afterDelay:</code>这个方法在子线程中是否起作用？为什么？怎么解决？</h4><p>不起作用，子线程默认没有 <code>Runloop</code>，也就没有 <code>Timer</code>。<br><br>解决的办法是可以使用 <code>GCD</code> 来实现：<code>Dispatch_after</code></p><h4 id="6-讲一下-Observer-？"><a href="#6-讲一下-Observer-？" class="headerlink" title="6. 讲一下 Observer ？"></a>6. 讲一下 <code>Observer</code> ？</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objc"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">CF_OPTIONS</span>(<span class="hljs-built_in">CFOptionFlags</span>, <span class="hljs-built_in">CFRunLoopActivity</span>) &#123;<br>    kCFRunLoopEntry         = (<span class="hljs-number">1</span>UL &lt;&lt; <span class="hljs-number">0</span>), <span class="hljs-comment">// 即将进入Loop</span><br>    kCFRunLoopBeforeTimers  = (<span class="hljs-number">1</span>UL &lt;&lt; <span class="hljs-number">1</span>), <span class="hljs-comment">// 即将处理 Timer</span><br>    kCFRunLoopBeforeSources = (<span class="hljs-number">1</span>UL &lt;&lt; <span class="hljs-number">2</span>), <span class="hljs-comment">// 即将处理 Source</span><br>    kCFRunLoopBeforeWaiting = (<span class="hljs-number">1</span>UL &lt;&lt; <span class="hljs-number">5</span>), <span class="hljs-comment">// 即将进入休眠</span><br>    kCFRunLoopAfterWaiting  = (<span class="hljs-number">1</span>UL &lt;&lt; <span class="hljs-number">6</span>), <span class="hljs-comment">// 刚从休眠中唤醒</span><br>    kCFRunLoopExit          = (<span class="hljs-number">1</span>UL &lt;&lt; <span class="hljs-number">7</span>), <span class="hljs-comment">// 即将退出Loop</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="7-解释一下-事件响应-的过程？"><a href="#7-解释一下-事件响应-的过程？" class="headerlink" title="7. 解释一下 事件响应 的过程？"></a>7. 解释一下 <code>事件响应</code> 的过程？</h4><p>苹果注册了一个 <code>Source1</code> (基于 <code>mach port</code> 的) 用来接收系统事件，其回调函数为 <code>__IOHIDEventSystemClientQueueCallback()</code>。</p><p>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 <code>IOKit.framework</code> 生成一个 <code>IOHIDEvent</code> 事件并由 <code>SpringBoard</code> 接收。这个过程的详细情况可以参考这里。<code>SpringBoard</code> 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 <code>Event</code>，随后用 <code>mach port</code> 转发给需要的 <code>App</code> 进程。随后苹果注册的那个 <code>Source1</code> 就会触发回调，并调用 <code>_UIApplicationHandleEventQueue()</code> 进行应用内部的分发。</p><p><code>_UIApplicationHandleEventQueue()</code> 会把 <code>IOHIDEvent</code> 处理并包装成 <code>UIEvent</code> 进行处理或分发，其中包括识别 <code>UIGesture</code>/处理屏幕旋转/发送给 <code>UIWindow</code> 等。通常事件比如 <code>UIButton 点击</code>、<code>touchesBegin/Move/End/Cancel</code> 事件都是在这个回调中完成的。</p><h4 id="8-解释一下-手势识别-的过程？"><a href="#8-解释一下-手势识别-的过程？" class="headerlink" title="8. 解释一下 手势识别 的过程？"></a>8. 解释一下 <code>手势识别</code> 的过程？</h4><p>当上面的 <code>_UIApplicationHandleEventQueue() </code>识别了一个手势时，其首先会调用 <code>Cancel</code> 将当前的 <code>touchesBegin/Move/End</code> 系列回调打断。随后系统将对应的 <code>UIGestureRecognizer</code> 标记为待处理。</p><p>苹果注册了一个 <code>Observer</code> 监测 <code>BeforeWaiting</code> (Loop即将进入休眠) 事件，这个 <code>Observer</code> 的回调函数是 <code>_UIGestureRecognizerUpdateObserver()</code>，其内部会获取所有刚被标记为待处理的 <code>GestureRecognizer</code>，并执行<code>GestureRecognizer</code> 的回调。</p><p>当有 <code>UIGestureRecognizer</code> 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p><h4 id="9-解释一下-GCD-在-Runloop-中的使用？"><a href="#9-解释一下-GCD-在-Runloop-中的使用？" class="headerlink" title="9. 解释一下 GCD 在 Runloop 中的使用？"></a>9. 解释一下 <code>GCD</code> 在 <code>Runloop</code> 中的使用？</h4><p><code>GCD</code>由 子线程 返回到 主线程,只有在这种情况下才会触发 RunLoop。会触发 RunLoop 的 Source 1 事件。</p><h4 id="10-解释一下-NSTimer。"><a href="#10-解释一下-NSTimer。" class="headerlink" title="10. 解释一下 NSTimer。"></a>10. 解释一下 <code>NSTimer</code>。</h4><p><code>NSTimer</code> 其实就是 <code>CFRunLoopTimerRef</code>，他们之间是 <code>toll-free bridged</code> 的。一个 <code>NSTimer</code> 注册到 <code>RunLoop</code> 后，<code>RunLoop</code> 会为其重复的时间点注册好事件。例如 <code>10:00</code>, <code>10:10</code>, <code>10:20</code> 这几个时间点。<code>RunLoop</code> 为了节省资源，并不会在非常准确的时间点回调这个<code>Timer</code>。<code>Timer</code> 有个属性叫做 <code>Tolerance</code> (宽容度)，标示了当时间点到后，容许有多少最大误差。</p><p>如果某个时间点被错过了，例如执行了一个很长的任务，则那个时间点的回调也会跳过去，不会延后执行。就比如等公交，如果 10:10 时我忙着玩手机错过了那个点的公交，那我只能等 10:20 这一趟了。</p><p><code>CADisplayLink</code> 是一个和屏幕刷新率一致的定时器（但实际实现原理更复杂，和 NSTimer 并不一样，其内部实际是操作了一个 <code>Source</code>）。如果在两次屏幕刷新之间执行了一个长任务，那其中就会有一帧被跳过去（和 <code>NSTimer</code> 相似），造成界面卡顿的感觉。在快速滑动 <code>TableView</code> 时，即使一帧的卡顿也会让用户有所察觉。<code>Facebook</code> 开源的 <code>AsyncDisplayLink</code> 就是为了解决界面卡顿的问题，其内部也用到了 <code>RunLoop</code>。</p><h4 id="11-利用-runloop-解释一下页面的渲染的过程？"><a href="#11-利用-runloop-解释一下页面的渲染的过程？" class="headerlink" title="11. 利用 runloop 解释一下页面的渲染的过程？"></a>11. 利用 <code>runloop</code> 解释一下页面的渲染的过程？</h4><p>当我们调用 <code>[UIView setNeedsDisplay]</code> 时，这时会调用当前 <code>View.layer</code> 的 <code>[view.layer setNeedsDisplay]</code>方法。</p><p>这等于给当前的 <code>layer</code> 打上了一个脏标记，而此时并没有直接进行绘制工作。而是会到当前的 <code>Runloop</code> 即将休眠，也就是 <code>beforeWaiting</code> 时才会进行绘制工作。</p><p>紧接着会调用 <code>[CALayer display]</code>，进入到真正绘制的工作。<code>CALayer</code> 层会判断自己的 <code>delegate</code> 有没有实现异步绘制的代理方法 <code>displayer:</code>，这个代理方法是异步绘制的入口，如果没有实现这个方法，那么会继续进行系统绘制的流程，然后绘制结束。</p><p><code>CALayer</code> 内部会创建一个 <code>Backing Store</code>，用来获取图形上下文。接下来会判断这个 <code>layer</code> 是否有 delegate。</p><p>如果有的话，会调用 <code>[layer.delegate drawLayer:inContext:]</code>，并且会返回给我们 <code>[UIView DrawRect:]</code> 的回调，让我们在系统绘制的基础之上再做一些事情。</p><p>如果没有 <code>delegate</code>，那么会调用 <code>[CALayer drawInContext:]</code>。</p><p>以上两个分支，最终 <code>CALayer</code> 都会将位图提交到 <code>Backing Store</code>，最后提交给 <code>GPU</code>。</p><p>至此绘制的过程结束。</p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>底层</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS代码块(Snippet)</title>
    <link href="/2020/06/01/%E4%BB%A3%E7%A0%81%E5%9D%97(Snippet)/"/>
    <url>/2020/06/01/%E4%BB%A3%E7%A0%81%E5%9D%97(Snippet)/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-b07622a36a646add.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><p>代码块(Snippet)，方便了代码快速创建。</p><h4 id="管理：在新版Xcode中管理页面在编译器的右上角"><a href="#管理：在新版Xcode中管理页面在编译器的右上角" class="headerlink" title="管理：在新版Xcode中管理页面在编译器的右上角"></a>管理：在新版Xcode中管理页面在编译器的右上角</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-80379a923c19ef74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码块管理"></p><h4 id="添加：选中代码鼠标右击"><a href="#添加：选中代码鼠标右击" class="headerlink" title="添加：选中代码鼠标右击"></a>添加：选中代码鼠标右击</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-52aa3439524de38c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加"></p><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-df39d293cbb6e8b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑"></p><ol><li><p>Title：标题。 </p></li><li><p>Summary：描述文字。 </p></li><li><p>Platform：可以使用的平台（如iOS、Mac OS）。 </p></li><li><p>Language：可以在哪些语言中使用（如 Objective-C、Swift）。 </p></li><li><p>Completion Shortcut：快捷方式，以字母开头（支持少数符号，如@）。 </p></li><li><p>Completion Scopes：作用范围，一般写在正确的位置拖动即可，Xcode会自行选择好。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">@property (nonatomic, strong) &lt;#ClassName#&gt; *&lt;#<span class="hljs-keyword">class</span>#&gt;; <span class="hljs-comment">///&lt; &lt;#注释#&gt;</span><br>@property (nonatomic, assign) &lt;#DataType#&gt; &lt;#name#&gt;; <span class="hljs-comment">///&lt; &lt;#注释#&gt;</span><br>@property (nonatomic, copy) &lt;#ClassName#&gt; *&lt;#name#&gt;; <span class="hljs-comment">///&lt; &lt;#注释#&gt;</span><br>@property (nonatomic, weak) id&lt;&lt;#delegateOrDataSouce#&gt;&gt; &lt;#delegateOrDataSouce#&gt;; <span class="hljs-comment">///&lt; &lt;#注释#&gt;</span><br>@property (nonatomic, weak) &lt;#Class#&gt; *&lt;#name#&gt;; <span class="hljs-comment">///&lt; &lt;#注释#&gt;</span><br></code></pre></td></tr></table></figure><h4 id="常用注释"><a href="#常用注释" class="headerlink" title="常用注释"></a>常用注释</h4></li><li><p>顶部注释</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/** &lt;#属性注释#&gt; */</span><br></code></pre></td></tr></table></figure></li><li><p>右侧注释</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span><span class="hljs-doctag">&lt; &lt;#注释#&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>简述顶部注释</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">/** &lt;<span class="hljs-meta">#简要描述#&gt;</span><br> * &lt;<span class="hljs-meta">#详细描述#&gt;</span><br> */<br></code></pre></td></tr></table></figure></li><li><p>Pragma</p></li></ol><ul><li>有分割线<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark <span class="hljs-meta-string">&lt;#mark#&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>无分割线<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - <span class="hljs-meta-string">&lt;#mark&gt;</span> 或 <span class="hljs-comment">// MARK: &lt;#mark#&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li><p>Warning(警告)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">warning</span> <span class="hljs-meta-string">&lt;#message#&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>???(不确定)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> ???: &lt;<span class="hljs-comment">#???#&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>!!!(警告)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> !!!: &lt;<span class="hljs-comment">#???#&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>FIXME(需要修改的地方)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> FIXME: &lt;<span class="hljs-comment">#Fix详情#&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>常用方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 页面控件配置</span><br>- (<span class="hljs-keyword">void</span>)setupSubViewsProperties &#123;<br>    <br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 页面控件布局</span><br>- (<span class="hljs-keyword">void</span>)setupSubViewsConstraint &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>枚举</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef <span class="hljs-type">NS_ENUM</span>(<span class="hljs-type">NSInteger</span>, &lt;#<span class="hljs-type">TypeName</span>#&gt;) &#123;<br>    <br>&#125;;<br><br>typedef <span class="hljs-type">NS_OPTIONS</span>(<span class="hljs-type">NSUInteger</span>, &lt;#<span class="hljs-type">TypeName</span>#&gt;) &#123;<br>                <br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>IFDEBUG</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#<span class="hljs-keyword">if</span> DEBUG<br>&lt;#TODO#&gt;<br>#else<br>&lt;#TODO#&gt;<br>#endif<br></code></pre></td></tr></table></figure></li><li><p>快捷初始化UILabel</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix">UILabel *<span class="hljs-attr">l</span> = [[UILabel alloc] init];<br>l.<span class="hljs-attr">font</span> = [UIFont &lt;<span class="hljs-comment">#font#&gt;];</span><br>l.<span class="hljs-attr">text</span> = @<span class="hljs-string">&quot;&lt;#conent#&gt;&quot;</span>;<br>l.<span class="hljs-attr">textColor</span> = [UIColor &lt;<span class="hljs-comment">#textColor#&gt;];</span><br>l.<span class="hljs-attr">numberOfLines</span> = <span class="hljs-number">0</span>;<br>[&lt;<span class="hljs-comment">#view#&gt; addSubview:l];</span><br></code></pre></td></tr></table></figure></li><li><p>快捷初始化UIButton</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">UIButton *<span class="hljs-keyword">b </span>= [UIButton <span class="hljs-keyword">buttonWithType:UIButtonTypeCustom];</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">b.backgroundColor </span>= [UIColor &lt;<span class="hljs-comment">#backgroundColor#&gt;];</span><br><span class="hljs-keyword">b.titleLabel.font </span>= [UIFont &lt;<span class="hljs-comment">#font#&gt;];</span><br>[<span class="hljs-keyword">b </span>setTitle:&lt;<span class="hljs-comment">#title#&gt; forState:UIControlStateNormal];</span><br>[<span class="hljs-keyword">b </span>setTitleColor:[UIColor &lt;<span class="hljs-comment">#titleColor#&gt;] forState:UIControlStateNormal];</span><br>[<span class="hljs-keyword">b </span>setImage:[UIImage imageNamed:&lt;<span class="hljs-comment">#(nonnull NSString *)#&gt;] forState:UIControlStateNormal]</span><br>[<span class="hljs-keyword">b </span><span class="hljs-keyword">addTarget:self </span>action:@selector(<span class="hljs-keyword">didTapped&lt;#Button </span>Name<span class="hljs-comment">#&gt;:) forControlEvents:UIControlEventTouchUpInside];</span><br>[&lt;<span class="hljs-comment">#view#&gt; addSubview:b];</span><br></code></pre></td></tr></table></figure></li><li><p>UIButton 点击事件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/** &lt;#ButtonName#&gt;点击事件 */</span><br>- (void)didTapped&lt;<span class="hljs-comment">#ButtonName#&gt;:(UIButton *)sender &#123;</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Notification事件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/** &lt;#Notification Name#&gt;通知事件 */</span><br>- (void)didReceive&lt;<span class="hljs-comment">#Notification Name#&gt;:(NSNotification *)notification &#123;</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>UIGestureRecognizer触摸事件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/** &lt;#GestureRecognizer Name#&gt;触摸事件 */</span><br>- (void)didRecognized&lt;<span class="hljs-comment">#GestureRecognizer Name#&gt;:(UIGestureRecognizer *)recognizer &#123;</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>这也是为了个人意见，其他还有很多可以做成代码块的，例如CGD，TableViewDataSource等等，希望短短的文章可以让你代码可以写的更好。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Snippet</tag>
      
      <tag>开发技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用UIDocument保存数据</title>
    <link href="/2020/06/01/%E5%88%A9%E7%94%A8UIDocument%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <url>/2020/06/01/%E5%88%A9%E7%94%A8UIDocument%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>继承UIDocument</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDDocument</span> : <span class="hljs-title">UIDocument</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">strong</span>, <span class="hljs-keyword">nonatomic</span>) <span class="hljs-built_in">NSData</span> *data;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br><br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;WDDocument.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDDocument</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 重写父类方法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  保存时调用</span><br><span class="hljs-comment"> *  @param typeName 文档文件类型后缀</span><br><span class="hljs-comment"> *  @param outError 错误信息输出</span><br><span class="hljs-comment"> *  @return 文档数据</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">id</span>)contentsForType:(<span class="hljs-built_in">NSString</span> *)typeName<br>                error:(<span class="hljs-built_in">NSError</span> *__autoreleasing *)outError<br>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">self</span>.data) &#123;<br>        <span class="hljs-keyword">self</span>.data = [<span class="hljs-built_in">NSData</span> data];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.data;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  读取数据时调用</span><br><span class="hljs-comment"> *  @param contents 文档数据</span><br><span class="hljs-comment"> *  @param typeName 文档文件类型后缀</span><br><span class="hljs-comment"> *  @param outError 错误信息输出</span><br><span class="hljs-comment"> *  @return 读取是否成功</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-built_in">BOOL</span>)loadFromContents:(<span class="hljs-keyword">id</span>)contents<br>                  ofType:(<span class="hljs-built_in">NSString</span> *)typeName<br>                   error:(<span class="hljs-built_in">NSError</span> *__autoreleasing *)outError<br>&#123;<br>    <span class="hljs-keyword">self</span>.data = [contents <span class="hljs-keyword">copy</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">@end</span><br><br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  取得云端存储文件的地址</span><br><span class="hljs-comment"> *  @param fileName 文件名，如果文件名为nil，则重新创建一个URL</span><br><span class="hljs-comment"> *  @return 文件地址</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-built_in">NSURL</span> *)getUbiquityFileURL:(<span class="hljs-built_in">NSString</span> *)fileName&#123;<br>    <span class="hljs-comment">//取得云端URL基地址(参数中传入nil则会默认获取第一个容器)，需要一个容器标示</span><br>    <span class="hljs-built_in">NSFileManager</span> *manager = [<span class="hljs-built_in">NSFileManager</span> defaultManager];<br>    <span class="hljs-built_in">NSURL</span> *url = [manager URLForUbiquityContainerIdentifier:<span class="hljs-string">@&quot;kContainerIdentifier&quot;</span>];<br>    <span class="hljs-comment">//取得Documents目录</span><br>    url = [url URLByAppendingPathComponent:<span class="hljs-string">@&quot;Documents&quot;</span>];<br>    <span class="hljs-comment">//取得最终地址</span><br>    url = [url URLByAppendingPathComponent:fileName];<br>    <span class="hljs-keyword">return</span> url;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 获取上传文件的路径</span><br><span class="hljs-built_in">NSDictionary</span> *dic = [<span class="hljs-built_in">NSDictionary</span> dictionaryWithContentsOfFile:[[<span class="hljs-built_in">NSBundle</span> mainBundle] pathForResource:<span class="hljs-string">@&quot;MyData&quot;</span> ofType:<span class="hljs-string">@&quot;plist&quot;</span>]];<br><span class="hljs-built_in">NSString</span> *text = <span class="hljs-string">@&quot;Test&quot;</span>;<br><span class="hljs-built_in">NSString</span> *fileName = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@.txt&quot;</span>,text];<br><br><span class="hljs-comment">// 保存文件</span><br>WDDocument *doucument = [[WDDocument alloc] initWithFileURL:[<span class="hljs-keyword">self</span> getUbiquityFileURL:fileName]];<br>doucument.data = [<span class="hljs-built_in">NSJSONSerialization</span> dataWithJSONObject:dic options:<span class="hljs-built_in">NSJSONWritingPrettyPrinted</span> error:<span class="hljs-literal">nil</span>];<br>[doucument saveToURL:[<span class="hljs-keyword">self</span> getUbiquityFileURL:fileName]<br>    forSaveOperation:<span class="hljs-built_in">UIDocumentSaveForOverwriting</span><br>   completionHandler:^(<span class="hljs-built_in">BOOL</span> success) &#123;<br>    <span class="hljs-comment">// 上传结果</span><br>&#125;];<br><br><span class="hljs-comment">// 下载文件</span><br><span class="hljs-built_in">NSURLSession</span> *session = [<span class="hljs-built_in">NSURLSession</span> sharedSession];<br>[[session downloadTaskWithURL:[<span class="hljs-keyword">self</span> getUbiquityFileURL:fileName] completionHandler:^(<span class="hljs-built_in">NSURL</span> * _Nullable location, <span class="hljs-built_in">NSURLResponse</span> * _Nullable response, <span class="hljs-built_in">NSError</span> * _Nullable error) &#123;<br>    <span class="hljs-comment">// 获取到文件路径</span><br>&#125;] resume];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
      <category>iOS</category>
      
      <category>Objective-C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发技巧</tag>
      
      <tag>Objective-C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript与原生交互</title>
    <link href="/2020/05/01/JavaScript%E4%B8%8E%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/"/>
    <url>/2020/05/01/JavaScript%E4%B8%8E%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<p> <img src="https://upload-images.jianshu.io/upload_images/3334769-b397461b46272052.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实例样式"></p><p>原生页面与HTML页面进行相互调用<br>方式 | 适用对象<br>—|—<br>拦截URL | <code>UIWebView</code>和<code>WKWebView</code><br>JavaScriptCore | <code>UIWebView</code><br>MessageHandler | <code>WKWebView</code><br>WebViewJavascriptBridge| <code>UIWebView</code>和<code>WKWebView</code></p><h3 id="实例HTML代码"><a href="#实例HTML代码" class="headerlink" title="实例HTML代码"></a>实例HTML代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;body&gt;<br>    &lt;h2&gt;按钮点击&lt;/h2&gt;<br>    &lt;button <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> onclick=<span class="hljs-string">&quot;buttonEvent()&quot;</span> id=<span class="hljs-string">&quot;submitButto&quot;</span>&gt;提交&lt;/button&gt;<br>    &lt;h2&gt;文件上传&lt;/h2&gt;<br>    &lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;<br>    &lt;h2&gt;原生注入数据&lt;/h2&gt;<br>    &lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;textField&quot;</span>&gt;<br>    &lt;input <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;button&quot;</span> onclick=<span class="hljs-string">&quot;getTextEvent()&quot;</span> value=<span class="hljs-string">&quot;开始注入&quot;</span>&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">function</span> load<span class="hljs-constructor">URL(<span class="hljs-params">url</span>)</span> &#123;<br>            var iFrame;<br>            iFrame = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;iframe&quot;</span>)</span>;<br>            iFrame.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;src&quot;</span>, <span class="hljs-params">url</span>)</span>;<br>            iFrame.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;style&quot;</span>, <span class="hljs-string">&quot;display:none;&quot;</span>)</span>;<br>            iFrame.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-string">&quot;0px&quot;</span>)</span>;<br>            iFrame.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;width&quot;</span>, <span class="hljs-string">&quot;0px&quot;</span>)</span>;<br>            iFrame.set<span class="hljs-constructor">Attribute(<span class="hljs-string">&quot;frameborder&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>)</span>;<br>            document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">iFrame</span>)</span>;<br>            iFrame.parentNode.remove<span class="hljs-constructor">Child(<span class="hljs-params">iFrame</span>)</span>;<br>            iFrame = null;<br>        &#125;<br>        <span class="hljs-keyword">function</span> button<span class="hljs-constructor">Event()</span>&#123;<br>            load<span class="hljs-constructor">URL(<span class="hljs-string">&quot;/buttonEvent&quot;</span>)</span>;<br>            button<span class="hljs-constructor">DidPapped()</span>;<br>        &#125;<br>    <br>        <span class="hljs-keyword">function</span> get<span class="hljs-constructor">TextEvent()</span> &#123;<br>            load<span class="hljs-constructor">URL(<span class="hljs-string">&quot;/getText&quot;</span>)</span>;<br>            get<span class="hljs-constructor">TextButtonDidPapped()</span>;<br>        &#125;<br>        <span class="hljs-keyword">function</span> get<span class="hljs-constructor">Text(<span class="hljs-params">text</span>)</span>&#123;<br>            document.get<span class="hljs-constructor">ElementById(<span class="hljs-string">&quot;textField&quot;</span>)</span>.value = text;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;       <br></code></pre></td></tr></table></figure><h2 id="拦截URL"><a href="#拦截URL" class="headerlink" title="拦截URL"></a>拦截URL</h2><h4 id="UIWebView"><a href="#UIWebView" class="headerlink" title="UIWebView"></a>UIWebView</h4><p>遵循<code>UIWebViewDelegate</code>调用<code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType </code>方法，判断获取的Url地址</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 调用JS</span><br><span class="hljs-keyword">if</span> ([request.URL.absoluteString hasSuffix:<span class="hljs-string">@&quot;buttonEvent&quot;</span>]) &#123;<br>    <span class="hljs-built_in">UIAlertController</span> *vc = [<span class="hljs-built_in">UIAlertControlleralertControllerWithTitle</span>:<span class="hljs-string">@&quot;温馨提示&quot;</span> message:<span class="hljs-string">@&quot;点击了提交按钮&quot;</span> preferredStyle:<span class="hljs-built_in">UIAlertControllerStyleAlert</span>];<br>        [vc addAction:[<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;确定&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;<br>            <br>    &#125;]];<br>    [<span class="hljs-keyword">self</span> presentViewController:vc animated:<span class="hljs-literal">true</span> completion:<span class="hljs-literal">nil</span>];  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;<br>&#125; <br><span class="hljs-comment">// 注入数据给JS</span><br><span class="hljs-keyword">if</span> ([request.URL.absoluteString hasSuffix:<span class="hljs-string">@&quot;getText&quot;</span>]) &#123; <br>    [webView stringByEvaluatingJavaScriptFromString:<span class="hljs-string">@&quot;getText(&#x27;哈哈&#x27;)&quot;</span>];<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br></code></pre></td></tr></table></figure><h4 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h4><p>遵循<code>WKNavigationDelegate</code>调用<code>- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler</code>方法判断获取的地址</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">NSString</span> *strRequest = [navigationAction.request.URL.absoluteString stringByRemovingPercentEncoding];<br><span class="hljs-comment">// 调用JS</span><br><span class="hljs-keyword">if</span> ([strRequest hasSuffix:<span class="hljs-string">@&quot;buttonEvent&quot;</span>]) &#123;<br>    <span class="hljs-built_in">UIAlertController</span> *vc = [<span class="hljs-built_in">UIAlertController</span> alertControllerWithTitle:<span class="hljs-string">@&quot;温馨提示&quot;</span> message:<span class="hljs-string">@&quot;点击了提交按钮&quot;</span> preferredStyle:<span class="hljs-built_in">UIAlertControllerStyleAlert</span>];<br>    [vc addAction:[<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;确定&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;<br>            <br>    &#125;]];<br>    [<span class="hljs-keyword">self</span> presentViewController:vc animated:<span class="hljs-literal">true</span> completion:<span class="hljs-literal">nil</span>];<br>    decisionHandler(<span class="hljs-built_in">WKNavigationActionPolicyCancel</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([strRequest hasSuffix:<span class="hljs-string">@&quot;getText&quot;</span>]) &#123; <span class="hljs-comment">// 注入数据给JS</span><br>    [webView evaluateJavaScript:<span class="hljs-string">@&quot;getText(&#x27;哈哈&#x27;)&quot;</span> completionHandler:^(<span class="hljs-keyword">id</span> _Nullable info, <span class="hljs-built_in">NSError</span> * _Nullable error) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Error--%@, info--%@&quot;</span>, error, info);<br>    &#125;];<br>    decisionHandler(<span class="hljs-built_in">WKNavigationActionPolicyCancel</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    decisionHandler(<span class="hljs-built_in">WKNavigationActionPolicyAllow</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JavaScriptCore"><a href="#JavaScriptCore" class="headerlink" title="JavaScriptCore"></a>JavaScriptCore</h2><ol><li>导入<code>&lt;JavaScriptCore/JavaScriptCore.h&gt;</code></li><li>遵循<code>&lt;UIWebViewDelegate&gt;</code>并实现<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>方法。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 对JSContext对象进行初始化</span><br>JSContext *context = [<span class="hljs-keyword">self</span>.webView valueForKeyPath:<span class="hljs-string">@&quot;documentView.webView.mainFrame.javaScriptContext&quot;</span>];<br><span class="hljs-comment">// 验证JSContext对象是否初始化成功</span><br>context.exceptionHandler = ^(JSContext *context, JSValue *exceptionValue)&#123;<br>    context.exception = exceptionValue;<br>&#125;;<br> <br><span class="hljs-comment">// 调用JS  </span><br>context[<span class="hljs-string">@&quot;buttonDidPapped&quot;</span>] = ^&#123;<br>    <span class="hljs-built_in">UIAlertController</span> *vc = [<span class="hljs-built_in">UIAlertController</span> alertControllerWithTitle:<span class="hljs-string">@&quot;温馨提示&quot;</span> message:<span class="hljs-string">@&quot;点击了提交按钮&quot;</span> preferredStyle:<span class="hljs-built_in">UIAlertControllerStyleAlert</span>];<br>    [vc addAction:[<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;确定&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;<br>            <br>    &#125;]];<br>    [<span class="hljs-keyword">self</span> presentViewController:vc animated:<span class="hljs-literal">true</span> completion:<span class="hljs-literal">nil</span>];<br>&#125;;<br> <br><span class="hljs-comment">// 注入数据给JS   </span><br>context[<span class="hljs-string">@&quot;getTextButtonDidPapped&quot;</span>] = ^&#123;<br>    <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;<br>      [<span class="hljs-keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="hljs-string">@&quot;getText(&#x27;哈哈&#x27;)&quot;</span>];<br>        &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h2 id="MessageHandler"><a href="#MessageHandler" class="headerlink" title="MessageHandler"></a>MessageHandler</h2><ol><li>修改js中的方法， 通过<code>window.webkit.messageHandlers</code>+操作方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buttonEvent</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.webkit.messageHandlers.buttonEvent.postMessage(<span class="hljs-literal">null</span>);<br>&#125;<br>        <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTextEvent</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.webkit.messageHandlers.getTextEvent.postMessage(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>遵循<code>WKScriptMessageHandler</code></li><li>在<code>- (void)viewWillAppear:(BOOL)animated </code>中添加<code>scriptMessageHandler</code></li><li>在<code>- (void)viewWillDisappear:(BOOL)animated</code>中移除<code>scriptMessageHandler</code></li><li>实现<code>WKScriptMessageHandler</code>方法<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewWillAppear:(<span class="hljs-built_in">BOOL</span>)animated &#123;<br>    [<span class="hljs-keyword">super</span> viewWillAppear:animated];<br>    [<span class="hljs-keyword">self</span>.webView.configuration.userContentController addScriptMessageHandler:<span class="hljs-keyword">self</span> name:<span class="hljs-string">@&quot;buttonEvent&quot;</span>];<br>    [<span class="hljs-keyword">self</span>.webView.configuration.userContentController addScriptMessageHandler:<span class="hljs-keyword">self</span> name:<span class="hljs-string">@&quot;getTextEvent&quot;</span>];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewWillDisappear:(<span class="hljs-built_in">BOOL</span>)animated &#123;<br>    [<span class="hljs-keyword">super</span> viewWillDisappear:animated];<br>    [<span class="hljs-keyword">self</span>.webView.configuration.userContentController removeScriptMessageHandlerForName:<span class="hljs-string">@&quot;buttonEvent&quot;</span>];<br>    [<span class="hljs-keyword">self</span>.webView.configuration.userContentController removeScriptMessageHandlerForName:<span class="hljs-string">@&quot;getTextEvent&quot;</span>];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - WKScriptMessageHandler Method</span><br>- (<span class="hljs-keyword">void</span>)userContentController:(<span class="hljs-built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="hljs-built_in">WKScriptMessage</span> *)message &#123;<br>    <span class="hljs-comment">// 调用JS</span><br>    <span class="hljs-keyword">if</span> ([message.name isEqualToString:<span class="hljs-string">@&quot;buttonEvent&quot;</span>]) &#123;<br>        <span class="hljs-built_in">UIAlertController</span> *vc = [<span class="hljs-built_in">UIAlertController</span> alertControllerWithTitle:<span class="hljs-string">@&quot;温馨提示&quot;</span> message:<span class="hljs-string">@&quot;点击了提交按钮&quot;</span> preferredStyle:<span class="hljs-built_in">UIAlertControllerStyleAlert</span>];<br>        [vc addAction:[<span class="hljs-built_in">UIAlertAction</span> actionWithTitle:<span class="hljs-string">@&quot;确定&quot;</span> style:<span class="hljs-built_in">UIAlertActionStyleDefault</span> handler:^(<span class="hljs-built_in">UIAlertAction</span> * _Nonnull action) &#123;<br>            <br>        &#125;]];<br>        [<span class="hljs-keyword">self</span> presentViewController:vc animated:<span class="hljs-literal">true</span> completion:<span class="hljs-literal">nil</span>];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 注入数据给JS</span><br>    <span class="hljs-keyword">if</span>  ([message.name isEqualToString:<span class="hljs-string">@&quot;getTextEvent&quot;</span>]) &#123;<br>        [<span class="hljs-keyword">self</span>.webView evaluateJavaScript:<span class="hljs-string">@&quot;getText(&#x27;哈哈&#x27;)&quot;</span> completionHandler:^(<span class="hljs-keyword">id</span> _Nullable info, <span class="hljs-built_in">NSError</span> * _Nullable error) &#123;<br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;Error--%@, info--%@&quot;</span>, error, info);<br>        &#125;];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="WebViewJavascriptBridge"><a href="#WebViewJavascriptBridge" class="headerlink" title="WebViewJavascriptBridge"></a>WebViewJavascriptBridge</h2><p>HTML代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>按钮点击<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&#x27;submitBtn&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交按钮&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;submitClick()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>文件选择<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;image&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>注入数据<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTextField&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开始获取&quot;</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&#x27;startGet&#x27;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getTextClick()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setupWebViewJavascriptBridge</span>(<span class="hljs-params">callback</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.WebViewJavascriptBridge) &#123; <span class="hljs-keyword">return</span> callback(WebViewJavascriptBridge); &#125;</span><br><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.WVJBCallbacks) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.WVJBCallbacks.push(callback); &#125;</span><br><span class="javascript">        <span class="hljs-built_in">window</span>.WVJBCallbacks = [callback];</span><br><span class="javascript">        <span class="hljs-keyword">var</span> WVJBIframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;iframe&#x27;</span>);</span><br><span class="javascript">        WVJBIframe.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="javascript">        WVJBIframe.src = <span class="hljs-string">&#x27;https://__bridge_loaded__&#x27;</span>;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.documentElement.appendChild(WVJBIframe);</span><br><span class="javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-built_in">document</span>.documentElement.removeChild(WVJBIframe) &#125;, <span class="hljs-number">0</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        setupWebViewJavascriptBridge(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">bridge</span>) </span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">submitClick</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            WebViewJavascriptBridge.callHandler(<span class="hljs-string">&#x27;submitClick&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>&#123;</span><br><span class="javascript">                </span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTextClick</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            WebViewJavascriptBridge.callHandler(<span class="hljs-string">&#x27;getTextClick&#x27;</span>, <span class="hljs-literal">null</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;getTextField&quot;</span>).value = response;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第三方库：<a href="https://github.com/marcuswestin/WebViewJavascriptBridge">地址</a></p><ol><li>添加<code>WebViewJavascriptBridge</code>库</li><li>导入头文件<code>#import &lt;WebViewJavascriptBridge.h&gt;</code></li><li>声明方法<code>@property WebViewJavascriptBridge* bridge;</code></li><li>与WebView关联<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">_bridge</span> = [WebViewJavascriptBridge bridgeForWebView:self.webView]<span class="hljs-comment">;</span><br><br><span class="hljs-section">[_bridge setWebViewDelegate:self]</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>调用js<figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs hy">[_bridge registerHandler:@<span class="hljs-string">&quot;submitClick&quot;</span> handler:^(<span class="hljs-name"><span class="hljs-builtin-name">id</span></span> data, WVJBResponseCallback responseCallback) &#123;<br>        UIAlertController *vc = [UIAlertController alertControllerWithTitle:@<span class="hljs-string">&quot;温馨提示&quot;</span> message:@<span class="hljs-string">&quot;点击了提交按钮&quot;</span> preferredStyle:UIAlertControllerStyleAlert]<span class="hljs-comment">;</span><br>        [vc addAction:[UIAlertAction actionWithTitle:@<span class="hljs-string">&quot;确定&quot;</span> style:UIAlertActionStyleDefault handler:^(<span class="hljs-name">UIAlertAction</span> * _Nonnull action) &#123;<br>            <br>        &#125;]]<span class="hljs-comment">;</span><br>        [self presentViewController:vc animated:true completion:nil]<span class="hljs-comment">;</span><br>&#125;]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>注入数据<figure class="highlight hy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hy">[_bridge registerHandler:@<span class="hljs-string">&quot;getTextClick&quot;</span> handler:^(<span class="hljs-name"><span class="hljs-builtin-name">id</span></span> data, WVJBResponseCallback responseCallback) &#123;<br>        responseCallback(@<span class="hljs-string">&quot;哈哈哈&quot;</span>)<span class="hljs-comment">;</span><br>&#125;]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>WebView</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebView</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS第三方库-YYCache</title>
    <link href="/2020/04/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-YYCache/"/>
    <url>/2020/04/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-YYCache/</url>
    
    <content type="html"><![CDATA[<h1 id="YYCache"><a href="#YYCache" class="headerlink" title="YYCache"></a>YYCache</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>一个高性能 iOS 缓存框架。</p><p>主要由<code>YYDiskCache</code>与<code>YYMemoryCache</code>组成。其中<code>YYDiskCache</code>是作为持久化储存，通过<code>sqlite</code>的形式储存在沙盒中<code>Library/Caches/&lt;缓存地址名称&gt;</code>。<br>缓存的对象需要遵循<code>NSCoding</code>协议，并实现协议方法，可以通过<code>YYModel</code>一键归档。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)encodeWithCoder:(<span class="hljs-built_in">NSCoder</span>*)aCoder &#123;<br>    [<span class="hljs-keyword">self</span> yy_modelEncodeWithCoder:aCoder];<br>&#125;<br><br>- (<span class="hljs-keyword">id</span>)initWithCoder:(<span class="hljs-built_in">NSCoder</span>*)aDecoder &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> yy_modelInitWithCoder:aDecoder];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">YYCache</span> : <span class="hljs-title">NSObject</span></span><br><br><span class="hljs-comment">/** 缓存的名称 */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSString</span> *name;<br><br><span class="hljs-comment">/** 内存缓存 */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readonly</span>) YYMemoryCache *memoryCache;<br><br><span class="hljs-comment">/** 磁盘缓存 */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readonly</span>) YYDiskCache *diskCache;<br><br><span class="hljs-comment">/** 初始化方式一，设置缓存名称 */</span><br>- (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">instancetype</span>)initWithName:(<span class="hljs-built_in">NSString</span> *)name;<br><br><span class="hljs-comment">/** 初始化方式二，设置缓存路径 */</span><br>- (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">instancetype</span>)initWithPath:(<span class="hljs-built_in">NSString</span> *)path <span class="hljs-built_in">NS_DESIGNATED_INITIALIZER</span>;<br><br><span class="hljs-comment">/** 便利构造初始化，设置缓存名称 */</span><br>+ (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">instancetype</span>)cacheWithName:(<span class="hljs-built_in">NSString</span> *)name;<br><br><span class="hljs-comment">/** 便利构造初始化，设置缓存路径 */</span><br>+ (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">instancetype</span>)cacheWithPath:(<span class="hljs-built_in">NSString</span> *)path;<br><br><span class="hljs-comment">/** 方法失效 */</span><br>- (<span class="hljs-keyword">instancetype</span>)init UNAVAILABLE_ATTRIBUTE;<br><span class="hljs-comment">/** 方法失效 */</span><br>+ (<span class="hljs-keyword">instancetype</span>)new UNAVAILABLE_ATTRIBUTE;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Access Methods</span><br><span class="hljs-comment">///=============================================================================</span><br><span class="hljs-comment">/// @name Access Methods</span><br><span class="hljs-comment">///=============================================================================</span><br><br><span class="hljs-comment">/** 判断缓存中是否存在相同key值的数据 */</span><br>- (<span class="hljs-built_in">BOOL</span>)containsObjectForKey:(<span class="hljs-built_in">NSString</span> *)key;<br><br><span class="hljs-comment">/** 异步 判断缓存中是否存在相同key值的数据 */</span><br>- (<span class="hljs-keyword">void</span>)containsObjectForKey:(<span class="hljs-built_in">NSString</span> *)key withBlock:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSString</span> *key, <span class="hljs-built_in">BOOL</span> contains))block;<br><br><span class="hljs-comment">/** 通过key值获取缓存数据 */</span><br>- (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">id</span>&lt;<span class="hljs-built_in">NSCoding</span>&gt;)objectForKey:(<span class="hljs-built_in">NSString</span> *)key;<br><br><span class="hljs-comment">/** 异步通过key值获取缓存数据 */</span><br>- (<span class="hljs-keyword">void</span>)objectForKey:(<span class="hljs-built_in">NSString</span> *)key withBlock:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSString</span> *key, <span class="hljs-keyword">id</span>&lt;<span class="hljs-built_in">NSCoding</span>&gt; object))block;<br><br><span class="hljs-comment">/** 通过key值，设置缓存数据 */</span><br>- (<span class="hljs-keyword">void</span>)setObject:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">id</span>&lt;<span class="hljs-built_in">NSCoding</span>&gt;)object forKey:(<span class="hljs-built_in">NSString</span> *)key;<br><br><span class="hljs-comment">/** 异步通过key值，设置缓存数据 */</span><br>- (<span class="hljs-keyword">void</span>)setObject:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">id</span>&lt;<span class="hljs-built_in">NSCoding</span>&gt;)object forKey:(<span class="hljs-built_in">NSString</span> *)key withBlock:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span>(^)(<span class="hljs-keyword">void</span>))block;<br><br><span class="hljs-comment">/** 通过key值，清除缓存数据 */</span><br>- (<span class="hljs-keyword">void</span>)removeObjectForKey:(<span class="hljs-built_in">NSString</span> *)key;<br><br><span class="hljs-comment">/** 异步通过key值，清除缓存数据  */</span><br>- (<span class="hljs-keyword">void</span>)removeObjectForKey:(<span class="hljs-built_in">NSString</span> *)key withBlock:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSString</span> *key))block;<br><br><span class="hljs-comment">/** 清除所有缓存数据  */</span><br>- (<span class="hljs-keyword">void</span>)removeAllObjects;<br><br><span class="hljs-comment">/** 异步清除所有缓存数据  */</span><br>- (<span class="hljs-keyword">void</span>)removeAllObjectsWithBlock:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-keyword">void</span>))block;<br><br><span class="hljs-comment">/** 异步清除所有缓存数据，并获取清除进程和是否清除失败  */</span><br>- (<span class="hljs-keyword">void</span>)removeAllObjectsWithProgressBlock:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span>(^)(<span class="hljs-keyword">int</span> removedCount, <span class="hljs-keyword">int</span> totalCount))progress<br>                                 endBlock:(<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">BOOL</span> error))end;<br><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>实例<code>Model</code></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">TestModel</span> : <span class="hljs-title">NSObject</span> &lt;<span class="hljs-title">NSCoding</span>&gt;</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *name;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">NSInteger</span> age;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-keyword">bool</span> sex;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br><br><span class="hljs-comment">//--------------------分界线--------------------//</span><br><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;TestModel.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;YYModel.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">TestModel</span></span><br>- (<span class="hljs-keyword">void</span>)encodeWithCoder:(<span class="hljs-built_in">NSCoder</span>*)aCoder &#123;<br>    [<span class="hljs-keyword">self</span> yy_modelEncodeWithCoder:aCoder];<br>&#125;<br><br>- (<span class="hljs-keyword">id</span>)initWithCoder:(<span class="hljs-built_in">NSCoder</span>*)aDecoder &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> yy_modelInitWithCoder:aDecoder];<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>添加到缓存中</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nix">YYCache *<span class="hljs-attr">cache</span> = [YYCache cacheWithName:@<span class="hljs-string">&quot;CacheName&quot;</span>];<br><br>TestModel *<span class="hljs-attr">model</span> = [[TestModel alloc] init];<br>model.<span class="hljs-attr">name</span> = @<span class="hljs-string">&quot;test&quot;</span>;<br>model.<span class="hljs-attr">age</span> = <span class="hljs-number">11</span>;<br>model.<span class="hljs-attr">sex</span> = NO;<br><br>TestModel *<span class="hljs-attr">model1</span> = [[TestModel alloc] init];<br>model1.<span class="hljs-attr">name</span> = @<span class="hljs-string">&quot;tes2&quot;</span>;<br>model1.<span class="hljs-attr">age</span> = <span class="hljs-number">22</span>;<br>model1.<span class="hljs-attr">sex</span> = YES;<br><br>TestModel *<span class="hljs-attr">model2</span> = [[TestModel alloc] init];<br>model2.<span class="hljs-attr">name</span> = @<span class="hljs-string">&quot;tes3&quot;</span>;<br>model2.<span class="hljs-attr">age</span> = <span class="hljs-number">33</span>;<br>model2.<span class="hljs-attr">sex</span> = NO;<br><br>NSArray&lt;TestModel *&gt; *<span class="hljs-attr">array</span> = @[model, model1, model2];<br><br>[cache setObject:array forKey:@<span class="hljs-string">&quot;Test&quot;</span>];<br>NSArray&lt;TestModel *&gt; *<span class="hljs-attr">tArray</span> = [cache objectForKey:@<span class="hljs-string">&quot;Test&quot;</span>];<br><br>for (TestModel *m <span class="hljs-keyword">in</span> tArray) &#123;<br>    NSLog(@<span class="hljs-string">&quot;name:%@----age:%ld---sex:%d&quot;</span>, m.name, m.age, m.sex);<br>&#125;<br></code></pre></td></tr></table></figure><p>获取缓存中的数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2019</span>-<span class="hljs-number">05</span>-<span class="hljs-number">16</span> <span class="hljs-number">11</span>:<span class="hljs-number">59</span>:<span class="hljs-number">12</span>.<span class="hljs-number">918221</span>+<span class="hljs-number">0800</span> YYKitDemo[<span class="hljs-number">8347</span>:<span class="hljs-number">173145</span>] name:test----age:<span class="hljs-number">11</span>---sex:<span class="hljs-number">0</span><br><span class="hljs-attribute">2019</span>-<span class="hljs-number">05</span>-<span class="hljs-number">16</span> <span class="hljs-number">11</span>:<span class="hljs-number">59</span>:<span class="hljs-number">12</span>.<span class="hljs-number">918342</span>+<span class="hljs-number">0800</span> YYKitDemo[<span class="hljs-number">8347</span>:<span class="hljs-number">173145</span>] name:tes<span class="hljs-number">2</span>----age:<span class="hljs-number">22</span>---sex:<span class="hljs-number">1</span><br><span class="hljs-attribute">2019</span>-<span class="hljs-number">05</span>-<span class="hljs-number">16</span> <span class="hljs-number">11</span>:<span class="hljs-number">59</span>:<span class="hljs-number">12</span>.<span class="hljs-number">918412</span>+<span class="hljs-number">0800</span> YYKitDemo[<span class="hljs-number">8347</span>:<span class="hljs-number">173145</span>] name:tes<span class="hljs-number">3</span>----age:<span class="hljs-number">33</span>---sex:<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Swift</category>
      
      <category>iOS</category>
      
      <category>SDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxSwift学习日常（基础介绍）</title>
    <link href="/2020/03/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-RxSwift%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8%EF%BC%88%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
    <url>/2020/03/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-RxSwift%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8%EF%BC%88%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Observable-介绍"><a href="#Observable-介绍" class="headerlink" title="Observable 介绍"></a>Observable 介绍</h1><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable<T></h2><ul><li>Observable<T> 这个类就是 Rx 框架的基础，我们可以称它为可观察序列。它的作用就是可以异步地产生一系列的 Event（事件），即一个 Observable<T> 对象会随着时间推移不定期地发出 event(element : T) 这样一个东西。</li><li>而且这些 Event 还可以携带数据，它的泛型 <T> 就是用来指定这个 Event 携带的数据的类型。</li><li>有了可观察序列，我们还需要有一个 Observer（订阅者）来订阅它，这样这个订阅者才能收到 Observable<T> 不时发出的 Event。<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2>查看 RxSwift 源码可以发现，事件 Event 的定义如下：</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Event&lt;Element&gt; &#123;<br>    <span class="hljs-comment">/// Next element is produced.</span><br>    <span class="hljs-keyword">case</span> next(Element)<br> <br>    <span class="hljs-comment">/// Sequence terminated with an error.</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-keyword">error</span>(Swift.Error)<br> <br>    <span class="hljs-comment">/// Sequence completed successfully.</span><br>    <span class="hljs-keyword">case</span> completed<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到 Event 就是一个枚举，也就是说一个 Observable 是可以发出 3 种不同类型的 Event 事件：</p><ul><li>next：next 事件就是那个可以携带数据 <T> 的事件，可以说它就是一个“最正常”的事件。</li><li>error：error 事件表示一个错误，它可以携带具体的错误内容，一旦 Observable 发出了 error event，则这个 Observable 就等于终止了，以后它再也不会发出 event 事件了。</li><li>completed：completed 事件表示 Observable 发出的事件正常地结束了，跟 error 一样，一旦 Observable 发出了 completed event，则这个 Observable 就等于终止了，以后它再也不会发出 event 事件了<h2 id="Observable-与-Sequence比较"><a href="#Observable-与-Sequence比较" class="headerlink" title="Observable 与 Sequence比较"></a>Observable 与 Sequence比较</h2>(1)、为更好地理解，我们可以把每一个 Observable 的实例想象成于一个 Swift 中的 Sequence：</li><li>即一个 Observable（ObservableType）相当于一个序列 Sequence（SequenceType）。</li><li>ObservableType.subscribe(_:) 方法其实就相当于 SequenceType.generate()。</li></ul><p>(2)、但它们之间还是有许多区别的：</p><ul><li>Swift 中的 SequenceType 是同步的循环，而 Observable 是异步的。</li><li>Observable 对象会在有任何 Event 时候，自动将 Event 作为一个参数通过 ObservableType.subscribe(_:) 发出，并不需要使用 next 方法。<h2 id="创建-Observable-序列"><a href="#创建-Observable-序列" class="headerlink" title="创建 Observable 序列"></a>创建 Observable 序列</h2><h3 id="just-方法"><a href="#just-方法" class="headerlink" title="just() 方法"></a>just() 方法</h3>（1）该方法通过传入一个默认值来初始化。<br><br>（2）下面样例我们显式地标注出了 observable 的类型为 Observable<Int>，即指定了这个 Observable 所发出的事件携带的数据类型必须是 Int 类型的。</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">let</span> observable = Observable&lt;<span class="hljs-built_in">Int</span>&gt;.just(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h3 id="of-方法"><a href="#of-方法" class="headerlink" title="of() 方法"></a>of() 方法</h3><p>（1）该方法可以接受可变数量的参数（必需要是同类型的）<br><br>（2）下面样例中我没有显式地声明出 Observable 的泛型类型，Swift 也会自动推断类型。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> observable = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="from-方法"><a href="#from-方法" class="headerlink" title="from() 方法"></a>from() 方法</h3><p>（1）该方法需要一个数组参数。<br><br>（2）下面样例中数据里的元素就会被当做这个 Observable 所发出 event 携带的数据内容，最终效果同上面饿 of() 样例是一样的。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">let</span> observable = Observable.<span class="hljs-keyword">from</span>([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>])<br></code></pre></td></tr></table></figure><h3 id="empty-方法"><a href="#empty-方法" class="headerlink" title="empty() 方法"></a>empty() 方法</h3><p>该方法创建一个空内容的 Observable 序列。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> observable = Observable<span class="hljs-symbol">&lt;Int&gt;</span>.<span class="hljs-built_in">empty</span>()<br></code></pre></td></tr></table></figure><h3 id="never-方法"><a href="#never-方法" class="headerlink" title="never() 方法"></a>never() 方法</h3><p>该方法创建一个永远不会发出 Event（也不会终止）的 Observable 序列。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">let</span> observable = Observable&lt;<span class="hljs-built_in">Int</span>&gt;.never()<br></code></pre></td></tr></table></figure><h3 id="error-方法"><a href="#error-方法" class="headerlink" title="error() 方法"></a>error() 方法</h3><p>该方法创建一个不做任何操作，而是直接发送一个错误的 Observable 序列。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">enum</span> MyError: <span class="hljs-built_in">Error</span> &#123;<br>    <span class="hljs-keyword">case</span> A<br>    <span class="hljs-keyword">case</span> B<br>&#125;<br>         <br><span class="hljs-keyword">let</span> observable = Observable&lt;Int&gt;.error(MyError.A)<br></code></pre></td></tr></table></figure><h3 id="range-方法"><a href="#range-方法" class="headerlink" title="range() 方法"></a>range() 方法</h3><p>（1）该方法通过指定起始和结束数值，创建一个以这个范围内所有值作为初始值的 Observable 序列。<br><br>（2）下面样例中，两种方法创建的 Observable 序列都是一样的。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//使用range()</span><br><span class="hljs-keyword">let</span> observable = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>range(start: <span class="hljs-number">1</span>, count: <span class="hljs-number">5</span>)<br> <br><span class="hljs-comment">//使用of()</span><br><span class="hljs-keyword">let</span> observable = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ,<span class="hljs-number">4</span> ,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h3 id="repeatElement-方法"><a href="#repeatElement-方法" class="headerlink" title="repeatElement() 方法"></a>repeatElement() 方法</h3><p>该方法创建一个可以无限发出给定元素的 Event 的 Observable 序列（永不终止）。 </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> observable = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>repeat<span class="hljs-constructor">Element(1)</span><br></code></pre></td></tr></table></figure><h3 id="generate-方法"><a href="#generate-方法" class="headerlink" title="generate() 方法"></a>generate() 方法</h3><p>（1）该方法创建一个只有当提供的所有的判断条件都为 true 的时候，才会给出动作的 Observable 序列。<br><br>（2）下面样例中，两种方法创建的 Observable 序列都是一样的。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//使用generate()方法</span><br><span class="hljs-keyword">let</span> observable = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span>generate(<br>    initialState: <span class="hljs-number">0</span>,<br>    condition: &#123; $<span class="hljs-number">0</span> &lt;= <span class="hljs-number">10</span> &#125;,<br>    iterate: &#123; $<span class="hljs-number">0</span> + <span class="hljs-number">2</span> &#125;<br>)<br> <br><span class="hljs-comment">//使用of()方法</span><br><span class="hljs-keyword">let</span> observable = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Observable</span>.</span></span><span class="hljs-keyword">of</span>(<span class="hljs-number">0</span> , <span class="hljs-number">2</span> ,<span class="hljs-number">4</span> ,<span class="hljs-number">6</span> ,<span class="hljs-number">8</span> ,<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="create-方法"><a href="#create-方法" class="headerlink" title="create() 方法"></a>create() 方法</h3><p>（1）该方法接受一个 block 形式的参数，任务是对每一个过来的订阅进行处理。<br><br>（2）下面是一个简单的样例。为方便演示，这里增加了订阅相关代码（关于订阅我之后会详细介绍的）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>这个block有一个回调参数observer就是订阅这个Observable对象的订阅者<br><span class="hljs-regexp">//</span>当一个订阅者订阅这个Observable对象的时候，就会将订阅者作为参数传入这个block来执行一些内容<br>let observable = Observable&lt;String&gt;.create&#123;observer <span class="hljs-keyword">in</span><br>    <span class="hljs-regexp">//</span>对订阅者发出了.<span class="hljs-keyword">next</span>事件，且携带了一个数据<span class="hljs-string">&quot;hangge.com&quot;</span><br>    observer.onNext(<span class="hljs-string">&quot;hangge.com&quot;</span>)<br>    <span class="hljs-regexp">//</span>对订阅者发出了.completed事件<br>    observer.onCompleted()<br>    <span class="hljs-regexp">//</span>因为一个订阅行为会有一个Disposable类型的返回值，所以在结尾一定要returen一个Disposable<br>    return Disposables.create()<br>&#125;<br> <br><span class="hljs-regexp">//</span>订阅测试<br>observable.subscribe &#123;<br>    print(<span class="hljs-variable">$0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="deferred-方法"><a href="#deferred-方法" class="headerlink" title="deferred() 方法"></a>deferred() 方法</h3><p>该个方法相当于是创建一个 Observable 工厂，通过传入一个 block 来执行延迟 Observable 序列创建的行为，而这个 block 里就是真正的实例化序列对象的地方。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//用于标记是奇数、还是偶数</span><br><span class="hljs-keyword">var</span> isOdd = <span class="hljs-literal">true</span><br> <br><span class="hljs-comment">//使用deferred()方法延迟Observable序列的初始化，通过传入的block来实现Observable序列的初始化并且返回。</span><br><span class="hljs-keyword">let</span> factory : Observable&lt;Int&gt; = Observable.deferred &#123;<br>     <br>    <span class="hljs-comment">//让每次执行这个block时候都会让奇、偶数进行交替</span><br>    isOdd = !isOdd<br>     <br>    <span class="hljs-comment">//根据isOdd参数，决定创建并返回的是奇数Observable、还是偶数Observable</span><br>    <span class="hljs-keyword">if</span> isOdd &#123;<br>        <span class="hljs-keyword">return</span> Observable.of(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span> ,<span class="hljs-number">7</span>)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> Observable.of(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>)<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//第1次订阅测试</span><br>factory.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-string">&quot;\(isOdd)&quot;</span>, <span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-comment">//第2次订阅测试</span></span><br><span class="hljs-function">factory.subscribe</span> &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-string">&quot;\(isOdd)&quot;</span>, <span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="interval-方法"><a href="#interval-方法" class="headerlink" title="interval() 方法"></a>interval() 方法</h3><p>（1）这个方法创建的 Observable 序列每隔一段设定的时间，会发出一个索引数的元素。而且它会一直发送下去。<br><br>（2）下面方法让其每 1 秒发送一次，并且是在主线程（MainScheduler）发送。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mel">let observable = Observable&lt;Int&gt;.interval(<span class="hljs-number">1</span>, scheduler: MainScheduler.<span class="hljs-keyword">instance</span>)<br>observable.subscribe &#123; <span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">event</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="timer-方法"><a href="#timer-方法" class="headerlink" title="timer() 方法"></a>timer() 方法</h3><p>（1）这个方法有两种用法，一种是创建的 Observable 序列在经过设定的一段时间后，产生唯一的一个元素。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//5秒种后发出唯一的一个元素0</span><br>let observable = Observable&lt;Int&gt;.timer(<span class="hljs-number">5</span>, scheduler: MainScheduler.<span class="hljs-keyword">instance</span>)<br>observable.subscribe &#123; <span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">event</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）另一种是创建的 Observable 序列在经过设定的一段时间后，每隔一段时间产生一个元素。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//延时5秒种后，每隔1秒钟发出一个元素</span><br>let observable = Observable&lt;Int&gt;.timer(<span class="hljs-number">5</span>, period: <span class="hljs-number">1</span>, scheduler: MainScheduler.<span class="hljs-keyword">instance</span>)<br>observable.subscribe &#123; <span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">print</span>(<span class="hljs-keyword">event</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="订阅-Observable"><a href="#订阅-Observable" class="headerlink" title="订阅 Observable"></a>订阅 Observable</h1><h3 id="第一种用法："><a href="#第一种用法：" class="headerlink" title="第一种用法："></a>第一种用法：</h3><p>（1）我们使用 subscribe() 订阅了一个 Observable 对象，该方法的 block 的回调参数就是被发出的 event 事件，我们将其直接打印出来。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>         <br>observable.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p>输入结果可以看出</p><ul><li>初始化 Observable 序列时设置的默认值都按顺序通过 .next 事件发送出来。</li><li>当 Observable 序列的初始数据都发送完毕，它还会自动发一个 .completed 事件出来。<br></li></ul><p>（2）如果想要获取到这个事件里的数据，可以通过 event.element 得到。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>         <br>observable.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-keyword">event</span>.element</span>)</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="第二种用法："><a href="#第二种用法：" class="headerlink" title="第二种用法："></a>第二种用法：</h3><p>（1）RxSwift 还提供了另一个 subscribe 方法，它可以把 event 进行分类：</p><ul><li>通过不同的 block 回调处理不同类型的 event。（其中 onDisposed 表示订阅行为被 dispose 后的回调，这个我后面会说）</li><li>同时会把 event 携带的数据直接解包出来作为参数，方便我们使用。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>         <br>observable.subscribe(onNext: &#123; element <span class="hljs-keyword">in</span><br>    <span class="hljs-builtin-name">print</span>(element)<br>&#125;, onError: &#123; <span class="hljs-builtin-name">error</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-builtin-name">print</span>(error)<br>&#125;, onCompleted: &#123;<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;completed&quot;</span>)<br>&#125;, onDisposed: &#123;<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;disposed&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>2）subscribe() 方法的 onNext、onError、onCompleted 和 onDisposed 这四个回调 block 参数都是有默认值的，即它们都是可选的。所以我们也可以只处理 onNext 而不管其他的情况。<figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs golo"><span class="hljs-keyword">let</span> observable = <span class="hljs-keyword">Observable</span>.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>         <br>observable.subscribe(onNext: &#123; element <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">print</span>(element)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="监听事件的生命周期"><a href="#监听事件的生命周期" class="headerlink" title="监听事件的生命周期"></a>监听事件的生命周期</h1><h3 id="1、-doOn-介绍"><a href="#1、-doOn-介绍" class="headerlink" title="1、 doOn 介绍"></a>1、 doOn 介绍</h3>（1）我们可以使用 doOn 方法来监听事件的生命周期，它会在每一次事件发送前被调用。<br><br>（2）同时它和 subscribe 一样，可以通过不同的 block 回调处理不同类型的 event。比如：</li><li>do(onNext:) 方法就是在 subscribe(onNext:) 前调用</li><li>而 do(onCompleted:) 方法则会在 subscribe(onCompleted:) 前面调用。</li></ul><h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br> <br>observable<br>    .<span class="hljs-keyword">do</span>(onNext: &#123; element <span class="hljs-keyword">in</span><br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Intercepted Next：&quot;</span>, element)<br>    &#125;, onError: &#123; <span class="hljs-builtin-name">error</span> <span class="hljs-keyword">in</span><br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Intercepted Error：&quot;</span>, error)<br>    &#125;, onCompleted: &#123;<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Intercepted Completed&quot;</span>)<br>    &#125;, onDispose: &#123;<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;Intercepted Disposed&quot;</span>)<br>    &#125;)<br>    .subscribe(onNext: &#123; element <span class="hljs-keyword">in</span><br>        <span class="hljs-builtin-name">print</span>(element)<br>    &#125;, onError: &#123; <span class="hljs-builtin-name">error</span> <span class="hljs-keyword">in</span><br>        <span class="hljs-builtin-name">print</span>(error)<br>    &#125;, onCompleted: &#123;<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;completed&quot;</span>)<br>    &#125;, onDisposed: &#123;<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;disposed&quot;</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure><h1 id="Observable-的销毁（Dispose）"><a href="#Observable-的销毁（Dispose）" class="headerlink" title="Observable 的销毁（Dispose）"></a>Observable 的销毁（Dispose）</h1><h3 id="1、Observable-从创建到终结流程"><a href="#1、Observable-从创建到终结流程" class="headerlink" title="1、Observable 从创建到终结流程"></a>1、Observable 从创建到终结流程</h3><p>（1）一个 Observable 序列被创建出来后它不会马上就开始被激活从而发出 Event，而是要等到它被某个人订阅了才会激活它。<br><br>（2）而 Observable 序列激活之后要一直等到它发出了 .error 或者 .completed 的 event 后，它才被终结。</p><h3 id="2、dispose-方法"><a href="#2、dispose-方法" class="headerlink" title="2、dispose() 方法"></a>2、dispose() 方法</h3><p>（1）使用该方法我们可以手动取消一个订阅行为。<br><br>（2）如果我们觉得这个订阅结束了不再需要了，就可以调用 dispose() 方法把这个订阅给销毁掉，防止内存泄漏。<br><br>（2）当一个订阅行为被 dispose 了，那么之后 observable 如果再发出 event，这个已经 dispose 的订阅就收不到消息了。下面是一个简单的使用样例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>         <br><span class="hljs-comment">//使用subscription常量存储这个订阅方法</span><br><span class="hljs-keyword">let</span> subscription = observable.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function">         </span><br><span class="hljs-function"><span class="hljs-comment">//调用这个订阅的dispose()方法</span></span><br><span class="hljs-function">subscription.<span class="hljs-title">dispose</span>(<span class="hljs-params"></span>)</span><br></code></pre></td></tr></table></figure><h3 id="3、DisposeBag"><a href="#3、DisposeBag" class="headerlink" title="3、DisposeBag"></a>3、DisposeBag</h3><p>除了 dispose() 方法之外，我们更经常用到的是一个叫 DisposeBag 的对象来管理多个订阅行为的销毁：<br>我们可以把一个 DisposeBag 对象看成一个垃圾袋，把用过的订阅行为都放进去。<br>而这个 DisposeBag 就会在自己快要 dealloc 的时候，对它里面的所有订阅行为都调用 dispose() 方法。<br>下面是一个简单的使用样例。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> disposeBag = DisposeBag()<br>         <br><span class="hljs-comment">//第1个Observable，及其订阅</span><br><span class="hljs-keyword">let</span> observable1 = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>observable1.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;.<span class="hljs-title">disposed</span>(<span class="hljs-params"><span class="hljs-keyword">by</span>: disposeBag</span>)</span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-comment">//第2个Observable，及其订阅</span></span><br><span class="hljs-function"><span class="hljs-keyword">let</span> observable2</span> = Observable.of(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>observable2.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;.<span class="hljs-title">disposed</span>(<span class="hljs-params"><span class="hljs-keyword">by</span>: disposeBag</span>)</span><br></code></pre></td></tr></table></figure><h1 id="观察者（Observer）介绍"><a href="#观察者（Observer）介绍" class="headerlink" title="观察者（Observer）介绍"></a>观察者（Observer）介绍</h1><p>观察者（Observer）的作用就是监听事件，然后对这个事件做出响应。或者说任何响应事件的行为都是观察者。比如：</p><ul><li>当我们点击按钮，弹出一个提示框。那么这个“弹出一个提示框”就是观察者 Observer<Void></li><li>当我们请求一个远程的 json 数据后，将其打印出来。那么这个“打印 json 数据”就是观察者 Observer<JSON></li></ul><h1 id="直接在-subscribe、bind-方法中创建观察者"><a href="#直接在-subscribe、bind-方法中创建观察者" class="headerlink" title="直接在 subscribe、bind 方法中创建观察者"></a>直接在 subscribe、bind 方法中创建观察者</h1><h3 id="1-在-subscribe-方法中创建"><a href="#1-在-subscribe-方法中创建" class="headerlink" title="1. 在 subscribe 方法中创建"></a>1. 在 subscribe 方法中创建</h3><p>（1）创建观察者最直接的方法就是在 Observable 的 subscribe 方法后面描述当事件发生时，需要如何做出响应。<br><br>（2）比如下面的样例，观察者就是由后面的 onNext，onError，onCompleted 这些闭包构建出来的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>          <br>observable.subscribe(onNext: &#123; element <span class="hljs-keyword">in</span><br>    <span class="hljs-builtin-name">print</span>(element)<br>&#125;, onError: &#123; <span class="hljs-builtin-name">error</span> <span class="hljs-keyword">in</span><br>    <span class="hljs-builtin-name">print</span>(error)<br>&#125;, onCompleted: &#123;<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;completed&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-在-bind-方法中创建"><a href="#2-在-bind-方法中创建" class="headerlink" title="2. 在 bind 方法中创建"></a>2. 在 bind 方法中创建</h3><p>下面代码我们创建一个定时生成索引数的 Observable 序列，并将索引数不断显示在 label 标签上：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> label: <span class="hljs-type">UILabel</span>!<br>     <br>    <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>         <br>        <span class="hljs-comment">//Observable序列（每隔1秒钟发出一个索引数）</span><br>        <span class="hljs-keyword">let</span> observable <span class="hljs-operator">=</span> <span class="hljs-type">Observable</span>&lt;<span class="hljs-type">Int</span>&gt;.interval(<span class="hljs-number">1</span>, scheduler: <span class="hljs-type">MainScheduler</span>.instance)<br> <br>        observable<br>            .map &#123; <span class="hljs-string">&quot;当前索引数：<span class="hljs-subst">\(<span class="hljs-variable">$0</span> )</span>&quot;</span>&#125;<br>            .bind &#123; [<span class="hljs-keyword">weak</span> <span class="hljs-keyword">self</span>](text) <span class="hljs-keyword">in</span><br>                <span class="hljs-comment">//收到发出的索引数后显示到label上</span><br>                <span class="hljs-keyword">self</span><span class="hljs-operator">?</span>.label.text <span class="hljs-operator">=</span> text<br>            &#125;<br>            .disposed(by: disposeBag)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用-AnyObserver-创建观察者"><a href="#使用-AnyObserver-创建观察者" class="headerlink" title="使用 AnyObserver 创建观察者"></a>使用 AnyObserver 创建观察者</h1><p>AnyObserver 可以用来描叙任意一种观察者。</p><h3 id="1、配合-subscribe-方法使用"><a href="#1、配合-subscribe-方法使用" class="headerlink" title="1、配合 subscribe 方法使用"></a>1、配合 subscribe 方法使用</h3><p>比如上面第一个样例我们可以改成如下代码：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">//观察者</span><br>let observer: AnyObserver&lt;String&gt; = AnyObserver &#123; (<span class="hljs-keyword">event</span>) <span class="hljs-keyword">in</span><br>    <span class="hljs-keyword">switch</span> <span class="hljs-keyword">event</span> &#123;<br>    <span class="hljs-keyword">case</span> .next(let data):<br>        <span class="hljs-keyword">print</span>(data)<br>    <span class="hljs-keyword">case</span> .<span class="hljs-keyword">error</span>(let <span class="hljs-keyword">error</span>):<br>        <span class="hljs-keyword">print</span>(<span class="hljs-keyword">error</span>)<br>    <span class="hljs-keyword">case</span> .completed:<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;completed&quot;</span>)<br>    &#125;<br>&#125;<br> <br>let observable = Observable.of(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>observable.subscribe(observer)<br></code></pre></td></tr></table></figure><h3 id="2、配合-bindTo-方法使用"><a href="#2、配合-bindTo-方法使用" class="headerlink" title="2、配合 bindTo 方法使用"></a>2、配合 bindTo 方法使用</h3><p>也可配合 Observable 的数据绑定方法（bindTo）使用。比如上面的第二个样例我可以改成如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> label: <span class="hljs-type">UILabel</span>!<br>     <br>    <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>         <br>        <span class="hljs-comment">//观察者</span><br>        <span class="hljs-keyword">let</span> observer: <span class="hljs-type">AnyObserver</span>&lt;<span class="hljs-type">String</span>&gt; <span class="hljs-operator">=</span> <span class="hljs-type">AnyObserver</span> &#123; [<span class="hljs-keyword">weak</span> <span class="hljs-keyword">self</span>] (event) <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">switch</span> event &#123;<br>            <span class="hljs-keyword">case</span> .next(<span class="hljs-keyword">let</span> text):<br>                <span class="hljs-comment">//收到发出的索引数后显示到label上</span><br>                <span class="hljs-keyword">self</span><span class="hljs-operator">?</span>.label.text <span class="hljs-operator">=</span> text<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>         <br>        <span class="hljs-comment">//Observable序列（每隔1秒钟发出一个索引数）</span><br>        <span class="hljs-keyword">let</span> observable <span class="hljs-operator">=</span> <span class="hljs-type">Observable</span>&lt;<span class="hljs-type">Int</span>&gt;.interval(<span class="hljs-number">1</span>, scheduler: <span class="hljs-type">MainScheduler</span>.instance)<br>        observable<br>            .map &#123; <span class="hljs-string">&quot;当前索引数：<span class="hljs-subst">\(<span class="hljs-variable">$0</span> )</span>&quot;</span>&#125;<br>            .bind(to: observer)<br>            .disposed(by: disposeBag)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用-Binder-创建观察者"><a href="#使用-Binder-创建观察者" class="headerlink" title="使用 Binder 创建观察者"></a>使用 Binder 创建观察者</h1><h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>（1）相较于 AnyObserver 的大而全，Binder 更专注于特定的场景。Binder 主要有以下两个特征：</p><ul><li>不会处理错误事件</li><li>确保绑定都是在给定 Scheduler 上执行（默认 MainScheduler）</li></ul><p>（2）一旦产生错误事件，在调试环境下将执行 fatalError，在发布环境下将打印错误信息。</p><h3 id="使用样例-1"><a href="#使用样例-1" class="headerlink" title="使用样例"></a>使用样例</h3><p>（1）在上面序列数显示样例中，label 标签的文字显示就是一个典型的 UI 观察者。它在响应事件时，只会处理 next 事件，而且更新 UI 的操作需要在主线程上执行。那么这种情况下更好的方案就是使用 Binder。<br><br>（2）上面的样例我们改用 Binder 会简单许多：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> label: <span class="hljs-type">UILabel</span>!<br>     <br>    <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>                 <br>        <span class="hljs-comment">//观察者</span><br>        <span class="hljs-keyword">let</span> observer: <span class="hljs-type">Binder</span>&lt;<span class="hljs-type">String</span>&gt; <span class="hljs-operator">=</span> <span class="hljs-type">Binder</span>(label) &#123; (view, text) <span class="hljs-keyword">in</span><br>            <span class="hljs-comment">//收到发出的索引数后显示到label上</span><br>            view.text <span class="hljs-operator">=</span> text<br>        &#125;<br>         <br>        <span class="hljs-comment">//Observable序列（每隔1秒钟发出一个索引数）</span><br>        <span class="hljs-keyword">let</span> observable <span class="hljs-operator">=</span> <span class="hljs-type">Observable</span>&lt;<span class="hljs-type">Int</span>&gt;.interval(<span class="hljs-number">1</span>, scheduler: <span class="hljs-type">MainScheduler</span>.instance)<br>        observable<br>            .map &#123; <span class="hljs-string">&quot;当前索引数：<span class="hljs-subst">\(<span class="hljs-variable">$0</span> )</span>&quot;</span>&#125;<br>            .bind(to: observer)<br>            .disposed(by: disposeBag)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="附：Binder-在-RxCocoa-中的应用"><a href="#附：Binder-在-RxCocoa-中的应用" class="headerlink" title="附：Binder 在 RxCocoa 中的应用"></a>附：Binder 在 RxCocoa 中的应用</h3><p>（1）其实 RxCocoa 在对许多 UI 控件进行扩展时，就利用 Binder 将控件属性变成观查者，比如 UIControl+Rx.swift 中的 isEnabled 属性便是一个 observer ：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> UIKit<br> <br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">Reactive</span> <span class="hljs-title">where</span> <span class="hljs-title">Base</span>: <span class="hljs-title">UIControl</span> </span>&#123;<br>     <br>    <span class="hljs-comment">/// Bindable sink for `enabled` property.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> isEnabled: <span class="hljs-type">Binder</span>&lt;<span class="hljs-type">Bool</span>&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Binder</span>(<span class="hljs-keyword">self</span>.base) &#123; control, value <span class="hljs-keyword">in</span><br>            control.isEnabled <span class="hljs-operator">=</span> value<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）因此我们可以将序列直接绑定到它上面。比如下面样例，button 会在可用、不可用这两种状态间交替变换（每隔一秒）。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//Observable序列（每隔1秒钟发出一个索引数）</span><br><span class="hljs-keyword">let</span> observable = Observable&lt;Int&gt;.interval(<span class="hljs-number">1</span>, scheduler: MainScheduler.instance)<br>observable<br>    .<span class="hljs-built_in">map</span> &#123; $<span class="hljs-number">0</span> % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#125;<br>    .bind(<span class="hljs-keyword">to</span>: button.<span class="hljs-literal">rx</span>.isEnabled)<br>    .disposed(<span class="hljs-keyword">by</span>: disposeBag)<br></code></pre></td></tr></table></figure><h1 id="自定义可绑定属性"><a href="#自定义可绑定属性" class="headerlink" title="自定义可绑定属性"></a>自定义可绑定属性</h1><p>有时我们想让 UI 控件创建出来后默认就有一些观察者，而不必每次都为它们单独去创建观察者。比如我们想要让所有的 UIlabel 都有个 fontSize 可绑定属性，它会根据事件值自动改变标签的字体大小。</p><h3 id="方式一：通过对-UI-类进行扩展"><a href="#方式一：通过对-UI-类进行扩展" class="headerlink" title="方式一：通过对 UI 类进行扩展"></a>方式一：通过对 UI 类进行扩展</h3><p>这里我们通过对 UILabel 进行扩展，增加了一个 fontSize 可绑定属性。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> label: <span class="hljs-type">UILabel</span>!<br>     <br>    <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>         <br>        <span class="hljs-comment">//Observable序列（每隔0.5秒钟发出一个索引数）</span><br>        <span class="hljs-keyword">let</span> observable <span class="hljs-operator">=</span> <span class="hljs-type">Observable</span>&lt;<span class="hljs-type">Int</span>&gt;.interval(<span class="hljs-number">0.5</span>, scheduler: <span class="hljs-type">MainScheduler</span>.instance)<br>        observable<br>            .map &#123; <span class="hljs-type">CGFloat</span>(<span class="hljs-variable">$0</span>) &#125;<br>            .bind(to: label.fontSize) <span class="hljs-comment">//根据索引数不断变放大字体</span><br>            .disposed(by: disposeBag)<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">UILabel</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> fontSize: <span class="hljs-type">Binder</span>&lt;<span class="hljs-type">CGFloat</span>&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Binder</span>(<span class="hljs-keyword">self</span>) &#123; label, fontSize <span class="hljs-keyword">in</span><br>            label.font <span class="hljs-operator">=</span> <span class="hljs-type">UIFont</span>.systemFont(ofSize: fontSize)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方式二：通过对-Reactive-类进行扩展"><a href="#方式二：通过对-Reactive-类进行扩展" class="headerlink" title="方式二：通过对 Reactive 类进行扩展"></a>方式二：通过对 Reactive 类进行扩展</h3><p>既然使用了 RxSwift，那么更规范的写法应该是对 Reactive 进行扩展。这里同样是给 UILabel 增加了一个 fontSize 可绑定属性。<br><br>（注意：这种方式下，我们绑定属性时要写成 label.rx.fontSize）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> label: <span class="hljs-type">UILabel</span>!<br>     <br>    <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>         <br>        <span class="hljs-comment">//Observable序列（每隔0.5秒钟发出一个索引数）</span><br>        <span class="hljs-keyword">let</span> observable <span class="hljs-operator">=</span> <span class="hljs-type">Observable</span>&lt;<span class="hljs-type">Int</span>&gt;.interval(<span class="hljs-number">0.5</span>, scheduler: <span class="hljs-type">MainScheduler</span>.instance)<br>        observable<br>            .map &#123; <span class="hljs-type">CGFloat</span>(<span class="hljs-variable">$0</span>) &#125;<br>            .bind(to: label.rx.fontSize) <span class="hljs-comment">//根据索引数不断变放大字体</span><br>            .disposed(by: disposeBag)<br>    &#125;<br>&#125;<br> <br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">Reactive</span> <span class="hljs-title">where</span> <span class="hljs-title">Base</span>: <span class="hljs-title">UILabel</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> fontSize: <span class="hljs-type">Binder</span>&lt;<span class="hljs-type">CGFloat</span>&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Binder</span>(<span class="hljs-keyword">self</span>.base) &#123; label, fontSize <span class="hljs-keyword">in</span><br>            label.font <span class="hljs-operator">=</span> <span class="hljs-type">UIFont</span>.systemFont(ofSize: fontSize)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="RxSwift-自带的可绑定属性（UI-观察者）"><a href="#RxSwift-自带的可绑定属性（UI-观察者）" class="headerlink" title="RxSwift 自带的可绑定属性（UI 观察者）"></a>RxSwift 自带的可绑定属性（UI 观察者）</h1><p>（1）其实 RxSwift 已经为我们提供许多常用的可绑定属性。比如 UILabel 就有 text 和 attributedText 这两个可绑定属性。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> UIKit<br> <br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">Reactive</span> <span class="hljs-title">where</span> <span class="hljs-title">Base</span>: <span class="hljs-title">UILabel</span> </span>&#123;<br>     <br>    <span class="hljs-comment">/// Bindable sink for `text` property.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> text: <span class="hljs-type">Binder</span>&lt;<span class="hljs-type">String</span>?&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Binder</span>(<span class="hljs-keyword">self</span>.base) &#123; label, text <span class="hljs-keyword">in</span><br>            label.text <span class="hljs-operator">=</span> text<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/// Bindable sink for `attributedText` property.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> attributedText: <span class="hljs-type">Binder</span>&lt;<span class="hljs-type">NSAttributedString</span>?&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">Binder</span>(<span class="hljs-keyword">self</span>.base) &#123; label, text <span class="hljs-keyword">in</span><br>            label.attributedText <span class="hljs-operator">=</span> text<br>        &#125;<br>    &#125;<br>     <br>&#125;<br></code></pre></td></tr></table></figure><p>（2）那么上文那个定时显示索引数的样例，我们其实不需要自定义 UI 观察者，直接使用 RxSwift 提供的绑定属性即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> label: <span class="hljs-type">UILabel</span>!<br>     <br>    <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>         <br>        <span class="hljs-comment">//Observable序列（每隔1秒钟发出一个索引数）</span><br>        <span class="hljs-keyword">let</span> observable <span class="hljs-operator">=</span> <span class="hljs-type">Observable</span>&lt;<span class="hljs-type">Int</span>&gt;.interval(<span class="hljs-number">1</span>, scheduler: <span class="hljs-type">MainScheduler</span>.instance)<br>        observable<br>            .map &#123; <span class="hljs-string">&quot;当前索引数：<span class="hljs-subst">\(<span class="hljs-variable">$0</span> )</span>&quot;</span>&#125;<br>            .bind(to: label.rx.text) <span class="hljs-comment">//收到发出的索引数后显示到label上</span><br>            .disposed(by: disposeBag)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Subjects-介绍"><a href="#Subjects-介绍" class="headerlink" title="Subjects 介绍"></a>Subjects 介绍</h1><h3 id="Subjects-基本介绍"><a href="#Subjects-基本介绍" class="headerlink" title="Subjects 基本介绍"></a>Subjects 基本介绍</h3><p>（1）Subjects 既是订阅者，也是 Observable：</p><ul><li>说它是订阅者，是因为它能够动态地接收新的值。</li><li>说它又是一个 Observable，是因为当 Subjects 有了新的值之后，就会通过 Event 将新值发出给他的所有订阅者。</li></ul><p>（2）一共有四种 Subjects，分别为：PublishSubject、BehaviorSubject、ReplaySubject、Variable。他们之间既有各自的特点，也有相同之处：</p><ul><li>首先他们都是 Observable，他们的订阅者都能收到他们发出的新的 Event。</li><li>直到 Subject 发出 .complete 或者 .error 的 Event 后，该 Subject 便终结了，同时它也就不会再发出 .next 事件。</li><li> 对于那些在 Subject 终结后再订阅他的订阅者，也能收到 subject 发出的一条 .complete 或 .error 的 event，告诉这个新的订阅者它已经终结了。</li><li>他们之间最大的区别只是在于：当一个新的订阅者刚订阅它的时候，能不能收到 Subject 以前发出过的旧 Event，如果能的话又能收到多少个。</li></ul><p>（3）Subject 常用的几个方法：</p><ul><li>onNext(:)：是 on(.next(:)) 的简便写法。该方法相当于 subject 接收到一个 .next 事件。</li><li>onError(:)：是 on(.error(:)) 的简便写法。该方法相当于 subject 接收到一个 .error 事件。</li><li>onCompleted()：是 on(.completed) 的简便写法。该方法相当于 subject 接收到一个 .completed 事件。</li></ul><h3 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h3><p>（1）基本介绍</p><ul><li>PublishSubject 是最普通的 Subject，它不需要初始值就能创建。</li><li>PublishSubject 的订阅者从他们开始订阅的时间点起，可以收到订阅后 Subject 发出的新 Event，而不会收到他们在订阅前已发出的 Event。<br>（2）时序图</li><li>最上面一条是 BehaviorSubject。</li><li>下面两条分别表示两个新的订阅，它们订阅的时间点不同，可以发现 BehaviorSubject 的订阅者一开始就能收到 BehaviorSubjects 之前发出的一个 Event。<br><img src="https://upload-images.jianshu.io/upload_images/3334769-516513ae6b34d5b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="时序图"><br><br>（3）使用样例<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> disposeBag = <span class="hljs-constructor">DisposeBag()</span><br> <br><span class="hljs-comment">//创建一个BehaviorSubject</span><br><span class="hljs-keyword">let</span> subject = <span class="hljs-constructor">BehaviorSubject(<span class="hljs-params">value</span>: <span class="hljs-string">&quot;111&quot;</span>)</span><br> <br><span class="hljs-comment">//第1次订阅subject</span><br>subject.subscribe &#123; event <span class="hljs-keyword">in</span><br>    print(<span class="hljs-string">&quot;第1次订阅：&quot;</span>, event)<br>&#125;.disposed(by: disposeBag)<br> <br><span class="hljs-comment">//发送next事件</span><br>subject.on<span class="hljs-constructor">Next(<span class="hljs-string">&quot;222&quot;</span>)</span><br> <br><span class="hljs-comment">//发送error事件</span><br>subject.on<span class="hljs-constructor">Error(NSError(<span class="hljs-params">domain</span>: <span class="hljs-string">&quot;local&quot;</span>, <span class="hljs-params">code</span>: 0, <span class="hljs-params">userInfo</span>: <span class="hljs-params">nil</span>)</span>)<br> <br><span class="hljs-comment">//第2次订阅subject</span><br>subject.subscribe &#123; event <span class="hljs-keyword">in</span><br>    print(<span class="hljs-string">&quot;第2次订阅：&quot;</span>, event)<br>&#125;.disposed(by: disposeBag)<br></code></pre></td></tr></table></figure><h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3>（1）基本介绍</li><li>ReplaySubject 在创建时候需要设置一个 bufferSize，表示它对于它发送过的 event 的缓存个数。</li><li>比如一个 ReplaySubject 的 bufferSize 设置为 2，它发出了 3 个 .next 的 event，那么它会将后两个（最近的两个）event 给缓存起来。此时如果有一个 subscriber 订阅了这个 ReplaySubject，那么这个 subscriber 就会立即收到前面缓存的两个 .next 的 event。</li><li>如果一个 subscriber 订阅已经结束的 ReplaySubject，除了会收到缓存的 .next 的 event 外，还会收到那个终结的 .error 或者 .complete 的 event。</li></ul><p>（2）时序图</p><ul><li>最上面一条是 ReplaySubject（bufferSize 设为为 2）。</li><li>下面两条分别表示两个新的订阅，它们订阅的时间点不同。可以发现 ReplaySubject 的订阅者一开始就能收到 ReplaySubject 之前发出的两个 Event（如果有的话）。<br><img src="https://upload-images.jianshu.io/upload_images/3334769-4dec2ddcf714e9ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="时序图"><br><br>（3）使用样例<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> disposeBag = DisposeBag()<br> <br><span class="hljs-comment">//创建一个bufferSize为2的ReplaySubject</span><br><span class="hljs-keyword">let</span> subject = ReplaySubject&lt;String&gt;.create(bufferSize: <span class="hljs-number">2</span>)<br> <br><span class="hljs-comment">//连续发送3个next事件</span><br>subject.onNext(<span class="hljs-string">&quot;111&quot;</span>)<br>subject.onNext(<span class="hljs-string">&quot;222&quot;</span>)<br>subject.onNext(<span class="hljs-string">&quot;333&quot;</span>)<br> <br><span class="hljs-comment">//第1次订阅subject</span><br>subject.subscribe &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-string">&quot;第1次订阅：&quot;</span>, <span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;.<span class="hljs-title">disposed</span>(<span class="hljs-params"><span class="hljs-keyword">by</span>: disposeBag</span>)</span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-comment">//再发送1个next事件</span></span><br><span class="hljs-function">subject.<span class="hljs-title">onNext</span>(<span class="hljs-params"><span class="hljs-string">&quot;444&quot;</span></span>)</span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-comment">//第2次订阅subject</span></span><br><span class="hljs-function">subject.subscribe</span> &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-string">&quot;第2次订阅：&quot;</span>, <span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;.<span class="hljs-title">disposed</span>(<span class="hljs-params"><span class="hljs-keyword">by</span>: disposeBag</span>)</span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-comment">//让subject结束</span></span><br><span class="hljs-function">subject.<span class="hljs-title">onCompleted</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"> </span><br><span class="hljs-function"><span class="hljs-comment">//第3次订阅subject</span></span><br><span class="hljs-function">subject.subscribe</span> &#123; <span class="hljs-function"><span class="hljs-keyword">event</span> <span class="hljs-keyword">in</span></span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-params"><span class="hljs-string">&quot;第3次订阅：&quot;</span>, <span class="hljs-keyword">event</span></span>)</span><br><span class="hljs-function">&#125;.<span class="hljs-title">disposed</span>(<span class="hljs-params"><span class="hljs-keyword">by</span>: disposeBag</span>)</span><br></code></pre></td></tr></table></figure><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3>（注意：由于 Variable 在之后版本中将被废弃，建议使用 Varible 的地方都改用下面介绍的 BehaviorRelay 作为替代。）<br><br>（1）基本介绍</li><li>Variable 其实就是对 BehaviorSubject 的封装，所以它也必须要通过一个默认的初始值进行创建。</li><li>Variable 具有 BehaviorSubject 的功能，能够向它的订阅者发出上一个 event 以及之后新创建的 event。</li><li>不同的是，Variable 还把会把当前发出的值保存为自己的状态。同时它会在销毁时自动发送 .complete 的 event，不需要也不能手动给 Variables 发送 completed 或者 error 事件来结束它。</li><li>简单地说就是 Variable 有一个 value 属性，我们改变这个 value 属性的值就相当于调用一般 Subjects 的 onNext() 方法，而这个最新的 onNext() 的值就被保存在 value 属性里了，直到我们再次修改它。<blockquote><p>注意：<br><br>Variables 本身没有 subscribe() 方法，但是所有 Subjects 都有一个 asObservable() 方法。我们可以使用这个方法返回这个 Variable 的 Observable 类型，拿到这个 Observable 类型我们就能订阅它了。</p></blockquote></li></ul><p>（2）使用样例</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-keyword">class</span> ViewController: UIViewController &#123;<br>     <br>    override func viewDidLoad() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br> <br>        <span class="hljs-keyword">let</span> disposeBag = DisposeBag()<br>         <br>        <span class="hljs-comment">//创建一个初始值为111的Variable</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">variable</span> = Variable(<span class="hljs-string">&quot;111&quot;</span>)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        <span class="hljs-keyword">variable</span>.<span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;222&quot;</span><br>         <br>        <span class="hljs-comment">//第1次订阅</span><br>        <span class="hljs-keyword">variable</span>.asObservable().subscribe &#123;<br>            print(<span class="hljs-string">&quot;第1次订阅：&quot;</span>, <span class="hljs-number">$0</span>)<br>        &#125;.disposed(<span class="hljs-meta">by</span>: disposeBag)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        <span class="hljs-keyword">variable</span>.<span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;333&quot;</span><br>         <br>        <span class="hljs-comment">//第2次订阅</span><br>        <span class="hljs-keyword">variable</span>.asObservable().subscribe &#123;<br>            print(<span class="hljs-string">&quot;第2次订阅：&quot;</span>, <span class="hljs-number">$0</span>)<br>        &#125;.disposed(<span class="hljs-meta">by</span>: disposeBag)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        <span class="hljs-keyword">variable</span>.<span class="hljs-keyword">value</span> = <span class="hljs-string">&quot;444&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="BehaviorRelay"><a href="#BehaviorRelay" class="headerlink" title="BehaviorRelay"></a>BehaviorRelay</h3><p>（1）基本介绍</p><ul><li>BehaviorRelay 是作为 Variable 的替代者出现的。它的本质其实也是对 BehaviorSubject 的封装，所以它也必须要通过一个默认的初始值进行创建。</li><li>BehaviorRelay 具有 BehaviorSubject 的功能，能够向它的订阅者发出上一个 event 以及之后新创建的 event。</li><li>与 BehaviorSubject 不同的是，不需要也不能手动给 BehaviorReply 发送 completed 或者 error 事件来结束它（BehaviorRelay 会在销毁时也不会自动发送 .complete 的 event）。</li><li>BehaviorRelay 有一个 value 属性，我们通过这个属性可以获取最新值。而通过它的 accept() 方法可以对值进行修改。</li></ul><p>（2）上面的 Variable 样例我们可以改用成 BehaviorRelay，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> RxSwift<br><span class="hljs-keyword">import</span> RxCocoa<br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ViewController</span>: <span class="hljs-title">UIViewController</span> </span>&#123;<br>     <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLoad</span>()</span> &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>         <br>        <span class="hljs-keyword">let</span> disposeBag <span class="hljs-operator">=</span> <span class="hljs-type">DisposeBag</span>()<br>         <br>        <span class="hljs-comment">//创建一个初始值为111的BehaviorRelay</span><br>        <span class="hljs-keyword">let</span> subject <span class="hljs-operator">=</span> <span class="hljs-type">BehaviorRelay</span>&lt;<span class="hljs-type">String</span>&gt;(value: <span class="hljs-string">&quot;111&quot;</span>)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        subject.accept(<span class="hljs-string">&quot;222&quot;</span>)<br>         <br>        <span class="hljs-comment">//第1次订阅</span><br>        subject.asObservable().subscribe &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第1次订阅：&quot;</span>, <span class="hljs-variable">$0</span>)<br>            &#125;.disposed(by: disposeBag)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        subject.accept(<span class="hljs-string">&quot;333&quot;</span>)<br>         <br>        <span class="hljs-comment">//第2次订阅</span><br>        subject.asObservable().subscribe &#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第2次订阅：&quot;</span>, <span class="hljs-variable">$0</span>)<br>            &#125;.disposed(by: disposeBag)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        subject.accept(<span class="hljs-string">&quot;444&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（3）如果想将新值合并到原值上，可以通过 accept() 方法与 value 属性配合来实现。（这个常用在表格上拉加载功能上，BehaviorRelay 用来保存所有加载到的数据）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import UIKit<br>import RxSwift<br>import RxCocoa<br> <br>class ViewController: UIViewController &#123;<br>     <br>    override func viewDidLoad() &#123;<br>        super<span class="hljs-selector-class">.viewDidLoad</span>()<br>         <br>        let disposeBag = DisposeBag()<br>         <br>        <span class="hljs-comment">//创建一个初始值为包含一个元素的数组的BehaviorRelay</span><br>        let subject = BehaviorRelay&lt;<span class="hljs-selector-attr">[String]</span>&gt;(value: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;1&quot;</span>]</span>)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        subject<span class="hljs-selector-class">.accept</span>(subject<span class="hljs-selector-class">.value</span> + <span class="hljs-selector-attr">[<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>]</span>)<br>         <br>        <span class="hljs-comment">//第1次订阅</span><br>        subject<span class="hljs-selector-class">.asObservable</span>()<span class="hljs-selector-class">.subscribe</span> &#123;<br>            print(<span class="hljs-string">&quot;第1次订阅：&quot;</span>, $<span class="hljs-number">0</span>)<br>            &#125;<span class="hljs-selector-class">.disposed</span>(by: disposeBag)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        subject<span class="hljs-selector-class">.accept</span>(subject<span class="hljs-selector-class">.value</span> + <span class="hljs-selector-attr">[<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>]</span>)<br>         <br>        <span class="hljs-comment">//第2次订阅</span><br>        subject<span class="hljs-selector-class">.asObservable</span>()<span class="hljs-selector-class">.subscribe</span> &#123;<br>            print(<span class="hljs-string">&quot;第2次订阅：&quot;</span>, $<span class="hljs-number">0</span>)<br>            &#125;<span class="hljs-selector-class">.disposed</span>(by: disposeBag)<br>         <br>        <span class="hljs-comment">//修改value值</span><br>        subject<span class="hljs-selector-class">.accept</span>(subject<span class="hljs-selector-class">.value</span> + <span class="hljs-selector-attr">[<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>]</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Swift</category>
      
      <category>iOS</category>
      
      <category>SDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS第三方库-FMDB-模型进行存取(Model)</title>
    <link href="/2020/02/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-FMDB-%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AD%98%E5%8F%96(Model)/"/>
    <url>/2020/02/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-FMDB-%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AD%98%E5%8F%96(Model)/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-db9208d961eb67c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼图"></p><p>写这个Blog的目的是为了记录的学习经历，代码写的不是很好，希望读者理解。<br>日常对数据库的操作，需要设计字段，感觉太繁琐了，想找个简化的方法，就想通过这样进行实现，这也就是一种思考方式。实际实现还是看需求。具体看代码：<br>1、导入FMDB</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> FMDB<br></code></pre></td></tr></table></figure><p>2、使用单利模式和必要属性</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> defaultManger = WDDataBaseManager()<br>typealias <span class="hljs-function"><span class="hljs-title">successBlock</span> = <span class="hljs-params">()</span> -&gt;</span>Void<br>typealias <span class="hljs-function"><span class="hljs-title">failBlock</span> = <span class="hljs-params">()</span> -&gt;</span>Void<br>private <span class="hljs-keyword">var</span> tableName:<span class="hljs-built_in">String</span>?<br></code></pre></td></tr></table></figure><p>3、懒加载创建数据库（名称我随便取得）</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">lazy</span> var fmdb:FMDatabase = &#123;<br>        <span class="hljs-keyword">let</span> path = <span class="hljs-constructor">NSHomeDirectory()</span>.appending(<span class="hljs-string">&quot;/Documents/testDB.db&quot;</span>)<br>        <span class="hljs-keyword">let</span> db = <span class="hljs-constructor">FMDatabase(<span class="hljs-params">path</span>: <span class="hljs-params">path</span>)</span><br>        return db<br>    &#125;<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>4、创建表</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">creatTable</span>(<span class="hljs-params">tableName</span>:<span class="hljs-type">String</span>)</span> -&gt; <span class="hljs-type">Void</span> &#123;<br>        fmdb.open()<br>        <span class="hljs-keyword">self</span>.tableName <span class="hljs-operator">=</span> tableName<br>        <span class="hljs-keyword">let</span> creatSql <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table if not exists <span class="hljs-subst">\(tableName)</span> (id integer primary key autoincrement,model BLOB)&quot;</span><br>        <span class="hljs-keyword">let</span> result <span class="hljs-operator">=</span> fmdb.executeUpdate(creatSql, withArgumentsIn:[])<br>        <span class="hljs-keyword">if</span> result&#123;<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;创建表成功&quot;</span>)<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>5、删除表</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript">func dropTable<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> Void &#123;<br>       <span class="hljs-keyword">let</span> sql = <span class="hljs-string">&quot;drop table if exists &quot;</span> + tableName!<br>       <span class="hljs-keyword">let</span> result = fmdb.executeUpdate(sql, withArgumentsIn:[])<br>       <span class="hljs-keyword">if</span> result&#123;<br>           <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;删除表成功&quot;</span>)<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>6、插入数据</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func insert(model:NSObject, successBlock: successBlock, failBlock: failBlock) -&gt; Void &#123;<br>        <span class="hljs-keyword">let</span> modelData = <span class="hljs-keyword">try</span>! <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NSKeyedArchiver</span>.</span></span>archived<span class="hljs-constructor">Data(<span class="hljs-params">withRootObject</span>: <span class="hljs-params">model</span>, <span class="hljs-params">requiringSecureCoding</span>: <span class="hljs-params">false</span>)</span><br>        <span class="hljs-keyword">let</span> insertSql = <span class="hljs-string">&quot;insert into &quot;</span> + tableName! + <span class="hljs-string">&quot; (model) values(?)&quot;</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> fmdb.execute<span class="hljs-constructor">Update(<span class="hljs-params">insertSql</span>, <span class="hljs-params">values</span>: [<span class="hljs-params">modelData</span>])</span><br>            success<span class="hljs-constructor">Block()</span><br>        &#125; catch &#123;<br>            print(fmdb.last<span class="hljs-constructor">Error()</span>)<br>            fail<span class="hljs-constructor">Block()</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>7、更新表</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func update(model:NSObject,uid:Int32, successBlock: successBlock, failBlock: failBlock) -&gt; Void &#123;<br>        <span class="hljs-keyword">let</span> modelData = <span class="hljs-keyword">try</span>! <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NSKeyedArchiver</span>.</span></span>archived<span class="hljs-constructor">Data(<span class="hljs-params">withRootObject</span>: <span class="hljs-params">model</span>, <span class="hljs-params">requiringSecureCoding</span>: <span class="hljs-params">false</span>)</span><br>        <span class="hljs-keyword">let</span> updateSql = <span class="hljs-string">&quot;update &quot;</span> + tableName! + <span class="hljs-string">&quot; set model = ? where id = ?&quot;</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> fmdb.execute<span class="hljs-constructor">Update(<span class="hljs-params">updateSql</span>, <span class="hljs-params">values</span>: [<span class="hljs-params">modelData</span>, <span class="hljs-params">uid</span>])</span><br>            success<span class="hljs-constructor">Block()</span><br>        &#125; catch &#123;<br>            print(fmdb.last<span class="hljs-constructor">Error()</span>)<br>            fail<span class="hljs-constructor">Block()</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>8、查询数据（这是查询所有数据，其他按需求设计）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">selectAll</span>()</span> -&gt; [<span class="hljs-type">NSObject</span>] &#123;<br>        <span class="hljs-keyword">var</span> tmpArr <span class="hljs-operator">=</span> [<span class="hljs-type">NSObject</span>]()<br>        <span class="hljs-keyword">let</span> selectSql <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from &quot;</span> <span class="hljs-operator">+</span> tableName<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">let</span> rs <span class="hljs-operator">=</span> <span class="hljs-keyword">try</span> fmdb.executeQuery(selectSql, values:<span class="hljs-literal">nil</span>)<br>            <span class="hljs-keyword">while</span> rs.next() &#123;<br>                <span class="hljs-keyword">var</span> model <span class="hljs-operator">=</span> <span class="hljs-type">NSObject</span>()<br>                <span class="hljs-keyword">let</span> modelData  <span class="hljs-operator">=</span> rs.data(forColumn:<span class="hljs-string">&quot;model&quot;</span>)<br>                <span class="hljs-keyword">let</span> id <span class="hljs-operator">=</span> rs.int(forColumn: <span class="hljs-string">&quot;id&quot;</span>)<br>                model <span class="hljs-operator">=</span> <span class="hljs-keyword">try!</span> <span class="hljs-type">NSKeyedUnarchiver</span>.unarchiveTopLevelObjectWithData(modelData<span class="hljs-operator">!</span>) <span class="hljs-keyword">as!</span> <span class="hljs-type">NSObject</span><br>                model.wd_fmdb_id <span class="hljs-operator">=</span> id<br>                tmpArr.append(model)<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-built_in">print</span>(fmdb.lastError())<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmpArr<br>    &#125;<br></code></pre></td></tr></table></figure><p>9、删除数据（这是根据Id删除的）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">delete</span>(<span class="hljs-params">uid</span>:<span class="hljs-type">Int32</span>, <span class="hljs-params">successBlock</span>: successBlock, <span class="hljs-params">failBlock</span>: failBlock)</span> -&gt; <span class="hljs-type">Void</span> &#123;<br>        <span class="hljs-keyword">let</span> deleteSql <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from &quot;</span> <span class="hljs-operator">+</span> tableName<span class="hljs-operator">!</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot; where id = ?&quot;</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">try</span> fmdb.executeUpdate(deleteSql, values: [uid])<br>            successBlock()<br>        &#125; <span class="hljs-keyword">catch</span> &#123;<br>            <span class="hljs-built_in">print</span>(fmdb.lastError())<br>            failBlock()<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>10、新增分类添加默认Id</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> var wd_id_key: String = <span class="hljs-string">&quot;key&quot;</span><br><br>extension NSObject &#123;<br>    <span class="hljs-keyword">open</span> var wd_fmdb_id:Int32? &#123;<br>        get &#123;<br>            return (objc<span class="hljs-constructor">_getAssociatedObject(<span class="hljs-params">self</span>, &amp;<span class="hljs-params">wd_id_key</span>)</span> <span class="hljs-keyword">as</span>? Int32)<br>        &#125; set(newValue) &#123;<br>            objc<span class="hljs-constructor">_setAssociatedObject(<span class="hljs-params">self</span>, &amp;<span class="hljs-params">wd_id_key</span>, <span class="hljs-params">newValue</span>, <span class="hljs-params">objc_AssociationPolicy</span>.OBJC_ASSOCIATION_ASSIGN)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>11、使用方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//1. 在Appdelegate中打开数据库</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">application</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">application</span>: <span class="hljs-type">UIApplication</span>, <span class="hljs-params">didFinishLaunchingWithOptions</span> <span class="hljs-params">launchOptions</span>: [<span class="hljs-type">UIApplication</span>.<span class="hljs-params">LaunchOptionsKey</span>: <span class="hljs-keyword">Any</span>]<span class="hljs-operator">?</span>)</span> -&gt; <span class="hljs-type">Bool</span> &#123;<br>        <span class="hljs-type">DataBaseManager</span>.defaultManger.creatTable()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br> &#125;<br><span class="hljs-comment">//2、添加数据</span><br><span class="hljs-type">WDDataBaseManager</span>.defaultManger.insert(model: model, successBlock: &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功&quot;</span>)<br>            &#125;, failBlock: &#123;<br>                 <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;失败&quot;</span>)<br>            &#125;)<br><span class="hljs-comment">//3、修改数据</span><br><span class="hljs-type">WDDataBaseManager</span>.defaultManger.update(model: model, uid: <span class="hljs-keyword">self</span>.model<span class="hljs-operator">!</span>.wd_fmdb_id<span class="hljs-operator">!</span>, successBlock: &#123;<br>               <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功&quot;</span>)<br>            &#125;, failBlock: &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;失败&quot;</span>)<br>            &#125;)<br><span class="hljs-comment">//4、删除数据</span><br><span class="hljs-type">WDDataBaseManager</span>.defaultManger.delete(uid: model.wd_fmdb_id<span class="hljs-operator">!</span>, successBlock: &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功&quot;</span>)<br>            &#125;, failBlock: &#123;<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;失败&quot;</span>)<br>            &#125;)<br><span class="hljs-comment">// 5、查询数据</span><br><span class="hljs-type">WDDataBaseManager</span>.defaultManger.selectAll()<br></code></pre></td></tr></table></figure><ul><li>遵循NSCoding 重写三个方法<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span>: <span class="hljs-title">NSObject</span> , <span class="hljs-title">NSCoding</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> name:<span class="hljs-type">String</span>?<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> phone:<span class="hljs-type">String</span>?<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> addres:<span class="hljs-type">String</span>?<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">init</span>()</span> &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">encode</span>(<span class="hljs-params">with</span> <span class="hljs-params">aCoder</span>: <span class="hljs-type">NSCoder</span>)</span> &#123;<br>        aCoder.encode(name, forKey: <span class="hljs-string">&quot;name&quot;</span>)<br>        aCoder.encode(phone, forKey: <span class="hljs-string">&quot;phone&quot;</span>)<br>        aCoder.encode(addres, forKey: <span class="hljs-string">&quot;addres&quot;</span>)<br>    &#125;<br>    <br>    <span class="hljs-keyword">required</span> <span class="hljs-function"><span class="hljs-keyword">init?</span>(<span class="hljs-params">coder</span> <span class="hljs-params">aDecoder</span>: <span class="hljs-type">NSCoder</span>)</span> &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()<br>        <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> aDecoder.decodeObject(forKey: <span class="hljs-string">&quot;name&quot;</span>) <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span><br>        <span class="hljs-keyword">self</span>.addres <span class="hljs-operator">=</span> aDecoder.decodeObject(forKey: <span class="hljs-string">&quot;addres&quot;</span>) <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span><br>        <span class="hljs-keyword">self</span>.phone <span class="hljs-operator">=</span> aDecoder.decodeObject(forKey: <span class="hljs-string">&quot;phone&quot;</span>) <span class="hljs-keyword">as?</span> <span class="hljs-type">String</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>12、效果图</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3334769-309b5904357f7e30.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p>13、Demo地址:<a href="https://github.com/wudan-ios/FMDB-Model.git">https://github.com/wudan-ios/FMDB-Model.git</a></p><hr><p>补充Objective-C版本<br>1、接口文件</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">NSObject</span> (<span class="hljs-title">addId</span>)</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>) <span class="hljs-built_in">NSInteger</span> wd_fmdb_id;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span>(^successBlock)(<span class="hljs-keyword">void</span>);<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span>(^failBlock)(<span class="hljs-keyword">void</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDDataBaseManager</span> : <span class="hljs-title">NSObject</span></span><br><br>+ (<span class="hljs-keyword">instancetype</span>)manager;<br><span class="hljs-comment">/** 创建表 */</span><br>- (<span class="hljs-keyword">void</span>)createTableWithName:(<span class="hljs-built_in">NSString</span> *)name;<br><span class="hljs-comment">/** 删除表 */</span><br>- (<span class="hljs-keyword">void</span>)dropTable;<br><span class="hljs-comment">/** 添加数据 */</span><br>- (<span class="hljs-keyword">void</span>)insertDataWithModel:(<span class="hljs-built_in">NSObject</span> *)model successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock;<br><span class="hljs-comment">/** 更新数据 */</span><br>- (<span class="hljs-keyword">void</span>)updateDataWithModel:(<span class="hljs-built_in">NSObject</span> *)model uid:(<span class="hljs-built_in">NSInteger</span>)aUid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock;<br><span class="hljs-comment">/** 删除数据 */</span><br>- (<span class="hljs-keyword">void</span>)deleteDataWithUid:(<span class="hljs-built_in">NSInteger</span>)uid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock;<br><span class="hljs-comment">/** 查询全部数据 */</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSObject</span> *&gt; *)queryAllData;<br><br><span class="hljs-keyword">@end</span><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><p>2、实现文件</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;WDDataBaseManager.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;FMDB.h&gt;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;objc/runtime.h&gt;</span></span><br><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> *wd_id_key = <span class="hljs-string">&quot;key&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">NSObject</span> (<span class="hljs-title">addId</span>)</span><br><br>- (<span class="hljs-built_in">NSInteger</span>)wd_fmdb_id &#123;<br>    <span class="hljs-built_in">NSNumber</span> *numberValue = objc_getAssociatedObject(<span class="hljs-keyword">self</span>, wd_id_key);<br>    <span class="hljs-keyword">return</span> numberValue.integerValue;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setWd_fmdb_id:(<span class="hljs-built_in">NSInteger</span>)wd_fmdb_id &#123;<br>    objc_setAssociatedObject(<span class="hljs-keyword">self</span>, wd_id_key, @(wd_fmdb_id), OBJC_ASSOCIATION_ASSIGN);<br>&#125;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDDataBaseManager</span> ()</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) FMDatabase *fmdb;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *tableName;<br><br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDDataBaseManager</span></span><br><br>+ (<span class="hljs-keyword">instancetype</span>)manager &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-keyword">static</span> WDDataBaseManager *manager = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        manager = [[WDDataBaseManager alloc] init];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> manager;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)createTableWithName:(<span class="hljs-built_in">NSString</span> *)name &#123;<br>    [<span class="hljs-keyword">self</span>.fmdb open];<br>    <span class="hljs-keyword">self</span>.tableName = name;<br>    <span class="hljs-built_in">NSString</span> *sql = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;create table if not exists %@ (id integer primary key autoincrement,model BLOB)&quot;</span>, name];<br>    <span class="hljs-built_in">BOOL</span> result = [<span class="hljs-keyword">self</span>.fmdb executeUpdate:sql];<br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;表创建成功&quot;</span>);<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)dropTable &#123;<br>    <span class="hljs-built_in">NSString</span> *sql = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;drop table if exists %@&quot;</span>, <span class="hljs-keyword">self</span>.tableName];<br>    <span class="hljs-built_in">BOOL</span> result = [<span class="hljs-keyword">self</span>.fmdb executeUpdate:sql];<br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;表删除成功&quot;</span>);<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)insertDataWithModel:(<span class="hljs-built_in">NSObject</span> *)model successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock &#123;<br>    <span class="hljs-built_in">NSData</span> *modelData = [<span class="hljs-built_in">NSKeyedArchiver</span> archivedDataWithRootObject:model];<br>    <span class="hljs-built_in">NSString</span> *sql = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;insert into %@ (model) values(?)&quot;</span>, <span class="hljs-keyword">self</span>.tableName];<br>    <span class="hljs-built_in">BOOL</span> result = [<span class="hljs-keyword">self</span>.fmdb executeUpdate:sql withArgumentsInArray:@[modelData]];<br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        aSuccessBlock();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        aFailBlock();<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)updateDataWithModel:(<span class="hljs-built_in">NSObject</span> *)model uid:(<span class="hljs-built_in">NSInteger</span>)aUid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock &#123;<br>    <span class="hljs-built_in">NSData</span> *modelData = [<span class="hljs-built_in">NSKeyedArchiver</span> archivedDataWithRootObject:model];<br>    <span class="hljs-built_in">NSString</span> *sql = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;update %@ set model = ? where id = ?&quot;</span>, <span class="hljs-keyword">self</span>.tableName];<br>    <span class="hljs-built_in">BOOL</span> result = [<span class="hljs-keyword">self</span>.fmdb executeUpdate:sql withArgumentsInArray:@[modelData, @(aUid)]];<br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        aSuccessBlock();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        aFailBlock();<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)deleteDataWithUid:(<span class="hljs-built_in">NSInteger</span>)uid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock &#123;<br>    <span class="hljs-built_in">NSString</span> *sql = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;delete from %@ where id = ?&quot;</span>, <span class="hljs-keyword">self</span>.tableName];<br>    <span class="hljs-built_in">BOOL</span> result = [<span class="hljs-keyword">self</span>.fmdb executeUpdate:sql withArgumentsInArray:@[@(uid)]];<br>    <span class="hljs-keyword">if</span> (result) &#123;<br>        aSuccessBlock();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        aFailBlock();<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSObject</span> *&gt; *)queryAllData &#123;<br>    <span class="hljs-built_in">NSMutableArray</span> *array = [<span class="hljs-built_in">NSMutableArray</span> array];<br>    <span class="hljs-built_in">NSString</span> *sql = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;select * from %@&quot;</span>,<span class="hljs-keyword">self</span>.tableName];<br>    <span class="hljs-keyword">@try</span> &#123;<br>        FMResultSet *rs = [<span class="hljs-keyword">self</span>.fmdb executeQuery:sql];<br>        <span class="hljs-keyword">while</span> (rs.next) &#123;<br>            <span class="hljs-built_in">NSObject</span> *model = [[<span class="hljs-built_in">NSObject</span> alloc] init];<br>            <span class="hljs-built_in">NSData</span> *modelData = [rs dataForColumn:<span class="hljs-string">@&quot;model&quot;</span>];<br>            <span class="hljs-keyword">int</span> uid = [rs intForColumn:<span class="hljs-string">@&quot;id&quot;</span>];<br>            <br>            model = [<span class="hljs-built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:modelData];<br>            model.wd_fmdb_id = uid;<br>            [array addObject:model];<br>        &#125;<br>    &#125; <span class="hljs-keyword">@catch</span> (<span class="hljs-built_in">NSException</span> *exception) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, <span class="hljs-keyword">self</span>.fmdb.lastError);<br>    &#125; <span class="hljs-keyword">@finally</span> &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;查询数据&quot;</span>);<br>    &#125;<br>    <br>   <span class="hljs-keyword">return</span> array;<br>&#125;<br><br>- (FMDatabase *)fmdb &#123;<br>    <span class="hljs-keyword">if</span> (!_fmdb) &#123;<br>        <span class="hljs-built_in">NSString</span> *path = [<span class="hljs-built_in">NSHomeDirectory</span>() stringByAppendingString:<span class="hljs-string">@&quot;/Documents/testDB.db&quot;</span>];<br>        _fmdb = [[FMDatabase alloc] initWithPath:path];<br>    &#125;<br>    <span class="hljs-keyword">return</span> _fmdb;<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>3、使用方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>、打开数据库，并创建表<br>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;<br>    <br>    [[WDDataBaseManager manager] createTableWithName:@<span class="hljs-string">&quot;test&quot;</span>];<br>    <br>    return YES;<br>&#125;<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>、添加数据<br> [[WDDataBaseManager manager] insertDataWithModel:model successBlock:^&#123;<br>        <span class="hljs-regexp">//</span> TODO:<br>    &#125; failBlock:^&#123;<br>        <span class="hljs-regexp">//</span> TODO:<br>    &#125;];<br><span class="hljs-regexp">//</span> <span class="hljs-number">3</span>、查询数据<br>[[WDDataBaseManager manager] queryAllData]<br><span class="hljs-regexp">//</span> <span class="hljs-number">4</span>、修改数据<br>[[WDDataBaseManager manager] updateDataWithModel:model uid:self.model.wd_fmdb_id successBlock:^&#123;<br>        <span class="hljs-regexp">//</span> TODO:<br>    &#125; failBlock:^&#123;<br>         <span class="hljs-regexp">//</span> TODO:<br>    &#125;];<br><span class="hljs-regexp">//</span> <span class="hljs-number">5</span>、删除数据<br>[[WDDataBaseManager manager] deleteDataWithUid:model.wd_fmdb_id successBlock:^&#123;<br>            <span class="hljs-regexp">//</span> TODO:<br>        &#125; failBlock:^&#123;<br>            <span class="hljs-regexp">//</span> TODO:<br>        &#125;];<br><span class="hljs-regexp">//</span> <span class="hljs-number">6</span>、删除表<br>[[WDDataBaseManager manager] dropTable];<br></code></pre></td></tr></table></figure><ul><li>插入表中的Model需要遵循<NSCoding>(实例代码)<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)encodeWithCoder:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSCoder</span> *)aCoder &#123;<br>    [aCoder encodeObject:<span class="hljs-keyword">self</span>.name forKey:<span class="hljs-string">@&quot;name&quot;</span>];<br>    [aCoder encodeObject:<span class="hljs-keyword">self</span>.phone forKey:<span class="hljs-string">@&quot;phone&quot;</span>];<br>    [aCoder encodeObject:<span class="hljs-keyword">self</span>.address forKey:<span class="hljs-string">@&quot;address&quot;</span>];<br>&#125;<br><br>- (<span class="hljs-keyword">nullable</span> <span class="hljs-keyword">instancetype</span>)initWithCoder:(<span class="hljs-keyword">nonnull</span> <span class="hljs-built_in">NSCoder</span> *)aDecoder &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span> == [<span class="hljs-keyword">super</span> init]) &#123;<br>        <span class="hljs-keyword">self</span>.name = [aDecoder decodeObjectForKey:<span class="hljs-string">@&quot;name&quot;</span>] ;<br>        <span class="hljs-keyword">self</span>.phone = [aDecoder decodeObjectForKey:<span class="hljs-string">@&quot;phone&quot;</span>];<br>        <span class="hljs-keyword">self</span>.address = [aDecoder decodeObjectForKey:<span class="hljs-string">@&quot;address&quot;</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>SDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS第三方库-AFNetworking&amp;SDWebImage原理</title>
    <link href="/2020/01/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-AFNetworking&amp;SDWebImage%E5%8E%9F%E7%90%86/"/>
    <url>/2020/01/01/iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93-AFNetworking&amp;SDWebImage%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="AFNetworking"><a href="#AFNetworking" class="headerlink" title="AFNetworking"></a>AFNetworking</h2><p>NSURLSession</p><blockquote><ul><li>NSURLSession</li><li>NSURLSessionConfiguation</li><li>NSURLSessionTask</li></ul></blockquote><p>NSURLSessionTask</p><blockquote><ul><li>NSURLSessionDataTask </li><li>NSURLSessionDownLoadTask </li><li>NSURLSessionUploadTask</li></ul></blockquote><p>网络请求的过程</p><blockquote><ul><li>创建NSURLSessionConfig对象–用创建的config对象配置初始化NSURLSession–创建NSURLSessionTask对象并resume执行，用delegate或者block回调返回数据。</li><li>AFURLSessionManager封装了上述网络交互功能 </li><li>AFURLSessionManager请求过程 </li><li>1.初始化AFURLSessionManager。 </li><li>2.获取AFURLSessionManager的Task对象 </li><li>3.启动Task</li></ul></blockquote><p>AFNetworking由五个模块组成：</p><blockquote><ul><li>NSURLSession：网络通信模块（核心模块） 对应 AFNetworking中的AFURLSessionManager和对HTTP协议进行特化处理的AFHTTPSessionManager,AFHTTPSessionManager是继承于AFURLSessionmanager</li><li>Security：网络通讯安全策略模块 对应 AFSecurityPolicy</li><li>Reachability：网络状态监听模块 对应AFNetworkReachabilityManager</li><li>Seriaalization：网络通信信息序列化、反序列化模块 对应 AFURLResponseSerialization</li><li>UIKit：对于IOSUIKit的扩展库</li></ul></blockquote><hr><h2 id="SDWebImage"><a href="#SDWebImage" class="headerlink" title="SDWebImage"></a>SDWebImage</h2><h4 id="图片解释："><a href="#图片解释：" class="headerlink" title="图片解释："></a>图片解释：</h4><blockquote><ul><li>内存层面的相当是个缓存器，以Key-Value的形式存储图片。</li><li>当内存不够的时候会清除所有缓存图片。</li><li>用搜索文件系统的方式做管理，文件替换方式是以时间为单位，剔除时间大于一周的图片文件。</li><li>当SDWebImageManager向SDImageCache要资源时，先搜索内存层面的数据，如果有直接返回，没有的话去访问磁盘，将图片从磁盘读取出来，然后做Decoder，将图片对象放到内存层面做备份，再返回调用层。</li></ul></blockquote><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><blockquote><p>1、入口 setImageWithURL:placeholderImage:options: 会先把 placeholderImage 显示，然后 SDWebImageManager 根据 URL 开始处理图片。</p><p>2、进入 SDWebImageManager-downloadWithURL:delegate:options:userInfo:，交给 SDImageCache 从缓存查找图片是否已经下载 queryDiskCacheForKey:delegate:userInfo:.</p><p>3、如果内存中已经有图片缓存，SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo: 到 SDWebImageManager。</p><p>4、SDWebImageManagerDelegate 回调 webImageManager:didFinishWithImage: 到 UIImageView+WebCache 等前端展示图片。</p><p>5、如果内存缓存中没有，生成 NSInvocationOperation 添加到队列开始从硬盘查找图片是否已经缓存。</p><p>6、根据 URLKey 在硬盘缓存目录下尝试读取图片文件。这一步是在 NSOperation 进行的操作，所以回主线程进行结果回调 notifyDelegate:。</p><p>7、如果硬盘中有该图片，将图片添加到内存缓存中（如果空闲内存过小，会先清空内存缓存）。SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:。进而回调展示图片。</p><p>8、如果从硬盘缓存目录读取不到图片，说明所有缓存都不存在该图片，需要下载图片，回调 imageCache:didNotFindImageForKey:userInfo:。</p><p>9、共享或重新生成一个下载器 SDWebImageDownloader 开始下载图片。</p><p>10、图片下载由 NSURLConnection 来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。</p><p>11、imageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。</p><p>12、通知所有的 downloadDelegates 下载完成，回调给需要的地方展示图片。</p><p>13、将图片保存到 SDImageCache 中，内存缓存和硬盘缓存同时保存。写文件到硬盘也在以单独 NSInvocationOperation 完成，避免拖慢主线程。SDImageCache 在初始化的时候会注册一些消息通知，在内存警告或退到后台的时候清理内存图片缓存，应用结束的时候清理过期图片。</p></blockquote><hr>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>SDK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS开发技巧-不断更新中</title>
    <link href="/2020/01/01/iOS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/01/01/iOS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>1、PrefixHeader导入位置写法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(SRCROOT)</span>/<span class="hljs-constructor">$(PROJECT_NAME)</span>/&lt;#文件所在文件夹名称#&gt;/<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PrefixHeader</span>.</span></span>pch<br></code></pre></td></tr></table></figure><p>2、隐藏导航栏的两种方式</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//方式一 《推荐》</span><br><span class="hljs-comment">//在需要隐藏的viewController中遵循&lt;UINavigationControllerDelegate&gt;</span><br>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br> <span class="hljs-comment">// 设置导航控制器的代理为self</span><br>    <span class="hljs-keyword">self</span>.navigationController.delegate = <span class="hljs-keyword">self</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - UINavigationControllerDelegate</span><br><span class="hljs-comment">// 将要显示控制器</span><br>- (<span class="hljs-keyword">void</span>)navigationController:(<span class="hljs-built_in">UINavigationController</span> *)navigationController willShowViewController:(<span class="hljs-built_in">UIViewController</span> *)viewController animated:(<span class="hljs-built_in">BOOL</span>)animated &#123;<br>    <span class="hljs-comment">// 判断要显示的控制器是否是自己</span><br>    <span class="hljs-built_in">BOOL</span> isShowHomePage = [viewController isKindOfClass:[<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>]];<br>    <br>    [<span class="hljs-keyword">self</span>.navigationController setNavigationBarHidden:isShowHomePage animated:<span class="hljs-literal">YES</span>];<br>&#125;<br><br><span class="hljs-comment">//方式二</span><br>- (<span class="hljs-keyword">void</span>)viewWillAppear:(<span class="hljs-built_in">BOOL</span>)animated &#123;<br>    [<span class="hljs-keyword">super</span> viewWillAppear:animated];<br><br>    [<span class="hljs-keyword">self</span>.navigationController setNavigationBarHidden:<span class="hljs-literal">YES</span> animated:<span class="hljs-literal">YES</span>];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewWillDisappear:(<span class="hljs-built_in">BOOL</span>)animated &#123;<br>    [<span class="hljs-keyword">super</span> viewWillDisappear:animated];<br><br>    [<span class="hljs-keyword">self</span>.navigationController setNavigationBarHidden:<span class="hljs-literal">NO</span> animated:<span class="hljs-literal">YES</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>3、TabBarItem要求只显示图片不显示文字</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// self 表示需要设置样式的控制器</span><br>[<span class="hljs-keyword">self</span>.tabBarItem setImageInsets:<span class="hljs-built_in">UIEdgeInsetsMake</span>(<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">0</span>)];<br></code></pre></td></tr></table></figure><p>4、TableView或CollectionView单选</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--步骤一、 声明一个全局变量--&gt;</span></span><br><span class="xml">@property (nonatomic, assign) NSInteger selectedIndex;</span><br><span class="xml"><span class="hljs-comment">&lt;!--步骤二、TableView或CollectionView点击事件的方法中保存点击的index，并刷新--&gt;</span></span><br><span class="xml">self.selectedIndex = indexPath.row;</span><br><span class="xml">[collectionView reloadData];或[tableView reloadData];</span><br><span class="xml"><span class="hljs-comment">&lt;!--步骤三、在cellForItemAtIndexPath或cellForRowAtIndexPath方法中判断是否是所保存的index--&gt;</span></span><br><span class="xml">if (self.selectedIndex == indexPath.row) </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    // 设置选中样式</span><br><span class="hljs-template-variable">&#125;</span><span class="xml"> else </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    // 设置成默认样式    </span><br><span class="hljs-template-variable">&#125;</span><span class="xml"></span><br><span class="xml"></span><br></code></pre></td></tr></table></figure><p>5、怎么区分真机还是模拟器</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> TARGET_IPHONE_SIMULATOR  </span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;run on simulator&quot;</span>);  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SIMULATOR_TEST</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span>  </span><br><span class="hljs-comment">//不定义SIMULATOR_TEST这个宏</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;run on device&quot;</span>);  <br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>6、if Debug</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#ifdef DEBUG    </span><br><span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> sth<br><span class="hljs-comment">#else   </span><br><span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> sth<br><span class="hljs-comment">#endif</span><br></code></pre></td></tr></table></figure><p>7、一键清理所有模拟器安装过的APP</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 先关闭所有模拟器 在终端中输入下面命令即可<br>xcrun simctl erase all<br></code></pre></td></tr></table></figure><p>8、SDWebImage清理缓存</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">- (void)didReceiveMemoryWarning &#123;<br>    <span class="hljs-comment">[super didReceiveMemoryWarning]</span>;<br>    <span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[SDWebImageManager sharedManager]</span> imageCache]</span> clearMemory]</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>9、UITableView的HeaderView下拉放大</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-number">1</span>、View1:作为显示View<br><span class="hljs-number">2</span>、View2:作为tableView的tableHeaderView，并添加View1，View2的大小和View1大小相同.<br><span class="hljs-number">3</span>、在<span class="hljs-built_in">UIScrollViewDelegate</span>方法中进行设计<br>- (<span class="hljs-keyword">void</span>)scrollViewDidScroll:(<span class="hljs-built_in">UIScrollView</span> *)scrollView &#123;<br>    <span class="hljs-built_in">CGFloat</span> width = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width;<br>    <span class="hljs-built_in">CGFloat</span> viewHeight = kScreenWidth * <span class="hljs-number">0.5</span>; <span class="hljs-comment">// View1的初始高度</span><br>    <span class="hljs-built_in">CGFloat</span> yOffset = scrollView.contentOffset.y;<br>    <span class="hljs-keyword">if</span> (yOffset &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">CGFloat</span> totalOffset = viewHeight + ABS(yOffset);<br>        <span class="hljs-built_in">CGFloat</span> f = totalOffset / viewHeight;<br>        <span class="hljs-keyword">self</span>.headerView.frame = <span class="hljs-built_in">CGRectMake</span>(- (width * f - width) / <span class="hljs-number">2</span>, yOffset, width * f, totalOffset);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>10、Masonry制作就宫格</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//Objective-C ----&gt; Masonry</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 多视图布局</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param viewArray 视图数组</span><br><span class="hljs-comment"> @param column 列数</span><br><span class="hljs-comment"> @param tbSpeace 视图上下间距</span><br><span class="hljs-comment"> @param lrSpeace 视图左右间距</span><br><span class="hljs-comment"> @param topSpeace 和父视图上间距</span><br><span class="hljs-comment"> @param lrSuperViewSpeace 父视图左右间距</span><br><span class="hljs-comment"> @param superView 父视图</span><br><span class="hljs-comment"> @param viewHeight 视图高度</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)wd_masLayoutSubViewsWithViewArray:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">UIView</span> *&gt; *)viewArray<br>                              columnOfRow:(<span class="hljs-built_in">NSInteger</span>)column<br>                    topBottomOfItemSpeace:(<span class="hljs-built_in">CGFloat</span>)tbSpeace<br>                      leftRightItemSpeace:(<span class="hljs-built_in">CGFloat</span>)lrSpeace<br>                     topOfSuperViewSpeace:(<span class="hljs-built_in">CGFloat</span>)topSpeace<br>                 leftRightSuperViewSpeace:(<span class="hljs-built_in">CGFloat</span>)lrSuperViewSpeace<br>                          addToSubperView:(<span class="hljs-built_in">UIView</span> *)superView<br>                               viewHeight:(<span class="hljs-built_in">CGFloat</span>)viewHeight&#123;<br>  <br>                    <span class="hljs-built_in">CGFloat</span> viewWidth = superView.bounds.size.width;<br>                    <span class="hljs-built_in">CGFloat</span> itemWidth = (viewWidth - lrSuperViewSpeace * <span class="hljs-number">2</span> - (column - <span class="hljs-number">1</span>) * lrSpeace) / column * <span class="hljs-number">1.0</span>f;<br>                    <span class="hljs-built_in">CGFloat</span> itemHeight = viewHeight;<br>                    <span class="hljs-built_in">UIView</span> *last = <span class="hljs-literal">nil</span>;<br>  <br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; viewArray.count; i++) &#123;<br>                        <span class="hljs-built_in">UIView</span> *item = viewArray[i];<br>                        [superView addSubview:item];<br><br>                        [item mas_makeConstraints:^(MASConstraintMaker *make) &#123;<br>                            make.width.mas_equalTo(itemWidth);<br>                            make.height.mas_equalTo(itemHeight);<br>                          <br>                            <span class="hljs-built_in">CGFloat</span> top = topSpeace + (i / column) * (itemHeight + tbSpeace);<br>                            make.top.mas_offset(top);<br>                            <span class="hljs-keyword">if</span> (!last || (i % column) == <span class="hljs-number">0</span>) &#123;<br>                                make.left.mas_offset(lrSuperViewSpeace);<br>                            &#125;<span class="hljs-keyword">else</span>&#123;<br>                                make.left.mas_equalTo(last.mas_right).mas_offset(lrSpeace);<br>                            &#125;<br>                        &#125;];<br>                      <br>                        last = item;<br>                    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>11、Snapkit制作九宫格</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//Swift ----&gt; SnapKit</span><br>    <br>    <span class="hljs-comment">/// 多视图布局</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// - Parameters:</span><br>    <span class="hljs-comment">///   - viewArray: 视图数组</span><br>    <span class="hljs-comment">///   - columnOfRow: 列数</span><br>    <span class="hljs-comment">///   - topBottomOfItemSpeace: 视图上下间距</span><br>    <span class="hljs-comment">///   - leftRightItemSpeace: 视图左右间距</span><br>    <span class="hljs-comment">///   - topOfSuperViewSpeace: 和父视图上间距</span><br>    <span class="hljs-comment">///   - leftRightSuperViewSpeace: 父视图左右间距</span><br>    <span class="hljs-comment">///   - addToSubperView: 父视图</span><br>    <span class="hljs-comment">///   - viewHeight: 视图高度</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">wd_masLayoutSubViews</span>(<span class="hljs-params">viewArray</span>:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">UIView</span>&gt;,</span><br><span class="hljs-function">                              <span class="hljs-params">columnOfRow</span>:<span class="hljs-type">Int</span>,</span><br><span class="hljs-function">                              <span class="hljs-params">topBottomOfItemSpeace</span>:<span class="hljs-type">CGFloat</span>,</span><br><span class="hljs-function">                              <span class="hljs-params">leftRightItemSpeace</span>:<span class="hljs-type">CGFloat</span>,</span><br><span class="hljs-function">                              <span class="hljs-params">topOfSuperViewSpeace</span>:<span class="hljs-type">CGFloat</span>,</span><br><span class="hljs-function">                              <span class="hljs-params">leftRightSuperViewSpeace</span>:<span class="hljs-type">CGFloat</span>,</span><br><span class="hljs-function">                              <span class="hljs-params">addToSubperView</span>:<span class="hljs-type">UIView</span>,</span><br><span class="hljs-function">                              <span class="hljs-params">viewHeight</span>:<span class="hljs-type">CGFloat</span>)</span> -&gt; <span class="hljs-type">Void</span> &#123;<br>        <br>        <br>        <span class="hljs-keyword">let</span> viewWidth <span class="hljs-operator">=</span> addToSubperView.bounds.width<br>        <span class="hljs-keyword">let</span> tempW <span class="hljs-operator">=</span> leftRightSuperViewSpeace <span class="hljs-operator">*</span> <span class="hljs-number">2</span> <span class="hljs-operator">+</span> <span class="hljs-type">CGFloat</span>(columnOfRow <span class="hljs-operator">-</span> <span class="hljs-number">1</span>) <span class="hljs-operator">*</span> leftRightItemSpeace<br>        <span class="hljs-keyword">let</span> itemWidth <span class="hljs-operator">=</span> (viewWidth <span class="hljs-operator">-</span> tempW) <span class="hljs-operator">/</span> <span class="hljs-type">CGFloat</span>(columnOfRow)<br>        <span class="hljs-keyword">let</span> itemHeight <span class="hljs-operator">=</span> viewHeight<br>        <br>        <span class="hljs-built_in">print</span>(leftRightSuperViewSpeace,leftRightItemSpeace,itemWidth)<br>        <br>        <span class="hljs-keyword">var</span> lastView:<span class="hljs-type">UIView</span>?<br>        <br>        <span class="hljs-keyword">for</span> (index) <span class="hljs-keyword">in</span> viewArray.enumerated() &#123;<br>            <br>            <span class="hljs-keyword">let</span> item <span class="hljs-operator">=</span> viewArray[i]<br>            addToSubperView.addSubview(item)<br>            <br>            item.snp.makeConstraints &#123; (make) <span class="hljs-keyword">in</span><br>                make.width.equalTo(itemWidth)<br>                make.height.equalTo(itemHeight)<br>                <span class="hljs-keyword">let</span> top <span class="hljs-operator">=</span> topOfSuperViewSpeace <span class="hljs-operator">+</span> <span class="hljs-type">CGFloat</span>(i <span class="hljs-operator">/</span> columnOfRow) <span class="hljs-operator">*</span> (itemHeight <span class="hljs-operator">+</span> topBottomOfItemSpeace)<br>                make.top.equalTo(top)<br>                <br>                <span class="hljs-keyword">if</span> <span class="hljs-operator">!</span>(lastView <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span>) <span class="hljs-operator">||</span> i<span class="hljs-operator">%</span>columnOfRow <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                    make.left.equalTo(leftRightSuperViewSpeace)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    make.left.equalTo((lastView<span class="hljs-operator">?</span>.snp.right)<span class="hljs-operator">!</span>).offset(leftRightItemSpeace)<br>                &#125;<br>                <br>                lastView <span class="hljs-operator">=</span> item<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>12、沉浸式TableView(ScrollView、CollectionView)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">@available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">11.0</span>, <span class="hljs-operator">*</span>)) &#123;<br>    <span class="hljs-keyword">self</span>.tableView.contentInsetAdjustmentBehavior <span class="hljs-operator">=</span> <span class="hljs-type">UIScrollViewContentInsetAdjustmentNever</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">self</span>.automaticallyAdjustsScrollViewInsets <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>13、通过身份证计算年龄</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/** 通过身份证计算年龄 */</span><br>- (<span class="hljs-built_in">NSString</span> *)calculationAgeWithBirthday: (<span class="hljs-built_in">NSString</span> *)birthday &#123;<br>    <span class="hljs-built_in">NSCalendar</span> *calendar = [<span class="hljs-built_in">NSCalendar</span> currentCalendar];<br>    <span class="hljs-built_in">NSDate</span> *nowDate = [<span class="hljs-built_in">NSDate</span> date];<br>    <span class="hljs-built_in">NSString</span> *birth = birthday;<br>    <span class="hljs-built_in">NSDateFormatter</span> *dateFormatter = [[<span class="hljs-built_in">NSDateFormatter</span> alloc]init];<br>    [dateFormatter setDateFormat:<span class="hljs-string">@&quot;yyyy-MM-dd&quot;</span>];<br>    <span class="hljs-built_in">NSDate</span> *birthDay = [dateFormatter dateFromString:birth];<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> unitFlags = <span class="hljs-built_in">NSCalendarUnitYear</span> | <span class="hljs-built_in">NSCalendarUnitMonth</span> | <span class="hljs-built_in">NSCalendarUnitDay</span>;<br>    <span class="hljs-built_in">NSDateComponents</span> *date = [calendar components:unitFlags fromDate:birthDay toDate:nowDate options:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> ([date year] &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%ld岁&quot;</span>, (<span class="hljs-keyword">long</span>)[date year]];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>([date month] &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%ld月&quot;</span>, (<span class="hljs-keyword">long</span>)[date month]];<br>    &#125;  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>([date day] &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%ld天&quot;</span>, (<span class="hljs-keyword">long</span>)[date day]];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">@&quot;0天&quot;</span>;<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-built_in">NSString</span> *)ageStrFromIdentityCard:(<span class="hljs-built_in">NSString</span> *)numberStr &#123;<br>    <span class="hljs-built_in">NSString</span> *dateSt;<br>    <span class="hljs-built_in">NSMutableString</span> *dateS;<br>    <span class="hljs-keyword">if</span> (numberStr.length &gt; <span class="hljs-number">15</span>) &#123;<br>        dateSt = [numberStr substringWithRange:<span class="hljs-built_in">NSMakeRange</span>(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>)];<br>        dateS = [<span class="hljs-built_in">NSMutableString</span> stringWithFormat:<span class="hljs-string">@&quot;%@&quot;</span>, dateSt];<br>        [dateS insertString:<span class="hljs-string">@&quot;-&quot;</span> atIndex:<span class="hljs-number">4</span>];<br>        [dateS insertString:<span class="hljs-string">@&quot;-&quot;</span> atIndex:<span class="hljs-number">7</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 只考虑 19开头的15位的身份证号</span><br>        dateSt = [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;19%@&quot;</span>,[numberStr substringWithRange:<span class="hljs-built_in">NSMakeRange</span>(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>)]];<br>        dateS = [<span class="hljs-built_in">NSMutableString</span> stringWithFormat:<span class="hljs-string">@&quot;%@&quot;</span>, dateSt];<br>        [dateS insertString:<span class="hljs-string">@&quot;-&quot;</span> atIndex:<span class="hljs-number">4</span>];<br>        [dateS insertString:<span class="hljs-string">@&quot;-&quot;</span> atIndex:<span class="hljs-number">7</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> calculationAgeWithBirthday:dateS];<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件-TableView、CollectionView空数据占位图</title>
    <link href="/2019/12/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-TableView%E3%80%81CollectionView%E7%A9%BA%E6%95%B0%E6%8D%AE%E5%8D%A0%E4%BD%8D%E5%9B%BE/"/>
    <url>/2019/12/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-TableView%E3%80%81CollectionView%E7%A9%BA%E6%95%B0%E6%8D%AE%E5%8D%A0%E4%BD%8D%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-9a4a4958fdf67cb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼图.jpg"></p><p>最近由于业务需求，需要封装这样的一个提示页面。看了网上方法感觉都大同小异，其中<a href="https://link.jianshu.com/?t=https://github.com/dzenbot/DZNEmptyDataSet">DZNEmptyDataSet</a>是很好的一个库，但是对我个人而言有点大财小用了。所以就借鉴一下其方法，自己封装一个。感觉有更高的自定义性吧。（我是初学者，请大佬爱护，勿喷）<br>一、封装代码：利用UIScrollView的分类实现</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">UIScrollView</span> (<span class="hljs-title">WD_NoData</span>)</span><br><span class="hljs-comment">// 需要显示的占位页面</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *noDataView;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br><br></code></pre></td></tr></table></figure><p>实现代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;UIScrollView+WD_NoData.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;objc/runtime.h&gt;</span></span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span> *noDataViewKey = <span class="hljs-string">&quot;noDataViewKey&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">UIScrollView</span> (<span class="hljs-title">WD_NoData</span>)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 交换方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param sel1 原方法</span><br><span class="hljs-comment"> @param sel2 自定义方法</span><br><span class="hljs-comment"> @param cls 类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> exchangeSelector(SEL sel1, SEL sel2, Class cls) &#123;<br>    Class <span class="hljs-keyword">class</span> = [cls <span class="hljs-keyword">class</span>];<br>    Method originalMethod = class_getInstanceMethod(<span class="hljs-keyword">class</span>, sel1);<br>    Method swizzledMethod = class_getInstanceMethod(<span class="hljs-keyword">class</span>, sel2);<br>    <span class="hljs-built_in">BOOL</span> success = class_addMethod(<span class="hljs-keyword">class</span>, sel1, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));<br>    <span class="hljs-keyword">if</span> (success) &#123;<br>        class_replaceMethod(<span class="hljs-keyword">class</span>, sel2, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        method_exchangeImplementations(originalMethod, swizzledMethod);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== Setter ===============</span><br>- (<span class="hljs-keyword">void</span>)setNoDataView:(<span class="hljs-built_in">UIView</span> *)noDataView &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        exchangeSelector(<span class="hljs-keyword">@selector</span>(reloadData), <span class="hljs-keyword">@selector</span>(wd_reloadData), [<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>]);<br>    &#125;);<br>    <br>    objc_setAssociatedObject(<span class="hljs-keyword">self</span>, noDataViewKey, noDataView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== Getter ===============</span><br>- (<span class="hljs-built_in">UIView</span> *)noDataView &#123;<br>    <span class="hljs-built_in">UIView</span> *noDataView = objc_getAssociatedObject(<span class="hljs-keyword">self</span>, noDataViewKey);<br>    noDataView.frame = <span class="hljs-keyword">self</span>.frame;<br>    <span class="hljs-keyword">return</span> noDataView;<br>&#125;<br><br><br>- (<span class="hljs-keyword">void</span>)wd_reloadData &#123;<br>    [<span class="hljs-keyword">self</span> wd_reloadData];<br>    [<span class="hljs-keyword">self</span> wd_checkData];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== 获取数据 ===============</span><br>- (<span class="hljs-keyword">void</span>)wd_checkData &#123;<br>    <span class="hljs-built_in">NSInteger</span> items = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">if</span> (![<span class="hljs-keyword">self</span> respondsToSelector:<span class="hljs-keyword">@selector</span>(dataSource)]) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// UITableView support</span><br>    <span class="hljs-keyword">if</span> ([<span class="hljs-keyword">self</span> isKindOfClass:[<span class="hljs-built_in">UITableView</span> <span class="hljs-keyword">class</span>]]) &#123;<br>        <br>        <span class="hljs-built_in">UITableView</span> *tableView = (<span class="hljs-built_in">UITableView</span> *)<span class="hljs-keyword">self</span>;<br>        <span class="hljs-keyword">id</span> &lt;<span class="hljs-built_in">UITableViewDataSource</span>&gt; dataSource = tableView.dataSource;<br>        <br>        <span class="hljs-built_in">NSInteger</span> sections = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">if</span> (dataSource &amp;&amp; [dataSource respondsToSelector:<span class="hljs-keyword">@selector</span>(numberOfSectionsInTableView:)]) &#123;<br>            sections = [dataSource numberOfSectionsInTableView:tableView];<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (dataSource &amp;&amp; [dataSource respondsToSelector:<span class="hljs-keyword">@selector</span>(tableView:numberOfRowsInSection:)]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSInteger</span> section = <span class="hljs-number">0</span>; section &lt; sections; section++) &#123;<br>                items += [dataSource tableView:tableView numberOfRowsInSection:section];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// UICollectionView support</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([<span class="hljs-keyword">self</span> isKindOfClass:[<span class="hljs-built_in">UICollectionView</span> <span class="hljs-keyword">class</span>]]) &#123;<br>        <br>        <span class="hljs-built_in">UICollectionView</span> *collectionView = (<span class="hljs-built_in">UICollectionView</span> *)<span class="hljs-keyword">self</span>;<br>        <span class="hljs-keyword">id</span> &lt;<span class="hljs-built_in">UICollectionViewDataSource</span>&gt; dataSource = collectionView.dataSource;<br>        <br>        <span class="hljs-built_in">NSInteger</span> sections = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">if</span> (dataSource &amp;&amp; [dataSource respondsToSelector:<span class="hljs-keyword">@selector</span>(numberOfSectionsInCollectionView:)]) &#123;<br>            sections = [dataSource numberOfSectionsInCollectionView:collectionView];<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> (dataSource &amp;&amp; [dataSource respondsToSelector:<span class="hljs-keyword">@selector</span>(collectionView:numberOfItemsInSection:)]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSInteger</span> section = <span class="hljs-number">0</span>; section &lt; sections; section++) &#123;<br>                items += [dataSource collectionView:collectionView numberOfItemsInSection:section];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> ( items == <span class="hljs-number">0</span> ) &#123;<br>        [<span class="hljs-keyword">self</span>.superview addSubview:<span class="hljs-keyword">self</span>.noDataView];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-keyword">self</span>.noDataView removeFromSuperview];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>二、使用方法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">#<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;UIScrollView+WD_NoData.h&quot;</span><br><span class="hljs-comment">// 自定义页面</span><br>#<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;WDTestEmptyView.h&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//示例的视图</span><br> WDTestEmptyView *view = [<span class="hljs-built_in">NSBundle</span>.mainBundle loadNibNamed:<span class="hljs-string">@&quot;WDTestEmptyView&quot;</span> owner:<span class="hljs-keyword">self</span> options:<span class="hljs-literal">nil</span>].firstObject;<br><span class="hljs-comment">// 设置视图</span><br><span class="hljs-keyword">self</span>.tableView.noDataView = view;<br></code></pre></td></tr></table></figure><p>三、效果图</p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-9aecbb692ded171f.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件：PopMenu</title>
    <link href="/2019/12/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-PopMenu/"/>
    <url>/2019/12/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-PopMenu/</url>
    
    <content type="html"><![CDATA[<p>现在很多的应用都有类似的弹窗控件，最出名应该是企鹅和微信了吧。想着为了满足自己的效果就动手写了这个。首先要感谢写出弹窗箭头的代码的人<a href="https://github.com/iHandle/BubbleLayer">iHandle</a>，这方面的知识我很欠缺，以后找机会恶补一下。<br>先上两张出名的效果图：<br><img src="https://upload-images.jianshu.io/upload_images/3334769-4581178013f647fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="🐧"></p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-a4a9758369b0cfa6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="微信"></p><h2 id="样式定义"><a href="#样式定义" class="headerlink" title="样式定义"></a>样式定义</h2><p>主要以UITableView作为容器显示样式</p><ol><li>背景颜色</li><li>文字样式：颜色，字体大小，对齐方式</li><li>显示类型：仅文字，仅图标，文字 + 图标</li><li>是否显示下划线</li><li>箭头方向</li><li>弹窗宽度</li><li>单元格的高度 </li></ol><h2 id="箭头生成"><a href="#箭头生成" class="headerlink" title="箭头生成"></a>箭头生成</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, ArrowDirection) &#123;<br>    ArrowDirectionRight = <span class="hljs-number">0</span>,<br>    ArrowDirectionBottom,<br>    ArrowDirectionLeft,<br>    ArrowDirectionTop,<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CORNER_RADIUS   8   <span class="hljs-comment">// 默认矩形框圆角半径</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARROW_WIDTH     30  <span class="hljs-comment">// 默认箭头宽带</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARROW_HEIGHT    12  <span class="hljs-comment">// 默认箭头高度</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARROW_DIRECTION 1   <span class="hljs-comment">// 默认箭头方向，向下</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARROW_POSITION  0.5 <span class="hljs-comment">// 默认箭头相对位置，居中</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ARROW_RADIUS    3   <span class="hljs-comment">// 默认箭头指向处的圆角半径</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WudanLayer</span> : <span class="hljs-title">NSObject</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> cornerRadius;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> arrowRadius;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> arrowHeight;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> arrowWidth;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) ArrowDirection arrowDirection;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> arrowPosition;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGSize</span> size;<br><br>- (<span class="hljs-keyword">instancetype</span>)initWithSize:(<span class="hljs-built_in">CGSize</span>)size;<br>- (<span class="hljs-built_in">CAShapeLayer</span> *)layer;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WudanLayer</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - preparation</span><br>- (<span class="hljs-built_in">NSMutableArray</span> *)keyPoints &#123;<br>    <span class="hljs-built_in">NSMutableArray</span> *points = [<span class="hljs-built_in">NSMutableArray</span> array];<br>    <span class="hljs-built_in">CGPoint</span> beginPoint;<br>    <span class="hljs-built_in">CGPoint</span> topPoint;<br>    <span class="hljs-built_in">CGPoint</span> endPoint;<br>    <span class="hljs-built_in">CGFloat</span> validWidthForTopPoint = _size.width - <span class="hljs-number">2</span> * _cornerRadius - _arrowWidth;<br>    <span class="hljs-built_in">CGFloat</span> validHeightForTopPoint = _size.height - <span class="hljs-number">2</span> * _cornerRadius - _arrowWidth;<br>    <span class="hljs-built_in">CGFloat</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">CGFloat</span> width = _size.width, height = _size.height;<br>    <br>    <span class="hljs-keyword">switch</span> (_arrowDirection)<br>    &#123;<br>        <span class="hljs-keyword">case</span> ArrowDirectionRight:<br>        &#123;<br>            width -= _arrowHeight;<br>            topPoint = <span class="hljs-built_in">CGPointMake</span>(_size.width , _size.height / <span class="hljs-number">2</span> + validHeightForTopPoint*(_arrowPosition - <span class="hljs-number">0.5</span>));<br>            beginPoint = <span class="hljs-built_in">CGPointMake</span>(topPoint.x - _arrowHeight, topPoint.y - _arrowWidth/<span class="hljs-number">2</span>);<br>            endPoint = <span class="hljs-built_in">CGPointMake</span>(beginPoint.x, beginPoint.y + _arrowWidth);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ArrowDirectionBottom:<br>        &#123;<br>            height -= _arrowHeight;<br>            <br>            topPoint = <span class="hljs-built_in">CGPointMake</span>(_size.width / <span class="hljs-number">2</span> + validWidthForTopPoint*(_arrowPosition - <span class="hljs-number">0.5</span>), _size.height);<br>            beginPoint = <span class="hljs-built_in">CGPointMake</span>(topPoint.x + _arrowWidth/<span class="hljs-number">2</span>, topPoint.y - _arrowHeight);<br>            endPoint = <span class="hljs-built_in">CGPointMake</span>(beginPoint.x - _arrowWidth, beginPoint.y);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ArrowDirectionLeft:<br>        &#123;<br>            x = _arrowHeight;<br>            width -= _arrowHeight;<br>            <br>            topPoint = <span class="hljs-built_in">CGPointMake</span>(<span class="hljs-number">0</span>, _size.height / <span class="hljs-number">2</span> + validHeightForTopPoint*(_arrowPosition - <span class="hljs-number">0.5</span>));<br>            beginPoint = <span class="hljs-built_in">CGPointMake</span>(topPoint.x + _arrowHeight, topPoint.y + _arrowWidth/<span class="hljs-number">2</span>);<br>            endPoint = <span class="hljs-built_in">CGPointMake</span>(beginPoint.x, beginPoint.y - _arrowWidth);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> ArrowDirectionTop:<br>        &#123;<br>            y = _arrowHeight;<br>            height -= _arrowHeight;<br>            <br>            topPoint = <span class="hljs-built_in">CGPointMake</span>(_size.width / <span class="hljs-number">2</span> + validWidthForTopPoint*(_arrowPosition - <span class="hljs-number">0.5</span>), <span class="hljs-number">0</span>);<br>            beginPoint = <span class="hljs-built_in">CGPointMake</span>(topPoint.x - _arrowWidth/<span class="hljs-number">2</span>, topPoint.y + _arrowHeight);<br>            endPoint = <span class="hljs-built_in">CGPointMake</span>(beginPoint.x + _arrowWidth, beginPoint.y);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>    points = [<span class="hljs-built_in">NSMutableArray</span> arrayWithObjects: [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:beginPoint],<br>              [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:topPoint],<br>              [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:endPoint],<br>              <span class="hljs-literal">nil</span>];<br>    <span class="hljs-built_in">CGPoint</span> bottomRight = <span class="hljs-built_in">CGPointMake</span>(x + width, y + height);<br>    <span class="hljs-built_in">CGPoint</span> bottomLeft = <span class="hljs-built_in">CGPointMake</span>(x, y + height);<br>    <span class="hljs-built_in">CGPoint</span> topLeft = <span class="hljs-built_in">CGPointMake</span>(x, y);<br>    <span class="hljs-built_in">CGPoint</span> topRight = <span class="hljs-built_in">CGPointMake</span>(x + width, y);<br>    <span class="hljs-built_in">NSMutableArray</span> *rectPoints = [<span class="hljs-built_in">NSMutableArray</span> arrayWithObjects: [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:bottomRight],<br>                                  [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:bottomLeft],<br>                                  [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:topLeft],<br>                                  [<span class="hljs-built_in">NSValue</span> valueWithCGPoint:topRight],<br>                                  <span class="hljs-literal">nil</span>];<br>    <span class="hljs-keyword">int</span> rectPointIndex = (<span class="hljs-keyword">int</span>)_arrowDirection;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) &#123;<br>        [points addObject:[rectPoints objectAtIndex:rectPointIndex]];<br>        rectPointIndex = (rectPointIndex + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> points;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Draw bubblePath</span><br>- (<span class="hljs-built_in">CGPathRef</span>)bubblePath &#123;<br>    <span class="hljs-built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="hljs-keyword">self</span>.size, <span class="hljs-literal">NO</span>, <span class="hljs-number">0.0</span>);<br>    <span class="hljs-built_in">CGContextRef</span> ctx = <span class="hljs-built_in">UIGraphicsGetCurrentContext</span>();<br>    <span class="hljs-built_in">NSMutableArray</span> *points = [<span class="hljs-keyword">self</span> keyPoints];<br>    <span class="hljs-built_in">CGPoint</span> currentPoint = [[points objectAtIndex:<span class="hljs-number">6</span>] <span class="hljs-built_in">CGPointValue</span>];<br>    <span class="hljs-built_in">CGContextMoveToPoint</span>(ctx, currentPoint.x, currentPoint.y);<br>    <span class="hljs-built_in">CGPoint</span> pointA, pointB;<br>    <span class="hljs-built_in">CGFloat</span> radius;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">6</span>)<br>            <span class="hljs-keyword">break</span>;<br>        radius = i &lt; <span class="hljs-number">3</span> ?  _arrowRadius : _cornerRadius;<br>        pointA = [[points objectAtIndex:i] <span class="hljs-built_in">CGPointValue</span>];<br>        pointB = [[points objectAtIndex:(i + <span class="hljs-number">1</span>) % <span class="hljs-number">7</span>] <span class="hljs-built_in">CGPointValue</span>];<br>        <span class="hljs-built_in">CGContextAddArcToPoint</span>(ctx, pointA.x, pointA.y, pointB.x, pointB.y, radius);<br>        i = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">CGContextClosePath</span>(ctx);<br>    <span class="hljs-built_in">CGPathRef</span> path = <span class="hljs-built_in">CGContextCopyPath</span>(ctx);<br>    <span class="hljs-built_in">CGContextRelease</span>(ctx);<br>    <span class="hljs-keyword">return</span> path;<br>&#125;<br><br>- (<span class="hljs-built_in">CAShapeLayer</span> *)layer&#123;<br>    <span class="hljs-built_in">CAShapeLayer</span> *layer = [<span class="hljs-built_in">CAShapeLayer</span> layer];<br>    layer.path = [<span class="hljs-keyword">self</span> bubblePath];<br>    <span class="hljs-keyword">return</span> layer;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Setup</span><br>- (<span class="hljs-keyword">void</span>)setDefaultProperty &#123;<br>    _cornerRadius   = CORNER_RADIUS;<br>    _arrowWidth     = ARROW_WIDTH;<br>    _arrowHeight    = ARROW_HEIGHT;<br>    _arrowDirection = ARROW_DIRECTION;<br>    _arrowPosition  = ARROW_POSITION;<br>    _arrowRadius    = ARROW_RADIUS;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Init</span><br>- (<span class="hljs-keyword">instancetype</span>)initWithSize:(<span class="hljs-built_in">CGSize</span>)size &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init]) &#123;<br>        [<span class="hljs-keyword">self</span> setDefaultProperty];<br>        _size = size;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h2 id="单元格默认样式"><a href="#单元格默认样式" class="headerlink" title="单元格默认样式"></a>单元格默认样式</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, WDPopMenuType) &#123;<br>    WDPopMenuTypeNormal,<br>    WDPopMenuTypeOnlyTitle,<br>    WDPopMenuTypeOnlyIcon,<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDPopMenuCell</span> : <span class="hljs-title">UITableViewCell</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIImageView</span> *iconImageView;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *titleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) WDPopMenuType showType;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDPopMenuCell</span></span><br><br>- (<span class="hljs-keyword">instancetype</span>)initWithStyle:(<span class="hljs-built_in">UITableViewCellStyle</span>)style reuseIdentifier:(<span class="hljs-built_in">NSString</span> *)reuseIdentifier &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        [<span class="hljs-keyword">self</span> setupSubViewsProperties];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setupSubViewsProperties &#123;<br>    <span class="hljs-keyword">self</span>.iconImageView                                           = [[<span class="hljs-built_in">UIImageView</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.iconImageView.contentMode                               = <span class="hljs-built_in">UIViewContentModeScaleAspectFit</span>;<br>    <span class="hljs-keyword">self</span>.iconImageView.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>    [<span class="hljs-keyword">self</span>.contentView addSubview:<span class="hljs-keyword">self</span>.iconImageView];<br><br>    <span class="hljs-keyword">self</span>.titleLabel                                              = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.titleLabel.font                                         = [<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">15</span>];<br>    <span class="hljs-keyword">self</span>.titleLabel.textColor                                    = [<span class="hljs-built_in">UIColor</span> blackColor];<br>    <span class="hljs-keyword">self</span>.titleLabel.translatesAutoresizingMaskIntoConstraints    = <span class="hljs-literal">NO</span>;<br>    [<span class="hljs-keyword">self</span>.contentView addSubview:<span class="hljs-keyword">self</span>.titleLabel];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setShowType:(WDPopMenuType)showType &#123;<br>    _showType = showType;<br>    [<span class="hljs-keyword">self</span> setupSubViewsConstraint];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setTitleLabel:(<span class="hljs-built_in">UILabel</span> *)titleLabel &#123;<br>    _titleLabel = titleLabel;<br>    titleLabel.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setupSubViewsConstraint &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.showType == WDPopMenuTypeNormal) &#123;<br>        <span class="hljs-keyword">self</span>.titleLabel.textAlignment = <span class="hljs-built_in">NSTextAlignmentLeft</span>;<br>        <br>        [<span class="hljs-keyword">self</span>.contentView addConstraints:@[<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.iconImageView attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">15</span>],<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.iconImageView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>                                           ]];<br>        <br>        [<span class="hljs-keyword">self</span>.contentView addConstraints:@[<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.iconImageView attribute:<span class="hljs-built_in">NSLayoutAttributeTrailing</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">10</span>],<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>                                           ]];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.showType == WDPopMenuTypeOnlyTitle)&#123;<br>        <span class="hljs-keyword">self</span>.titleLabel.textAlignment = <span class="hljs-built_in">NSTextAlignmentCenter</span>;<br>        [<span class="hljs-keyword">self</span>.contentView addConstraints:@[<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>                                           ]];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-keyword">self</span>.contentView addConstraints:@[<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.iconImageView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>                                           [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:<span class="hljs-keyword">self</span>.iconImageView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span>.contentView attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>                                           ]];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h2 id="接口代码"><a href="#接口代码" class="headerlink" title="接口代码"></a>接口代码</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDPopMenu</span> : <span class="hljs-title">UIView</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *titles;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *iconImageNames;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 仅显示图标 + 默认样式</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param iconImageNames 图标数组</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)iconImageNames<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 仅显示图标 + 默认样式</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param iconImageNames 图标数组</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param isNeedSeparatorLine 是否显示分割线</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)iconImageNames<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 仅显示标题 + 默认样式</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param titles 标题数组</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithTitles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titles<br>               originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>         selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 仅显示标题 + 默认样式</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param titles 标题数组</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param isNeedSeparatorLine 是否显示分割线</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithTitles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titles<br>               originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>            needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>         selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 显示文字和图标 + 默认样式</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param iconImageNames 图标数组</span><br><span class="hljs-comment"> @param titles 标题数组</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 显示文字和图标 + 默认样式</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param iconImageNames 图标数组</span><br><span class="hljs-comment"> @param titles 标题数组</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param isNeedSeparatorLine 是否显示分割线</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 可选显示图标、标题</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param iconImageNames 图片数组 可以为空</span><br><span class="hljs-comment"> @param titles 标题数组 可以为空</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param height 单个item高度 默认为45</span><br><span class="hljs-comment"> @param width 显示View的高度 默认为屏幕宽度的一半</span><br><span class="hljs-comment"> @param color 显示View的背景颜色</span><br><span class="hljs-comment"> @param isNeedSeparatorLine 是否显示分割线</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                         heightOfItem:(<span class="hljs-built_in">CGFloat</span>)height<br>                          widthOfView:(<span class="hljs-built_in">CGFloat</span>)width<br>                backgroundColorOfView:(<span class="hljs-built_in">UIColor</span> *)color<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 可选显示图标、标题</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param iconImageNames 图片数组 可以为空</span><br><span class="hljs-comment"> @param titles 标题数组 可以为空</span><br><span class="hljs-comment"> @param position 初始位置</span><br><span class="hljs-comment"> @param height 单个item高度 默认为45</span><br><span class="hljs-comment"> @param width 显示View的高度 默认为屏幕宽度的一半</span><br><span class="hljs-comment"> @param color 显示View的背景颜色</span><br><span class="hljs-comment"> @param isNeedSeparatorLine 是否显示分割线</span><br><span class="hljs-comment"> @param titleLabel 自定义Item的Label样式</span><br><span class="hljs-comment"> @param complete 点击回调</span><br><span class="hljs-comment"> */</span><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                         heightOfItem:(<span class="hljs-built_in">CGFloat</span>)height<br>                          widthOfView:(<span class="hljs-built_in">CGFloat</span>)width<br>                backgroundColorOfView:(<span class="hljs-built_in">UIColor</span> *)color<br>                     titleLabelOfItem:(<span class="hljs-built_in">UILabel</span> * _Nullable)titleLabel<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WD_SCREEN_WIDTH ([[UIScreen mainScreen] bounds].size.width)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WD_SCREEN_HEIGHT ([[UIScreen mainScreen] bounds].size.height)</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDPopMenu</span> () &lt;<span class="hljs-title">UITableViewDataSource</span>, <span class="hljs-title">UITableViewDelegate</span>&gt;</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-keyword">void</span> (^selectedItemComplete)(<span class="hljs-built_in">NSInteger</span> currentIndex);<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *backgroundView;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UITableView</span> *tableView;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *titleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> viewWidth;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> itemHeight;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGPoint</span> beginPosition;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIColor</span> *cellColor;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *titles;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *iconImageNames;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDPopMenu</span></span><br><br>- (<span class="hljs-keyword">instancetype</span>)init &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        [<span class="hljs-keyword">self</span> addSubview:<span class="hljs-keyword">self</span>.tableView];<br>        <span class="hljs-built_in">UITapGestureRecognizer</span> *tap = [[<span class="hljs-built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(backgroundTappedTarget:)];<br>        [<span class="hljs-keyword">self</span>.backgroundView addGestureRecognizer:tap];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)iconImageNames<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithIconImageNames:iconImageNames<br>                         originPosition:position<br>                      needSeparatorLine:<span class="hljs-literal">YES</span><br>                   selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)iconImageNames<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithIconImageNames:iconImageNames<br>                                 titles:<span class="hljs-literal">nil</span><br>                         originPosition:position<br>                      needSeparatorLine:isNeedSeparatorLine<br>                   selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithTitles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titles<br>               originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>         selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithTitles:titles<br>                 originPosition:position<br>              needSeparatorLine:<span class="hljs-literal">YES</span><br>           selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithTitles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titles<br>               originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>            needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>         selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithIconImageNames:<span class="hljs-literal">nil</span><br>                                 titles:titles<br>                         originPosition:position<br>                      needSeparatorLine:isNeedSeparatorLine<br>                   selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithIconImageNames:iconImageNames<br>                                 titles:titles<br>                         originPosition:position<br>                      needSeparatorLine:<span class="hljs-literal">YES</span><br>                   selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithIconImageNames:iconImageNames<br>                                 titles:titles<br>                         originPosition:position<br>                           heightOfItem:<span class="hljs-number">0</span><br>                            widthOfView:<span class="hljs-number">0</span><br>                  backgroundColorOfView:[<span class="hljs-built_in">UIColor</span> whiteColor]<br>                      needSeparatorLine:isNeedSeparatorLine<br>                   selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                         heightOfItem:(<span class="hljs-built_in">CGFloat</span>)height<br>                          widthOfView:(<span class="hljs-built_in">CGFloat</span>)width<br>                backgroundColorOfView:(<span class="hljs-built_in">UIColor</span> *)color<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    [<span class="hljs-keyword">self</span> showPopMenuWithIconImageNames:iconImageNames<br>                                 titles:titles<br>                         originPosition:position<br>                           heightOfItem:height<br>                            widthOfView:width<br>                  backgroundColorOfView:color<br>                       titleLabelOfItem:<span class="hljs-literal">nil</span><br>                      needSeparatorLine:isNeedSeparatorLine<br>                   selectedItemComplete:complete];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showPopMenuWithIconImageNames:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)iconImageNames<br>                               titles:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * _Nullable)titles<br>                       originPosition:(<span class="hljs-built_in">CGPoint</span>)position<br>                         heightOfItem:(<span class="hljs-built_in">CGFloat</span>)height<br>                          widthOfView:(<span class="hljs-built_in">CGFloat</span>)width<br>                backgroundColorOfView:(<span class="hljs-built_in">UIColor</span> *)color<br>                     titleLabelOfItem:(<span class="hljs-built_in">UILabel</span> * _Nullable)titleLabel<br>                    needSeparatorLine:(<span class="hljs-built_in">BOOL</span>)isNeedSeparatorLine<br>                 selectedItemComplete:(<span class="hljs-keyword">void</span>(^)(<span class="hljs-built_in">NSInteger</span> currentIndex))complete &#123;<br>    <br>    WDPopMenu *v                = [[WDPopMenu alloc] init];<br>    v.iconImageNames            = iconImageNames;<br>    v.titles                    = titles;<br>    v.beginPosition             = position;<br>    v.itemHeight                = height == <span class="hljs-number">0</span> ? <span class="hljs-number">45</span> : height;<br>    v.viewWidth                 = width == <span class="hljs-number">0</span> ? [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds].size.width / <span class="hljs-number">2</span> : width;<br>    v.tableView.backgroundColor = color;<br>    v.cellColor                 = color;<br>    v.titleLabel                = titleLabel;<br>    v.selectedItemComplete      = complete;<br>    v.tableView.rowHeight       = v.itemHeight;<br>    <span class="hljs-keyword">if</span> (isNeedSeparatorLine) &#123;<br>        v.tableView.separatorStyle  = <span class="hljs-built_in">UITableViewCellSeparatorStyleSingleLine</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        v.tableView.separatorStyle  = <span class="hljs-built_in">UITableViewCellSeparatorStyleNone</span>;<br>    &#125;<br>    [v.tableView reloadData];<br>    [v showView];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)backgroundTappedTarget:(<span class="hljs-keyword">id</span>)sender &#123;<br>    [<span class="hljs-keyword">self</span> hidenView];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)showView &#123;<br>    [[[<span class="hljs-built_in">UIApplication</span> sharedApplication] keyWindow] addSubview:<span class="hljs-keyword">self</span>.backgroundView];<br>    [[[<span class="hljs-built_in">UIApplication</span> sharedApplication] keyWindow] addSubview:<span class="hljs-keyword">self</span>];<br>    [<span class="hljs-keyword">self</span> setupViewAndArrowShape];<br>    [<span class="hljs-keyword">self</span> showAnimation];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setupViewAndArrowShape &#123;<br>    <span class="hljs-built_in">CGRect</span> toFrame = <span class="hljs-built_in">CGRectZero</span>;<br>    toFrame.size.width = <span class="hljs-keyword">self</span>.viewWidth;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.iconImageNames.count == <span class="hljs-number">0</span> || <span class="hljs-keyword">self</span>.iconImageNames == <span class="hljs-literal">nil</span>) &#123;<br>        toFrame.size.height = <span class="hljs-keyword">self</span>.itemHeight * <span class="hljs-keyword">self</span>.titles.count + <span class="hljs-number">15</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.titles == <span class="hljs-literal">nil</span> || <span class="hljs-keyword">self</span>.titles.count == <span class="hljs-number">0</span>) &#123;<br>        toFrame.size.height = <span class="hljs-keyword">self</span>.itemHeight * <span class="hljs-keyword">self</span>.iconImageNames.count + <span class="hljs-number">15</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        toFrame.size.height = <span class="hljs-keyword">self</span>.itemHeight * <span class="hljs-keyword">self</span>.titles.count + <span class="hljs-number">15</span>;<br>    &#125;<br>    <br>    WudanLayer *bbLayer = [[WudanLayer alloc] initWithSize:toFrame.size];<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.beginPosition.x + <span class="hljs-keyword">self</span>.viewWidth / <span class="hljs-number">2</span> &gt; WD_SCREEN_WIDTH) &#123;<br>        toFrame.origin.x = WD_SCREEN_WIDTH - <span class="hljs-number">10</span> - <span class="hljs-keyword">self</span>.viewWidth;<br>        bbLayer.arrowDirection = ArrowDirectionTop;<br>        bbLayer.arrowPosition = (<span class="hljs-keyword">self</span>.beginPosition.x - toFrame.origin.x + <span class="hljs-number">15</span>) / <span class="hljs-keyword">self</span>.viewWidth;<br>        <span class="hljs-keyword">self</span>.layer.anchorPoint = <span class="hljs-built_in">CGPointMake</span>(bbLayer.arrowPosition, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.beginPosition.x - <span class="hljs-keyword">self</span>.viewWidth / <span class="hljs-number">2</span> &lt; <span class="hljs-number">0</span>)&#123;<br>        toFrame.origin.x = <span class="hljs-number">10</span>;<br>        bbLayer.arrowDirection = ArrowDirectionTop;<br>        bbLayer.arrowPosition = (<span class="hljs-keyword">self</span>.beginPosition.x - toFrame.origin.x - <span class="hljs-number">15</span>) / <span class="hljs-keyword">self</span>.viewWidth;<br>        <span class="hljs-keyword">self</span>.layer.anchorPoint = <span class="hljs-built_in">CGPointMake</span>(bbLayer.arrowPosition, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        toFrame.origin.x = <span class="hljs-keyword">self</span>.beginPosition.x - <span class="hljs-keyword">self</span>.viewWidth / <span class="hljs-number">2</span>;<br>        bbLayer.arrowDirection = ArrowDirectionTop;<br>        bbLayer.arrowPosition = (<span class="hljs-keyword">self</span>.beginPosition.x - toFrame.origin.x) / <span class="hljs-keyword">self</span>.viewWidth;<br>        <span class="hljs-keyword">self</span>.layer.anchorPoint = <span class="hljs-built_in">CGPointMake</span>(bbLayer.arrowPosition, <span class="hljs-number">0</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.beginPosition.y + toFrame.size.height &gt; WD_SCREEN_HEIGHT) &#123;<br>        toFrame.origin.y = <span class="hljs-keyword">self</span>.beginPosition.y - toFrame.size.height - <span class="hljs-number">15</span>;<br>        bbLayer.arrowDirection = ArrowDirectionBottom;<br>        <span class="hljs-keyword">self</span>.layer.anchorPoint = <span class="hljs-built_in">CGPointMake</span>(bbLayer.arrowPosition, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        toFrame.origin.y = <span class="hljs-keyword">self</span>.beginPosition.y + <span class="hljs-number">15</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">self</span>.tableView.frame = <span class="hljs-built_in">CGRectZero</span>;<br>    <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-keyword">self</span>.beginPosition.x, <span class="hljs-keyword">self</span>.beginPosition.y, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">self</span>.alpha = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">self</span>.frame = toFrame;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.beginPosition.y + toFrame.size.height &gt; WD_SCREEN_HEIGHT) &#123;<br>        <span class="hljs-keyword">self</span>.tableView.contentInset = <span class="hljs-built_in">UIEdgeInsetsZero</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">self</span>.tableView.contentInset = <span class="hljs-built_in">UIEdgeInsetsMake</span>(<span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">self</span>.tableView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, toFrame.size.width, toFrame.size.height);<br>    <br>    bbLayer.cornerRadius = <span class="hljs-number">8</span>;<br>    bbLayer.arrowHeight = <span class="hljs-number">15</span>;<br>    bbLayer.arrowWidth = <span class="hljs-number">30</span>;<br>    bbLayer.arrowRadius = <span class="hljs-number">0</span>;<br>    [<span class="hljs-keyword">self</span>.layer setMask:[bbLayer layer]];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)showAnimation &#123;<br>    <span class="hljs-keyword">self</span>.layer.affineTransform = <span class="hljs-built_in">CGAffineTransformMakeScale</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>);<br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.35</span> animations:^&#123;<br>        <span class="hljs-keyword">self</span>.backgroundView.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0.1</span>];<br>        <span class="hljs-keyword">self</span>.alpha = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">self</span>.layer.affineTransform = <span class="hljs-built_in">CGAffineTransformIdentity</span>;<br>    &#125;];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)hidenView &#123;<br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.35</span> animations:^&#123;<br>        <span class="hljs-keyword">self</span>.alpha = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">self</span>.layer.affineTransform = <span class="hljs-built_in">CGAffineTransformMakeScale</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>);<br>        <span class="hljs-keyword">self</span>.backgroundView.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>    &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>        [<span class="hljs-keyword">self</span> removeFromSuperview];<br>        <span class="hljs-keyword">self</span>.layer.affineTransform = <span class="hljs-built_in">CGAffineTransformIdentity</span>;<br>        [<span class="hljs-keyword">self</span>.backgroundView removeFromSuperview];<br>    &#125;];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - UITableView DataSource Method</span><br>- (<span class="hljs-built_in">NSInteger</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="hljs-built_in">NSInteger</span>)section &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.titles.count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.titles.count;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.iconImageNames.count &gt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.iconImageNames.count;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>- (<span class="hljs-built_in">UITableViewCell</span> *)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath &#123;<br>    WDPopMenuCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="hljs-string">@&quot;WDPopMenuCell&quot;</span>];<br>    <span class="hljs-keyword">if</span> (!cell) &#123;<br>        cell = [[WDPopMenuCell alloc] initWithStyle:<span class="hljs-built_in">UITableViewCellStyleDefault</span> reuseIdentifier:<span class="hljs-string">@&quot;WDPopMenuCell&quot;</span>];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.iconImageNames.count == <span class="hljs-number">0</span> || <span class="hljs-keyword">self</span>.iconImageNames == <span class="hljs-literal">nil</span>) &#123;<br>        cell.showType = WDPopMenuTypeOnlyTitle;<br>        cell.titleLabel.text = <span class="hljs-keyword">self</span>.titles[indexPath.row];<br>        <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.titles == <span class="hljs-literal">nil</span> || <span class="hljs-keyword">self</span>.titles.count == <span class="hljs-number">0</span>) &#123;<br>        cell.showType = WDPopMenuTypeOnlyIcon;<br>        cell.iconImageView.image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-keyword">self</span>.iconImageNames[indexPath.row]];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cell.showType = WDPopMenuTypeNormal;<br>        cell.iconImageView.image = [<span class="hljs-built_in">UIImage</span> imageNamed:<span class="hljs-keyword">self</span>.iconImageNames[indexPath.row]];<br>        cell.titleLabel.text = <span class="hljs-keyword">self</span>.titles[indexPath.row];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.titleLabel) &#123;<br>        cell.titleLabel.textColor = <span class="hljs-keyword">self</span>.titleLabel.textColor;<br>        cell.titleLabel.textAlignment = <span class="hljs-keyword">self</span>.titleLabel.textAlignment;<br>        cell.titleLabel.font = <span class="hljs-keyword">self</span>.titleLabel.font;<br>    &#125;<br>    <br>    cell.contentView.backgroundColor = <span class="hljs-keyword">self</span>.cellColor;<br>    <br>    <span class="hljs-keyword">if</span> (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - <span class="hljs-number">1</span>) &#123;<br>        cell.separatorInset = <span class="hljs-built_in">UIEdgeInsetsMake</span>(<span class="hljs-number">0</span>, <span class="hljs-keyword">self</span>.bounds.size.width, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        cell.separatorInset = <span class="hljs-built_in">UIEdgeInsetsMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cell;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - UITableView Delegate Method</span><br>- (<span class="hljs-keyword">void</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath &#123;<br>    [tableView deselectRowAtIndexPath:indexPath animated:<span class="hljs-literal">YES</span>];<br>    [<span class="hljs-keyword">self</span> hidenView];<br>    <span class="hljs-keyword">self</span>.selectedItemComplete(indexPath.row);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Setter</span><br>- (<span class="hljs-built_in">UITableView</span> *)tableView &#123;<br>    <span class="hljs-keyword">if</span> (!_tableView) &#123;<br>        _tableView                 = [[<span class="hljs-built_in">UITableView</span> alloc] initWithFrame:<span class="hljs-built_in">CGRectZero</span> style:<span class="hljs-built_in">UITableViewStylePlain</span>];<br>        _tableView.tableFooterView = [[<span class="hljs-built_in">UIView</span> alloc] init];<br>        _tableView.dataSource      = <span class="hljs-keyword">self</span>;<br>        _tableView.delegate        = <span class="hljs-keyword">self</span>;<br>        _tableView.scrollEnabled   = <span class="hljs-literal">NO</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _tableView;<br>&#125;<br><br>- (<span class="hljs-built_in">UIView</span> *)backgroundView &#123;<br>    <span class="hljs-keyword">if</span> (!_backgroundView) &#123;<br>        _backgroundView = [[<span class="hljs-built_in">UIView</span> alloc] initWithFrame:[[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> _backgroundView;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h2 id="实现效果图"><a href="#实现效果图" class="headerlink" title="实现效果图"></a>实现效果图</h2><p><img src="https://upload-images.jianshu.io/upload_images/3334769-31da61cc372f13af.gif?imageMogr2/auto-orient/strip" alt="效果图"></p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件：自定义分类下拉</title>
    <link href="/2019/11/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E7%B1%BB%E4%B8%8B%E6%8B%89/"/>
    <url>/2019/11/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E7%B1%BB%E4%B8%8B%E6%8B%89/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-3e146d3a49636e88.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宝儿姐镇楼"></p><p>最近自由时间有点多，就开始撸控件。这个是我们常用的一个下拉分类控件，看了很多别人写的，都是用TableView或者CollectionView整合在一起的感觉自定义性没有那么强，所以就尝试用把TableView和CollectionView替换成UIViewController。其他废话不多说了。</p><h4 id="1、-接口文件"><a href="#1、-接口文件" class="headerlink" title="1、 接口文件"></a>1、 接口文件</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">UIKIT_EXTERN</span> <span class="hljs-built_in">NSString</span> *lzDropViewNotification;<br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@class</span> <span class="hljs-title">LZDropView</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">LZDropViewDataSource</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span><br><br><span class="hljs-keyword">@required</span><br><br><span class="hljs-comment">/** Height corresponding to controller display */</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSNumber</span> *&gt; *)setupCategoryControllerHeightInDropView:(LZDropView *)dropView;<br><span class="hljs-comment">/** Title corresponding controller array */</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">UIViewController</span> *&gt; *)setupCategoryControllerInDropView:(LZDropView *)dropView;<br><span class="hljs-comment">/** Default display of Title Array */</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)setupCategoryTitleNameInDropView:(LZDropView *)dropView;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">LZDropViewDelegate</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span><br><br><span class="hljs-comment">/** Click the column and select the information. */</span><br>- (<span class="hljs-keyword">void</span>)dropView:(LZDropView *)dropView didSelectAtColumn:(<span class="hljs-built_in">NSInteger</span>)column info:(<span class="hljs-built_in">NSString</span> *)info;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LZDropView</span> : <span class="hljs-title">UIView</span></span><br><span class="hljs-comment">/** Simple page configuration */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">id</span> &lt;LZDropViewDataSource&gt; dataSorce;<br><span class="hljs-comment">/** Click proxy event&lt;##&gt; */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">id</span> &lt;LZDropViewDelegate&gt; delegate;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><h4 id="2、-实现文件"><a href="#2、-实现文件" class="headerlink" title="2、 实现文件"></a>2、 实现文件</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;LZDropView.h&quot;</span></span><br><br><span class="hljs-built_in">NSString</span> *lzDropViewNotification = <span class="hljs-string">@&quot;nitification&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LZDropView</span> ()</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">UIViewController</span> *&gt; *controllerArray;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *titleArray;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIButton</span> *containerView;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSNumber</span> *&gt; *controllerHeightArray;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSMutableArray</span>&lt;<span class="hljs-built_in">UIButton</span> *&gt; *buttonArray;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">LZDropView</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Release memory</span><br><br>- (<span class="hljs-keyword">void</span>)dealloc &#123;<br>    [[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="hljs-keyword">self</span>];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Initialization</span><br><br>- (<span class="hljs-keyword">instancetype</span>)init &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        [[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(notificationAction:) name:lzDropViewNotification object:<span class="hljs-literal">nil</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Draw the page</span><br><br>- (<span class="hljs-keyword">void</span>)setupTitleButton:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)array &#123;<br>    <span class="hljs-built_in">CGFloat</span> width = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width / array.count;<br>    <span class="hljs-keyword">self</span>.buttonArray = [<span class="hljs-built_in">NSMutableArray</span> array];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSString</span> *name <span class="hljs-keyword">in</span> array) &#123;<br>        <span class="hljs-built_in">NSInteger</span> index = [array indexOfObject:name];<br>        <span class="hljs-built_in">UIButton</span> *button = [<span class="hljs-built_in">UIButton</span> buttonWithType:<span class="hljs-built_in">UIButtonTypeCustom</span>];<br>        button.titleLabel.font = [<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">15</span>];<br>        [button setTitle:[<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@ ▼&quot;</span>, name] forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>        [button setTitle:[<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@ ▲&quot;</span>, name] forState:<span class="hljs-built_in">UIControlStateSelected</span>];<br>        [button setTitleColor:<span class="hljs-built_in">UIColor</span>.grayColor forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>        [button setTitleColor:<span class="hljs-built_in">UIColor</span>.orangeColor forState:<span class="hljs-built_in">UIControlStateSelected</span>];<br>        button.frame = <span class="hljs-built_in">CGRectMake</span>(width * index, <span class="hljs-number">0</span>, width, <span class="hljs-number">45</span>);<br>        button.tag = index + <span class="hljs-number">1000</span>;<br>        [button addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonTouched:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>        [<span class="hljs-keyword">self</span> addSubview:button];<br>        [<span class="hljs-keyword">self</span>.buttonArray addObject:button];<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Button click event</span><br><br>- (<span class="hljs-keyword">void</span>)buttonTouched:(<span class="hljs-built_in">UIButton</span> *)sender &#123;<br>    <span class="hljs-keyword">if</span> (sender.selected) &#123;<br>        [<span class="hljs-keyword">self</span> closeControllerView];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-keyword">self</span> openControllerViewWithButton:sender];<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)backButtonTouched:(<span class="hljs-built_in">UIButton</span> *)sender &#123;<br>    [<span class="hljs-keyword">self</span> closeControllerView];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Notification event</span><br><br>- (<span class="hljs-keyword">void</span>)notificationAction:(<span class="hljs-built_in">NSNotification</span> *)notification &#123;    <br>    <span class="hljs-keyword">if</span> (![<span class="hljs-keyword">self</span>.controllerArray containsObject:notification.object]) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">NSInteger</span> index = [<span class="hljs-keyword">self</span>.controllerArray indexOfObject:notification.object];<br>    <span class="hljs-built_in">UIButton</span> *button = <span class="hljs-keyword">self</span>.buttonArray[index];<br>    [button setTitle:[<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%@ ▼&quot;</span>, notification.userInfo.allValues.firstObject] forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(dropView:didSelectAtColumn:info:)]) &#123;<br>        [<span class="hljs-keyword">self</span>.delegate dropView:<span class="hljs-keyword">self</span> didSelectAtColumn:index info:notification.userInfo.allValues.firstObject];<br>    &#125;<br>    <br>    [<span class="hljs-keyword">self</span> closeControllerView];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Close all controllers.</span><br><br>- (<span class="hljs-keyword">void</span>)closeControllerView &#123;<br>    <br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.8</span> animations:^&#123;<br>        <span class="hljs-keyword">self</span>.containerView.alpha = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">self</span>.containerView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">CGRectGetMaxY</span>(<span class="hljs-keyword">self</span>.frame), <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>);<br>    &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>        [<span class="hljs-keyword">self</span>.containerView removeFromSuperview];<br>    &#125;];<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">UIButton</span> *button <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.buttonArray) &#123;<br>        button.selected = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Open the corresponding controller.</span><br><br>- (<span class="hljs-keyword">void</span>)openControllerViewWithButton:(<span class="hljs-built_in">UIButton</span> *)sender &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">UIButton</span> *button <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.buttonArray) &#123;<br>        button.selected = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">self</span>.containerView.alpha = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">UIView</span> *view <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.containerView.subviews) &#123;<br>        [view removeFromSuperview];<br>    &#125;<br>    <br>    <span class="hljs-built_in">UIViewController</span> *vc = <span class="hljs-keyword">self</span>.controllerArray[sender.tag - <span class="hljs-number">1000</span>];<br>    <span class="hljs-keyword">double</span> vcHeight = [<span class="hljs-keyword">self</span>.controllerHeightArray[sender.tag - <span class="hljs-number">1000</span>] doubleValue];<br>    <br>    <span class="hljs-keyword">self</span>.containerView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">CGRectGetMaxY</span>(<span class="hljs-keyword">self</span>.frame), <span class="hljs-keyword">self</span>.frame.size.width, <span class="hljs-number">0</span>);<br>    vc.view.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>);<br>    [<span class="hljs-keyword">self</span>.superview addSubview:<span class="hljs-keyword">self</span>.containerView];<br>    [<span class="hljs-keyword">self</span>.containerView addSubview:vc.view];<br>    <br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.6</span> animations:^&#123;<br>        <span class="hljs-keyword">self</span>.containerView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">CGRectGetMaxY</span>(<span class="hljs-keyword">self</span>.frame), <span class="hljs-keyword">self</span>.frame.size.width, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.height);<br>        vc.view.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, vcHeight);<br>    &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>        <br>    &#125;];<br>    sender.selected = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Getter</span><br><br>- (<span class="hljs-built_in">UIView</span> *)containerView &#123;<br>    <span class="hljs-keyword">if</span> (!_containerView) &#123;<br>        _containerView = [[<span class="hljs-built_in">UIButton</span> alloc] init];<br>        _containerView.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0.1</span>];<br>        [_containerView addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(backButtonTouched:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> _containerView;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Setter</span><br><br>- (<span class="hljs-keyword">void</span>)setDataSorce:(<span class="hljs-keyword">id</span>&lt;LZDropViewDataSource&gt;)dataSorce &#123;<br>    _dataSorce = dataSorce;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.dataSorce &amp;&amp; [<span class="hljs-keyword">self</span>.dataSorce respondsToSelector:<span class="hljs-keyword">@selector</span>(setupCategoryControllerInDropView:)])&#123;<br>        <span class="hljs-keyword">self</span>.controllerArray = [<span class="hljs-keyword">self</span>.dataSorce setupCategoryControllerInDropView:<span class="hljs-keyword">self</span>];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.dataSorce &amp;&amp; [<span class="hljs-keyword">self</span>.dataSorce respondsToSelector:<span class="hljs-keyword">@selector</span>(setupCategoryTitleNameInDropView:)])&#123;<br>        <span class="hljs-keyword">self</span>.titleArray = [<span class="hljs-keyword">self</span>.dataSorce setupCategoryTitleNameInDropView:<span class="hljs-keyword">self</span>];<br>        [<span class="hljs-keyword">self</span> setupTitleButton:<span class="hljs-keyword">self</span>.titleArray];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.dataSorce &amp;&amp; [<span class="hljs-keyword">self</span>.dataSorce respondsToSelector:<span class="hljs-keyword">@selector</span>(setupCategoryControllerHeightInDropView:)]) &#123;<br>        <span class="hljs-keyword">self</span>.controllerHeightArray = [<span class="hljs-keyword">self</span>.dataSorce setupCategoryControllerHeightInDropView:<span class="hljs-keyword">self</span>];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.controllerArray.count != <span class="hljs-keyword">self</span>.titleArray.count ||<br>        <span class="hljs-keyword">self</span>.controllerArray.count != <span class="hljs-keyword">self</span>.controllerHeightArray.count) &#123;<br>        <span class="hljs-keyword">@throw</span> [<span class="hljs-built_in">NSException</span> exceptionWithName:<span class="hljs-built_in">NSStringFromClass</span>([<span class="hljs-keyword">self</span> <span class="hljs-keyword">class</span>]) reason:<span class="hljs-string">@&quot;The number of corresponding arrays is inconsistent.&quot;</span> userInfo:<span class="hljs-literal">nil</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p> 1.遵循协议</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;LZDropViewDataSource, LZDropViewDelegate&gt;</span><br></code></pre></td></tr></table></figure><p>2.初始化</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">LZDropView *<span class="hljs-built_in">view</span>     = [[LZDropView alloc] init];<br>    <span class="hljs-built_in">view</span>.dataSorce       = self;<br>    <span class="hljs-built_in">view</span>.delegate        = self;<br>    <span class="hljs-built_in">view</span>.backgroundColor = UIColor.whiteColor;<br>    <span class="hljs-built_in">view</span>.frame           = CGRectMake(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, UIScreen.mainScreen.bounds.size.<span class="hljs-built_in">width</span>, <span class="hljs-number">45</span>);<br>    [self.<span class="hljs-built_in">view</span> addSubview:<span class="hljs-built_in">view</span>];<br></code></pre></td></tr></table></figure><ol start="3"><li>实现代理和数据源<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift">#pragma mark <span class="hljs-operator">-</span> <span class="hljs-type">LZDropViewDataSource</span><br><br><span class="hljs-operator">-</span> (<span class="hljs-type">NSArray</span>&lt;<span class="hljs-type">UIViewController</span> *&gt; <span class="hljs-operator">*</span>)setupCategoryControllerInDropView:(<span class="hljs-type">LZDropView</span> <span class="hljs-operator">*</span>)dropView &#123;<br>    <span class="hljs-keyword">return</span> @[[[<span class="hljs-type">TableViewController</span> alloc] <span class="hljs-keyword">init</span>],<br>             [[<span class="hljs-type">TableViewController</span> alloc] <span class="hljs-keyword">init</span>],<br>             [[<span class="hljs-type">TableViewController</span> alloc] <span class="hljs-keyword">init</span>],<br>             [[<span class="hljs-type">TableViewController</span> alloc] <span class="hljs-keyword">init</span>]];<br>&#125;<br><br><span class="hljs-operator">-</span> (<span class="hljs-type">NSArray</span>&lt;<span class="hljs-type">NSString</span> *&gt; <span class="hljs-operator">*</span>)setupCategoryTitleNameInDropView:(<span class="hljs-type">LZDropView</span> <span class="hljs-operator">*</span>)dropView &#123;<br>    <span class="hljs-keyword">return</span> @[@<span class="hljs-string">&quot;全部&quot;</span>,<br>             @<span class="hljs-string">&quot;附近&quot;</span>,<br>             @<span class="hljs-string">&quot;只能排序&quot;</span>,<br>             @<span class="hljs-string">&quot;筛选&quot;</span>];<br>&#125;<br><br><span class="hljs-operator">-</span> (<span class="hljs-type">NSArray</span>&lt;<span class="hljs-type">NSNumber</span> *&gt; <span class="hljs-operator">*</span>)setupCategoryControllerHeightInDropView:(<span class="hljs-type">LZDropView</span> <span class="hljs-operator">*</span>)dropView &#123;<br>    <span class="hljs-keyword">return</span> @[[<span class="hljs-type">NSNumber</span> numberWithFloat:<span class="hljs-number">300</span>],<br>             [<span class="hljs-type">NSNumber</span> numberWithFloat:<span class="hljs-number">400</span>],<br>             [<span class="hljs-type">NSNumber</span> numberWithFloat:<span class="hljs-number">410</span>],<br>             [<span class="hljs-type">NSNumber</span> numberWithFloat:<span class="hljs-number">420</span>]];<br>&#125;<br><br>#pragma mark <span class="hljs-operator">-</span> <span class="hljs-type">LZDropViewDelegate</span><br><br><span class="hljs-operator">-</span> (void)dropView:(<span class="hljs-type">LZDropView</span> <span class="hljs-operator">*</span>)dropView didSelectAtColumn:(<span class="hljs-type">NSInteger</span>)column info:(<span class="hljs-type">NSString</span> <span class="hljs-operator">*</span>)info &#123;<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;%ld---%@&quot;</span>, column, info);<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>点击controller中的数据显示在按钮的标题中，这因为跨界面显示，我暂时没有想到好的办法，所以使用强大的通知传值。</li><li>记录选中状态，应该是控制器里面的操作，这里就没有实现<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[[NSNotificationCenter defaultCenter] postNotificationName:lzDropViewNotification object:self userInfo:@&#123;@<span class="hljs-string">&quot;key&quot;</span>:[NSString stringWithFormat:@<span class="hljs-string">&quot;第%ldcell&quot;</span>, indexPath.row]&#125;]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><img src="https://upload-images.jianshu.io/upload_images/3334769-9256553756983ba2.gif?imageMogr2/auto-orient/strip" alt="效果图"></li></ol><p>如果有什么不好如果建议的地方，请批评指正！</p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AVPlayer封装</title>
    <link href="/2019/11/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-AVPlayer%E5%B0%81%E8%A3%85/"/>
    <url>/2019/11/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-AVPlayer%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-066df343391a04f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><p>最近在写关于音视频播放的案例，所以就趁机会研究了一下AVPlayer的内容。我封装的目前只能播放网络音视频。还未添加缓存，以后找机会研究一下再更新。代码中提供了音视频的上一曲、下一曲、暂停、开始、停止、单曲播放、顺序播放、随机播放等功能。代码写的不好，仅供参考~</p><h3 id="代码接口文件"><a href="#代码接口文件" class="headerlink" title="代码接口文件"></a>代码接口文件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-comment">// 当前播放器的播放形式</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, MediaPlayType) &#123;<br>    MediaPlayTypeCycle,   <span class="hljs-comment">///&lt; 顺序</span><br>    MediaPlayTypeSingle,  <span class="hljs-comment">///&lt; 单曲循环</span><br>    MediaPlayTypeRandom   <span class="hljs-comment">///&lt; 随机播放</span><br>&#125;;<br><br><span class="hljs-comment">// 当前播放器的播放状态</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, MediaPlayStatus) &#123;<br>    MediaPlayStatusStop,        <span class="hljs-comment">///&lt; 停止播放</span><br>    MediaPlayStatusPause,       <span class="hljs-comment">///&lt; 暂停播放</span><br>    MediaPlayStatusPlaying      <span class="hljs-comment">///&lt; 正在播放</span><br>&#125;;<br><br><span class="hljs-comment">// 媒体加载状态</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, MediaLoadStatus) &#123;<br>    MediaLoadStatusReadyToPlay,  <span class="hljs-comment">///&lt; 准备播放</span><br>    MediaLoadStatusUnknown,      <span class="hljs-comment">///&lt; 未知</span><br>    MediaPlayStatusFailed        <span class="hljs-comment">///&lt; 失败</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">@class</span> <span class="hljs-title">MediaPlyerManager</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">MediaPlyerManagerDelegate</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span><br><span class="hljs-keyword">@optional</span><br><span class="hljs-comment">// 数据加载状态 根据状态进行播放或其他操作</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager playerItemStatus:(MediaLoadStatus)status;<br><span class="hljs-comment">// 缓冲进度</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager netBufferValue:(<span class="hljs-built_in">CGFloat</span>)value;<br><span class="hljs-comment">// 缓冲是否足够播放</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager bufferHasEnough:(<span class="hljs-built_in">BOOL</span>)enough;<br><span class="hljs-comment">// 当前播放的时间</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager currentPlayTime:(<span class="hljs-built_in">NSString</span> *)time currentPlayTimeValue:(<span class="hljs-built_in">CGFloat</span>)value;<br><span class="hljs-comment">// 播放总时间</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager mediaEndTime:(<span class="hljs-built_in">NSString</span> *)time mediaEndTimeValue:(<span class="hljs-built_in">CGFloat</span>)value;<br><span class="hljs-comment">// 播放结束</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayerCurrentMediaPlayFinish:(MediaPlyerManager *)playerManager;<br><span class="hljs-comment">// 播放状态</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager playeStatus:(MediaPlayStatus)status;<br><span class="hljs-comment">// 获取数据切换时获取正在播放的URL和当前的index</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager currentUrl:(<span class="hljs-built_in">NSString</span> *)url currentIndex:(<span class="hljs-built_in">NSInteger</span>)index;<br><span class="hljs-comment">// 为了配合手机后台播放 实时获取播放的进度，总的时间，当前的index&lt;通过index获取图片等信息&gt;</span><br>- (<span class="hljs-keyword">void</span>)MediaPlayer:(MediaPlyerManager *)playerManager currentProgressValue:(<span class="hljs-built_in">CGFloat</span>)value totalValue:(<span class="hljs-built_in">CGFloat</span>)totalValue currentIndex:(<span class="hljs-built_in">NSInteger</span>)index;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-keyword">typedef</span> MediaPlyerManager *(^playerCurrentTime)(<span class="hljs-built_in">NSString</span> *time);<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">MediaPlyerManager</span> : <span class="hljs-title">NSObject</span></span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">AVPlayer</span>                  *mediaPlayer;          <span class="hljs-comment">///&lt; 播放器</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">AVPlayerItem</span>              *meidaPlayerItem;      <span class="hljs-comment">///&lt; 播放器的CurrentItem</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSMutableArray</span>&lt;<span class="hljs-built_in">NSString</span>*&gt; *dataUrlArray;         <span class="hljs-comment">///&lt; 正在播放的列表数据</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readonly</span>) MediaPlayType              playType;             <span class="hljs-comment">///&lt; 当前播放类型</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readonly</span>) MediaPlayStatus            playStatus;           <span class="hljs-comment">///&lt; 当前播放状态</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSInteger</span>                  currentIndex;         <span class="hljs-comment">///&lt; 当前播放的索引</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">BOOL</span>                       isPlaying;            <span class="hljs-comment">///&lt; 是否在播放</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">CGFloat</span>                    curentPlayTimeValue;  <span class="hljs-comment">///&lt; 当前播放时间值</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSString</span>                    *curentPlayTime;       <span class="hljs-comment">///&lt; 当前播放时间</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">CGFloat</span>                    endPlayTimeValue;     <span class="hljs-comment">///&lt; 当前播放时间值</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSString</span>                    *endPlayTime;          <span class="hljs-comment">///&lt; 当前播放时间</span><br>+ (<span class="hljs-keyword">instancetype</span>)defaultManager;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 列表播放 ⚠️&lt;默认不自动播放&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param urls 文件路径数组</span><br><span class="hljs-comment"> @param delegate 回调代理</span><br><span class="hljs-comment"> @return MediaPlyerManager</span><br><span class="hljs-comment"> */</span><br>- (MediaPlyerManager *)playerWithUrls:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)urls actionWithDelegate:(<span class="hljs-keyword">id</span>&lt;MediaPlyerManagerDelegate&gt;)delegate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 单个音视频播放 ⚠️&lt;默认不自动播放&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param url 文件路径</span><br><span class="hljs-comment"> @param delegate 回调代理</span><br><span class="hljs-comment"> @return MediaPlyerManager</span><br><span class="hljs-comment"> */</span><br>- (MediaPlyerManager *)playerWithUrl:(<span class="hljs-built_in">NSString</span> *)url actionWithDelegate:(<span class="hljs-keyword">id</span>&lt;MediaPlyerManagerDelegate&gt;)delegate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    开始播放</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)play;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    暂停播放</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)pause;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    停止播放</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)stop;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    下一曲</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)next;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    上一曲</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)previous;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 指定进度开始播放</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param progress 进度百分比</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)setupPlayerSeekToProgress:(<span class="hljs-built_in">CGFloat</span>)progress;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 制定播放类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param type 类型</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)setupMediaPlayerType:(MediaPlayType)type;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 指定播放的index</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param index 索引</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)setupPlayerIndex:(<span class="hljs-built_in">NSInteger</span>)index;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 添加数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param files 文件数组</span><br><span class="hljs-comment"> @param index 索引</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)insertMediaFile:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)files atIndex:(<span class="hljs-built_in">NSInteger</span>)index;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    移除全部数据</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)removeAllFiles;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 移除索引中的单个数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param index 索引</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)removeObjectAtIndex:(<span class="hljs-built_in">NSInteger</span>)index;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 设置锁屏样式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param coverImage 专辑图片</span><br><span class="hljs-comment"> @param size 显示大小</span><br><span class="hljs-comment"> @param title 标题</span><br><span class="hljs-comment"> @param author 专辑作者</span><br><span class="hljs-comment"> @param album 专辑名称</span><br><span class="hljs-comment"> @param currentTime 当前播放时间</span><br><span class="hljs-comment"> @param duration 播放总时长</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)setupLockScreenPlayInfo:(<span class="hljs-built_in">UIImage</span> *)coverImage<br>                      imageSize:(<span class="hljs-built_in">CGSize</span>)size<br>                          title:(<span class="hljs-built_in">NSString</span> *)title<br>                         ahthor:(<span class="hljs-built_in">NSString</span> *)author<br>                         album:(<span class="hljs-built_in">NSString</span> *)album<br>                currentPlayTime:(<span class="hljs-built_in">CGFloat</span>)currentTime<br>                       duration:(<span class="hljs-built_in">CGFloat</span>)duration;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><h3 id="代码实现文件"><a href="#代码实现文件" class="headerlink" title="代码实现文件"></a>代码实现文件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;MediaPlyerManager.h&quot;</span></span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">MediaPlyerManager</span> ()</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">NSMutableArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *dataUrlArray;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">AVPlayer</span>                  *mediaPlayer;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">BOOL</span>                      isPlaying;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">AVPlayerItem</span>              *meidaPlayerItem;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readwrite</span>) MediaPlayType             playeType;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">NSInteger</span>                 currentIndex;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readwrite</span>) MediaPlayStatus           playStatus;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">CGFloat</span>                   curentPlayTimeValue;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readwrite</span>  ) <span class="hljs-built_in">NSString</span>                  *curentPlayTime;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>, <span class="hljs-keyword">readwrite</span>) <span class="hljs-built_in">CGFloat</span>                   endPlayTimeValue;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>, <span class="hljs-keyword">readwrite</span>  ) <span class="hljs-built_in">NSString</span>                  *endPlayTime;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>             ) <span class="hljs-keyword">id</span> &lt;MediaPlyerManagerDelegate&gt; delegate;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">MediaPlyerManager</span></span><br><br>+ (<span class="hljs-keyword">instancetype</span>)defaultManager &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-keyword">static</span> MediaPlyerManager *manger;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        manger = [[MediaPlyerManager alloc] init];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> manger;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 初始化</span><br><br>- (MediaPlyerManager *)playerWithUrl:(<span class="hljs-built_in">NSString</span> *)url actionWithDelegate:(<span class="hljs-keyword">id</span>&lt;MediaPlyerManagerDelegate&gt;)delegate &#123;<br>    [<span class="hljs-keyword">self</span> playerWithUrls:@[url] actionWithDelegate:delegate];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (MediaPlyerManager *)playerWithUrls:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)urls actionWithDelegate:(<span class="hljs-keyword">id</span>&lt;MediaPlyerManagerDelegate&gt;)delegate &#123;<br>    <span class="hljs-keyword">self</span>.delegate         = delegate;<br>    <span class="hljs-keyword">self</span>.currentIndex     = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">self</span>.dataUrlArray     = [<span class="hljs-built_in">NSMutableArray</span> array];<br>    <span class="hljs-built_in">NSMutableArray</span> *array = [<span class="hljs-built_in">NSMutableArray</span> arrayWithCapacity:urls.count];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSString</span> *urlStr <span class="hljs-keyword">in</span> urls) &#123;<br>        [array addObject:[<span class="hljs-keyword">self</span> createPlayerItemWithUrl:urlStr]];<br>        [<span class="hljs-keyword">self</span>.dataUrlArray addObject:urlStr];<br>    &#125;<br>    <span class="hljs-keyword">self</span>.playeType = MediaPlayTypeCycle;<br>    <span class="hljs-keyword">self</span>.mediaPlayer = [[<span class="hljs-built_in">AVPlayer</span> alloc] initWithPlayerItem:array.firstObject];<br>    <span class="hljs-keyword">self</span>.meidaPlayerItem = <span class="hljs-keyword">self</span>.mediaPlayer.currentItem;<br>    [<span class="hljs-keyword">self</span> getCurrentIndex:<span class="hljs-keyword">self</span>.currentIndex];<br>    [<span class="hljs-keyword">self</span> addObserver];<br>    <br>    __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakself = <span class="hljs-keyword">self</span>;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer addPeriodicTimeObserverForInterval:<span class="hljs-built_in">CMTimeMake</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) queue:<span class="hljs-literal">NULL</span> usingBlock:^(<span class="hljs-built_in">CMTime</span> time) &#123;<br>        <span class="hljs-built_in">NSString</span> *currentString = [weakself getStringFromCMTime:time];<br>        weakself.curentPlayTime = currentString;<br>        weakself.curentPlayTimeValue = (<span class="hljs-built_in">CGFloat</span>)time.value/time.timescale;        <br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 获取当前播放时间</span><br>        <span class="hljs-keyword">if</span> (weakself.delegate &amp;&amp; [weakself.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:currentPlayTime:currentPlayTimeValue:)]) &#123;<br>            [weakself.delegate MediaPlayer:weakself currentPlayTime:currentString currentPlayTimeValue:(<span class="hljs-built_in">CGFloat</span>)time.value/time.timescale];<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 实时获取播放信息</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:currentProgressValue:totalValue:currentIndex:)]) &#123;<br>            [weakself.delegate MediaPlayer:weakself currentProgressValue:weakself.curentPlayTimeValue totalValue:weakself.endPlayTimeValue currentIndex:weakself.currentIndex];<br>        &#125;<br>    &#125;];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 播放结束</span><br><br>- (<span class="hljs-keyword">void</span>)playFinish:(<span class="hljs-built_in">NSNotification</span> *)notification &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayerCurrentMediaPlayFinish:)]) &#123;<br>        [<span class="hljs-keyword">self</span>.delegate MediaPlayerCurrentMediaPlayFinish:<span class="hljs-keyword">self</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.playeType == MediaPlayTypeSingle) &#123;<br>        [<span class="hljs-keyword">self</span>.mediaPlayer seekToTime:kCMTimeZero];<br>        [<span class="hljs-keyword">self</span> play];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.currentIndex &lt; <span class="hljs-keyword">self</span>.dataUrlArray.count - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">self</span>.currentIndex += <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">self</span>.currentIndex = <span class="hljs-number">0</span>;<br>        &#125;<br>        [<span class="hljs-keyword">self</span>.mediaPlayer replaceCurrentItemWithPlayerItem:[<span class="hljs-keyword">self</span> createPlayerItemWithUrl:<span class="hljs-keyword">self</span>.dataUrlArray[<span class="hljs-keyword">self</span>.currentIndex]]];<br>        <span class="hljs-keyword">self</span>.meidaPlayerItem = <span class="hljs-keyword">self</span>.mediaPlayer.currentItem;<br>        [<span class="hljs-keyword">self</span> getCurrentIndex:<span class="hljs-keyword">self</span>.currentIndex];<br>        [<span class="hljs-keyword">self</span> play];<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - KVO</span><br><br>- (<span class="hljs-keyword">void</span>)observeValueForKeyPath:(<span class="hljs-built_in">NSString</span> *)keyPath<br>                      ofObject:(<span class="hljs-keyword">id</span>)object<br>                        change:(<span class="hljs-built_in">NSDictionary</span>&lt;<span class="hljs-built_in">NSKeyValueChangeKey</span>,<span class="hljs-keyword">id</span>&gt; *)change<br>                       context:(<span class="hljs-keyword">void</span> *)context &#123;<br>    <br>    <span class="hljs-built_in">AVPlayerItem</span> *playerItem = object;<br>    <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-string">@&quot;status&quot;</span>]) &#123;<br>        MediaLoadStatus status = [change[<span class="hljs-string">@&quot;new&quot;</span>] integerValue];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 获取媒体加载状态</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:playerItemStatus:)]) &#123;<br>            [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> playerItemStatus:status];<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-string">@&quot;loadedTimeRanges&quot;</span>]) &#123;<br>        <span class="hljs-built_in">NSArray</span> * timeRanges         = playerItem.loadedTimeRanges;<br>        <span class="hljs-built_in">CMTimeRange</span> timeRange        = [timeRanges.firstObject <span class="hljs-built_in">CMTimeRangeValue</span>];<br>        <span class="hljs-built_in">NSTimeInterval</span> totalLoadTime = <span class="hljs-built_in">CMTimeGetSeconds</span>(timeRange.start) \<br>                                                + <span class="hljs-built_in">CMTimeGetSeconds</span>(timeRange.duration);<br>        <span class="hljs-built_in">NSTimeInterval</span> duration      = <span class="hljs-built_in">CMTimeGetSeconds</span>(playerItem.duration);<br>        <span class="hljs-built_in">NSTimeInterval</span> scale         = totalLoadTime/duration;<br>        <br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 获取媒体总时间</span><br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">CGFloat</span>)duration/scale &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">self</span>.endPlayTime = [<span class="hljs-keyword">self</span> getStringFromCMTime:playerItem.duration];<br>            <span class="hljs-keyword">self</span>.endPlayTimeValue = (<span class="hljs-built_in">CGFloat</span>)duration/scale;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:mediaEndTime:mediaEndTimeValue:)]) &#123;<br>                [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> mediaEndTime:[<span class="hljs-keyword">self</span> getStringFromCMTime:playerItem.duration] mediaEndTimeValue:(<span class="hljs-built_in">CGFloat</span>)duration/scale];<br>            &#125;<br>        &#125;<br>        <br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 缓冲百分比</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:netBufferValue:)]) &#123;<br>            [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> netBufferValue:scale];<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-string">@&quot;playbackBufferEmpty&quot;</span>]) &#123;<br>        <br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 缓冲不足够播放</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:bufferHasEnough:)]) &#123;<br>            [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> bufferHasEnough:<span class="hljs-literal">false</span>];<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-string">@&quot;playbackLikelyToKeepUp&quot;</span>]) &#123;<br>        <br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 缓冲足够播放</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:bufferHasEnough:)]) &#123;<br>            [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> bufferHasEnough:<span class="hljs-literal">true</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 开始播放</span><br><br>- (<span class="hljs-keyword">void</span>)play &#123;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer play];<br>    [<span class="hljs-keyword">self</span> getPlayStatus:MediaPlayStatusPlaying];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 暂停播放</span><br><br>- (<span class="hljs-keyword">void</span>)pause &#123;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer pause];<br>    [<span class="hljs-keyword">self</span> getPlayStatus:MediaPlayStatusPause];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 停止播放</span><br><br>- (<span class="hljs-keyword">void</span>)stop &#123;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer replaceCurrentItemWithPlayerItem:<span class="hljs-literal">nil</span>];<br>    [<span class="hljs-keyword">self</span> getPlayStatus:MediaPlayStatusStop];<br>    [<span class="hljs-keyword">self</span> removeObserver];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 下一个</span><br><br>- (<span class="hljs-keyword">void</span>)next &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.playeType == MediaPlayTypeRandom) &#123;<br>        <span class="hljs-keyword">self</span>.currentIndex = (<span class="hljs-built_in">NSInteger</span>)arc4random_uniform((int32_t)(<span class="hljs-keyword">self</span>.dataUrlArray.count - <span class="hljs-number">1</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.currentIndex == <span class="hljs-keyword">self</span>.dataUrlArray.count - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">self</span>.currentIndex = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">self</span>.currentIndex += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer replaceCurrentItemWithPlayerItem:[<span class="hljs-keyword">self</span> createPlayerItemWithUrl:<span class="hljs-keyword">self</span>.dataUrlArray[<span class="hljs-keyword">self</span>.currentIndex]]];<br>    <span class="hljs-keyword">self</span>.meidaPlayerItem = <span class="hljs-keyword">self</span>.mediaPlayer.currentItem;<br>    [<span class="hljs-keyword">self</span> getCurrentIndex:<span class="hljs-keyword">self</span>.currentIndex];<br>    [<span class="hljs-keyword">self</span> addObserver];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 上一个</span><br><br>- (<span class="hljs-keyword">void</span>)previous &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.playeType == MediaPlayTypeRandom) &#123;<br>        <span class="hljs-keyword">self</span>.currentIndex = (<span class="hljs-built_in">NSInteger</span>)arc4random_uniform((int32_t)(<span class="hljs-keyword">self</span>.dataUrlArray.count - <span class="hljs-number">1</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.currentIndex == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">self</span>.currentIndex = <span class="hljs-keyword">self</span>.dataUrlArray.count - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">self</span>.currentIndex -= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer replaceCurrentItemWithPlayerItem:[<span class="hljs-keyword">self</span> createPlayerItemWithUrl:<span class="hljs-keyword">self</span>.dataUrlArray[<span class="hljs-keyword">self</span>.currentIndex]]];<br>    <span class="hljs-keyword">self</span>.meidaPlayerItem = <span class="hljs-keyword">self</span>.mediaPlayer.currentItem;<br>    [<span class="hljs-keyword">self</span> getCurrentIndex:<span class="hljs-keyword">self</span>.currentIndex];<br>    [<span class="hljs-keyword">self</span> addObserver];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 播放状态</span><br><br>- (<span class="hljs-keyword">void</span>)getPlayStatus:(MediaPlayStatus)status &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:playeStatus:)]) &#123;<br>        [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> playeStatus:status];<br>    &#125;<br>    <span class="hljs-keyword">self</span>.playStatus = status;<br><br>    <span class="hljs-keyword">if</span> (status == MediaPlayStatusPlaying) &#123;<br>        <span class="hljs-keyword">self</span>.isPlaying = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">self</span>.isPlaying = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 根据index进行回调</span><br><br>- (<span class="hljs-keyword">void</span>)getCurrentIndex:(<span class="hljs-built_in">NSInteger</span>)index &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(MediaPlayer:currentUrl:currentIndex:)]) &#123;<br>        [<span class="hljs-keyword">self</span>.delegate MediaPlayer:<span class="hljs-keyword">self</span> currentUrl:<span class="hljs-keyword">self</span>.dataUrlArray[index] currentIndex:index];<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 设置播放进度百分比</span><br><br>- (<span class="hljs-keyword">void</span>)setupPlayerSeekToProgress:(<span class="hljs-built_in">CGFloat</span>)progress &#123;<br>    <span class="hljs-keyword">float</span> timeValue = progress * <span class="hljs-built_in">CMTimeGetSeconds</span>(<span class="hljs-keyword">self</span>.mediaPlayer.currentItem.duration);<br>    [<span class="hljs-keyword">self</span>.mediaPlayer seekToTime:<span class="hljs-built_in">CMTimeMake</span>(timeValue, <span class="hljs-number">1</span>)];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 设置播放形式</span><br><br>- (<span class="hljs-keyword">void</span>)setupMediaPlayerType:(MediaPlayType)type &#123;<br>    <span class="hljs-keyword">self</span>.playeType = type;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 播放指定index的媒体</span><br><br>- (<span class="hljs-keyword">void</span>)setupPlayerIndex:(<span class="hljs-built_in">NSInteger</span>)index &#123;<br>    <span class="hljs-keyword">if</span> (index &gt; (<span class="hljs-keyword">self</span>.dataUrlArray.count - <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-keyword">@throw</span> [<span class="hljs-built_in">NSException</span> exceptionWithName:<span class="hljs-string">@&quot;越界错误&quot;</span> reason:<span class="hljs-string">@&quot;index 不能超出URL数组的长度&quot;</span> userInfo:<span class="hljs-literal">nil</span>];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">self</span>.currentIndex = index;<br>    [<span class="hljs-keyword">self</span>.mediaPlayer replaceCurrentItemWithPlayerItem:[<span class="hljs-keyword">self</span> createPlayerItemWithUrl:<span class="hljs-keyword">self</span>.dataUrlArray[<span class="hljs-keyword">self</span>.currentIndex]]];<br>    <span class="hljs-keyword">self</span>.meidaPlayerItem = <span class="hljs-keyword">self</span>.mediaPlayer.currentItem;<br>    [<span class="hljs-keyword">self</span> getCurrentIndex:<span class="hljs-keyword">self</span>.currentIndex];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 插入数据</span><br><br>- (<span class="hljs-keyword">void</span>)insertMediaFile:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)files atIndex:(<span class="hljs-built_in">NSInteger</span>)index &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSString</span> *urlStr <span class="hljs-keyword">in</span> files) &#123;<br>        <span class="hljs-built_in">NSInteger</span> i = [files indexOfObject:urlStr];<br>        [<span class="hljs-keyword">self</span>.dataUrlArray insertObject:urlStr atIndex:index + i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-keyword">self</span>.currentIndex) &#123;<br>        <span class="hljs-keyword">self</span>.currentIndex += <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 删除数据</span><br><br>- (<span class="hljs-keyword">void</span>)removeAllFiles &#123;<br>    [<span class="hljs-keyword">self</span> stop];<br>    [<span class="hljs-keyword">self</span>.dataUrlArray removeAllObjects];<br>    <span class="hljs-keyword">self</span>.dataUrlArray = [<span class="hljs-built_in">NSMutableArray</span> array];<br>    <span class="hljs-keyword">self</span>.currentIndex = <span class="hljs-number">0</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)removeObjectAtIndex:(<span class="hljs-built_in">NSInteger</span>)index &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.dataUrlArray.count == <span class="hljs-number">1</span>) &#123;<br>        [<span class="hljs-keyword">self</span> removeAllFiles];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-keyword">self</span>.dataUrlArray removeObjectAtIndex:index];<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-keyword">self</span>.currentIndex) &#123;<br>            <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">self</span>.currentIndex = <span class="hljs-number">0</span>;<br>                [<span class="hljs-keyword">self</span> next];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">self</span>.currentIndex -= <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.currentIndex &gt; index) &#123;<br>                <span class="hljs-keyword">self</span>.currentIndex -= <span class="hljs-number">1</span>;<br>            &#125; <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Utils</span><br><br>- (<span class="hljs-built_in">NSString</span> *)getStringFromCMTime:(<span class="hljs-built_in">CMTime</span>)time &#123;<br>    <span class="hljs-keyword">float</span> currentTimeValue       = (<span class="hljs-built_in">CGFloat</span>)time.value/time.timescale;<br>    <span class="hljs-built_in">NSDate</span> * currentDate         = [<span class="hljs-built_in">NSDate</span> dateWithTimeIntervalSince1970:currentTimeValue];<br>    <span class="hljs-built_in">NSCalendar</span> *calendar         = [[<span class="hljs-built_in">NSCalendar</span> alloc] initWithCalendarIdentifier:<span class="hljs-built_in">NSCalendarIdentifierGregorian</span>];<br>    <span class="hljs-built_in">NSInteger</span> unitFlags          = <span class="hljs-built_in">NSCalendarUnitHour</span> | <span class="hljs-built_in">NSCalendarUnitMinute</span> | <span class="hljs-built_in">NSCalendarUnitSecond</span>;<br>    <span class="hljs-built_in">NSDateComponents</span> *components = [calendar components:unitFlags fromDate:currentDate];<br>    <span class="hljs-keyword">if</span> (currentTimeValue &gt;= <span class="hljs-number">3600</span> ) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%02ld:%02ld:%02ld&quot;</span>, (<span class="hljs-keyword">long</span>)components.hour, (<span class="hljs-keyword">long</span>)components.minute, (<span class="hljs-keyword">long</span>)components.second];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;%02ld:%02ld&quot;</span>, (<span class="hljs-keyword">long</span>)components.minute, (<span class="hljs-keyword">long</span>)components.second];<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)addObserver &#123;<br>    <span class="hljs-comment">// 监控状态属性</span><br>    [<span class="hljs-keyword">self</span>.meidaPlayerItem addObserver:<span class="hljs-keyword">self</span><br>                           forKeyPath:<span class="hljs-string">@&quot;status&quot;</span><br>                              options:(<span class="hljs-built_in">NSKeyValueObservingOptionOld</span>|<span class="hljs-built_in">NSKeyValueObservingOptionNew</span>)<br>                              context:<span class="hljs-literal">nil</span>];<br>    <br>    <span class="hljs-comment">// 监控缓冲加载情况属性</span><br>    [<span class="hljs-keyword">self</span>.meidaPlayerItem addObserver:<span class="hljs-keyword">self</span><br>                           forKeyPath:<span class="hljs-string">@&quot;loadedTimeRanges&quot;</span><br>                              options:(<span class="hljs-built_in">NSKeyValueObservingOptionOld</span>|<span class="hljs-built_in">NSKeyValueObservingOptionNew</span>)<br>                              context:<span class="hljs-literal">nil</span>];<br>    <br>    <span class="hljs-comment">// 监听缓冲不足够播放</span><br>    [<span class="hljs-keyword">self</span>.meidaPlayerItem addObserver:<span class="hljs-keyword">self</span><br>                           forKeyPath:<span class="hljs-string">@&quot;playbackBufferEmpty&quot;</span><br>                              options:<span class="hljs-built_in">NSKeyValueObservingOptionNew</span><br>                              context:<span class="hljs-literal">nil</span>];<br>    <br>    <span class="hljs-comment">// 监听缓冲足够播放</span><br>    [<span class="hljs-keyword">self</span>.meidaPlayerItem addObserver:<span class="hljs-keyword">self</span><br>                           forKeyPath:<span class="hljs-string">@&quot;playbackLikelyToKeepUp&quot;</span><br>                              options:<span class="hljs-built_in">NSKeyValueObservingOptionNew</span><br>                              context:<span class="hljs-literal">nil</span>];<br>    <br>    <span class="hljs-comment">// 获取是否播放结束</span><br>    [[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="hljs-keyword">self</span><br>                                             selector:<span class="hljs-keyword">@selector</span>(playFinish:)<br>                                                 name:<span class="hljs-built_in">AVPlayerItemDidPlayToEndTimeNotification</span><br>                                               object:<span class="hljs-keyword">self</span>.meidaPlayerItem];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)removeObserver &#123;<br>    [[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="hljs-keyword">self</span>];<br>    <span class="hljs-keyword">@try</span> &#123;<br>        [<span class="hljs-keyword">self</span>.meidaPlayerItem removeObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;loadedTimeRanges&quot;</span>];<br>        [<span class="hljs-keyword">self</span>.meidaPlayerItem removeObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;playbackBufferEmpty&quot;</span>];<br>        [<span class="hljs-keyword">self</span>.meidaPlayerItem removeObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;playbackLikelyToKeepUp&quot;</span>];<br>        [<span class="hljs-keyword">self</span>.meidaPlayerItem removeObserver:<span class="hljs-keyword">self</span> forKeyPath:<span class="hljs-string">@&quot;status&quot;</span>];<br>    &#125;<br>    <span class="hljs-keyword">@catch</span>(<span class="hljs-built_in">NSException</span> *exception) &#123;<br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, exception);<br>    &#125; <br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 设置锁屏样式</span><br><br>- (<span class="hljs-keyword">void</span>)setupLockScreenPlayInfo:(<span class="hljs-built_in">UIImage</span> *)coverImage<br>                      imageSize:(<span class="hljs-built_in">CGSize</span>)size<br>                          title:(<span class="hljs-built_in">NSString</span> *)title<br>                         ahthor:(<span class="hljs-built_in">NSString</span> *)author<br>                          album:(<span class="hljs-built_in">NSString</span> *)album<br>                currentPlayTime:(<span class="hljs-built_in">CGFloat</span>)currentTime<br>                       duration:(<span class="hljs-built_in">CGFloat</span>)duration &#123;<br>    <br>    Class playingInfoCenter = <span class="hljs-built_in">NSClassFromString</span>(<span class="hljs-string">@&quot;MPNowPlayingInfoCenter&quot;</span>);<br>    <span class="hljs-keyword">if</span> (playingInfoCenter) &#123;<br>        <span class="hljs-built_in">NSMutableDictionary</span> *songInfo = [[<span class="hljs-built_in">NSMutableDictionary</span> alloc] init];<br>        <span class="hljs-built_in">MPMediaItemArtwork</span> *albumArt = [[<span class="hljs-built_in">MPMediaItemArtwork</span> alloc] initWithBoundsSize:size requestHandler:^<span class="hljs-built_in">UIImage</span> * _Nonnull(<span class="hljs-built_in">CGSize</span> size) &#123;<br>            <span class="hljs-keyword">return</span> coverImage;<br>        &#125;];<br>        [songInfo setObject:title forKey:<span class="hljs-built_in">MPMediaItemPropertyTitle</span>];<br>        [songInfo setObject:author forKey:<span class="hljs-built_in">MPMediaItemPropertyArtist</span>];<br>        [songInfo setObject:album forKey:<span class="hljs-built_in">MPMediaItemPropertyAlbumTitle</span>];<br>        [songInfo setObject:albumArt forKey:<span class="hljs-built_in">MPMediaItemPropertyArtwork</span>];<br>        [songInfo setObject:[<span class="hljs-built_in">NSNumber</span> numberWithDouble:currentTime] forKey:<span class="hljs-built_in">MPNowPlayingInfoPropertyElapsedPlaybackTime</span>];<br>        [songInfo setObject:[<span class="hljs-built_in">NSNumber</span> numberWithDouble:duration] forKey:<span class="hljs-built_in">MPMediaItemPropertyPlaybackDuration</span>];<br>        [[<span class="hljs-built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:songInfo];<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-built_in">AVPlayerItem</span> *)createPlayerItemWithUrl:(<span class="hljs-built_in">NSString</span> *)url &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">AVPlayerItem</span> playerItemWithURL:[<span class="hljs-built_in">NSURL</span> URLWithString:url]];<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><p>本来相同使用AVQueuePlayer来进行列表播放的，但是当做单曲循环的时候遇到问题：通过通知监听播放完成，在通知的方法里进行具体操作，但是设置无效，直接播放的还是下一个文件。如果有人知道如何解决，帮忙回复一下。</p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件：自定义Alter弹窗</title>
    <link href="/2019/11/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89Alter%E5%BC%B9%E7%AA%97/"/>
    <url>/2019/11/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89Alter%E5%BC%B9%E7%AA%97/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-b779b2b4e3c10261.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼图"></p><p>模仿微信底部弹窗样式。</p><h3 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDAlterSheetModel</span> : <span class="hljs-title">NSObject</span></span><br><span class="hljs-comment">/// 仅显示主标题 黑色 ，16号字体</span><br><span class="hljs-comment">/// @param title 标题内容</span><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title;<br><br><span class="hljs-comment">/// 主标题（黑色 ，16号字体）和副标题（灰色 ，10号字体）</span><br><span class="hljs-comment">/// @param title 主标题内容</span><br><span class="hljs-comment">/// @param subTitle 副标题内容</span><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                             subTitle:(<span class="hljs-built_in">NSString</span> *)subTitle;<br><br><br><span class="hljs-comment">/// 仅显示主标题 16号字体</span><br><span class="hljs-comment">/// @param title 标题内容</span><br><span class="hljs-comment">/// @param titleColor 颜色配置</span><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                           titleColor:(<span class="hljs-built_in">UIColor</span> *)titleColor;<br><br><br><span class="hljs-comment">/// 仅显示主标题</span><br><span class="hljs-comment">/// @param title 主标题内容</span><br><span class="hljs-comment">/// @param titleColor 颜色配置</span><br><span class="hljs-comment">/// @param titleFount 字体配置</span><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                           titleColor:(<span class="hljs-built_in">UIColor</span> *)titleColor<br>                            titleFont:(<span class="hljs-built_in">UIFont</span> *)titleFount;<br><br><br><span class="hljs-comment">/// 主标题和副标题</span><br><span class="hljs-comment">/// @param title 主标题内容</span><br><span class="hljs-comment">/// @param titleColor 主标题颜色配置</span><br><span class="hljs-comment">/// @param titleFont 主标题字体配置</span><br><span class="hljs-comment">/// @param subTitle 副标题内容</span><br><span class="hljs-comment">/// @param subTitleColor 副标题字体配置</span><br><span class="hljs-comment">/// @param subTitleFont 副标题字体配置</span><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                           titleColor:(<span class="hljs-built_in">UIColor</span> *)titleColor<br>                            titleFont:(<span class="hljs-built_in">UIFont</span> *)titleFont<br>                             subTitle:(<span class="hljs-built_in">NSString</span> *)subTitle<br>                        subTitleColor:(<span class="hljs-built_in">UIColor</span> *)subTitleColor<br>                         subTitleFont:(<span class="hljs-built_in">UIFont</span> *)subTitleFont;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-comment">// 点击回调（取消按钮除外）</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (^DidSelectedBlock)(<span class="hljs-built_in">NSUInteger</span> index);<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDAlterSheetView</span> : <span class="hljs-title">UIControl</span></span><br><br><span class="hljs-comment">/// 仅显示按钮 默认样式</span><br><span class="hljs-comment">/// @param items 按钮文字数组</span><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleItems:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)items<br>                 didSelectBlock:(DidSelectedBlock)selectBlock;<br><br><span class="hljs-comment">/// 仅显示按钮 自定义样式按钮</span><br><span class="hljs-comment">/// @param items 按钮样式模型数组</span><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleAttItems:(<span class="hljs-built_in">NSArray</span>&lt;WDAlterSheetModel *&gt; *)items<br>                    didSelectBlock:(DidSelectedBlock)selectBlock;<br><br><br><span class="hljs-comment">/// 显示按钮（默认样式） + 取消按钮</span><br><span class="hljs-comment">/// @param items 按钮文字数组</span><br><span class="hljs-comment">/// @param cancelText 取消按钮文字</span><br><span class="hljs-comment">/// @param cancelColor 取消按钮颜色</span><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleItems:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)items<br>                     cancelText:(<span class="hljs-built_in">NSString</span> *)cancelText<br>                    cancelColor:(<span class="hljs-built_in">UIColor</span> * _Nullable)cancelColor <span class="hljs-comment">// 默认颜色红色</span><br>                 didSelectBlock:(DidSelectedBlock)selectBlock;<br><br><span class="hljs-comment">/// 显示按钮（自定义样式） + 取消按钮</span><br><span class="hljs-comment">/// @param items 按钮样式模型数组</span><br><span class="hljs-comment">/// @param cancelText 取消按钮文字</span><br><span class="hljs-comment">/// @param cancelColor 取消按钮颜色</span><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleAttItems:(<span class="hljs-built_in">NSArray</span>&lt;WDAlterSheetModel *&gt; *)items<br>                        cancelText:(<span class="hljs-built_in">NSString</span> *)cancelText<br>                       cancelColor:(<span class="hljs-built_in">UIColor</span> * _Nullable)cancelColor <span class="hljs-comment">// 默认颜色红色</span><br>                    didSelectBlock:(DidSelectedBlock)selectBlock;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><h3 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;WDAlterSheetView.h&quot;</span></span><br><span class="hljs-comment">// 按钮高度</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">CGFloat</span> KButtonHeight = <span class="hljs-number">55</span>;<br><span class="hljs-comment">// 取消按钮与其他间距</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">CGFloat</span> KSpace = <span class="hljs-number">8</span>;<br><span class="hljs-comment">// 圆角</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">CGFloat</span> KCornersSpace = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 屏幕高度</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">CGFloat</span> kScreenHeight() &#123;<br>    <span class="hljs-keyword">return</span> [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds].size.height;<br>&#125;<br><br><span class="hljs-comment">// 屏幕宽度</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">CGFloat</span> kScreenWidth() &#123;<br>    <span class="hljs-keyword">return</span> [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds].size.width;<br>&#125;<br><br><span class="hljs-comment">// 是否是刘海屏</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">BOOL</span> kDevice_iPhoneX() &#123;<br>    <span class="hljs-built_in">BOOL</span> isPhoneX = <span class="hljs-literal">NO</span>;<br>    <span class="hljs-keyword">if</span> (@available(iOS <span class="hljs-number">11.0</span>, *)) &#123;<br>        isPhoneX = [[<span class="hljs-built_in">UIApplication</span> sharedApplication] delegate].window.safeAreaInsets.bottom &gt; <span class="hljs-number">0.0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> isPhoneX;<br>&#125;<br><br><span class="hljs-comment">// 主标题颜色</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">UIColor</span> * kTitleColor() &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIColor</span> colorWithRed:<span class="hljs-number">0.1</span> green:<span class="hljs-number">0.1</span> blue:<span class="hljs-number">0.1</span> alpha:<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">// 副标题颜色</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">UIColor</span> * kSubTitleColor() &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIColor</span> colorWithRed:<span class="hljs-number">0.90</span> green:<span class="hljs-number">0.90</span> blue:<span class="hljs-number">0.90</span> alpha:<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">// 间隙颜色</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">UIColor</span> * kSpaceColor() &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIColor</span> colorWithRed:<span class="hljs-number">0.95</span> green:<span class="hljs-number">0.95</span> blue:<span class="hljs-number">0.95</span> alpha:<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">// 分割线颜色</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">UIColor</span> * kSpaceLineColor() &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIColor</span> colorWithRed:<span class="hljs-number">0.90</span> green:<span class="hljs-number">0.90</span> blue:<span class="hljs-number">0.90</span> alpha:<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">// 主标题字体</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">UIFont</span> * kTitleFont() &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">16</span>];<br>&#125;<br><br><span class="hljs-comment">// 副标题字体</span><br><span class="hljs-keyword">static</span> <span class="hljs-built_in">UIFont</span> * kSubTitleFont() &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">12</span>];<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDAlterSheetModel</span> ()</span><br><span class="hljs-comment">// 文字</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *title;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSString</span> *subTitle;<br><span class="hljs-comment">// 颜色</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIColor</span> *titleColor;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIColor</span> *subTitleColor;<br><span class="hljs-comment">// 字体</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIFont</span> *titleFont;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIFont</span> *subTitleFont;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDAlterSheetModel</span></span><br><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> setupWithTitle:title titleColor:kTitleColor()];<br>&#125;<br><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                             subTitle:(<span class="hljs-built_in">NSString</span> *)subTitle &#123;<br>    <br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> setupWithTitle:title<br>                    titleColor:kTitleColor()<br>                    titleFont:kTitleFont()<br>                       subTitle:subTitle<br>                  subTitleColor:kSubTitleColor()<br>                  subTitleFont:kSubTitleFont()];<br>&#125;<br><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                           titleColor:(<span class="hljs-built_in">UIColor</span> *)titleColor &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> setupWithTitle:title titleColor:titleColor titleFont:kTitleFont()];<br>&#125;<br><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                           titleColor:(<span class="hljs-built_in">UIColor</span> *)titleColor<br>                            titleFont:(<span class="hljs-built_in">UIFont</span> *)titleFont &#123;<br>    <br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> setupWithTitle:title<br>                     titleColor:titleColor<br>                      titleFont:titleFont<br>                       subTitle:<span class="hljs-string">@&quot;&quot;</span><br>                  subTitleColor:kSubTitleColor()<br>                   subTitleFont:kSubTitleFont()];<br>&#125;<br><br><br>+ (WDAlterSheetModel *)setupWithTitle:(<span class="hljs-built_in">NSString</span> *)title<br>                           titleColor:(<span class="hljs-built_in">UIColor</span> *)titleColor<br>                            titleFont:(<span class="hljs-built_in">UIFont</span> *)titleFont<br>                             subTitle:(<span class="hljs-built_in">NSString</span> *)subTitle<br>                        subTitleColor:(<span class="hljs-built_in">UIColor</span> *)subTitleColor<br>                         subTitleFont:(<span class="hljs-built_in">UIFont</span> *)subTitleFont &#123;<br>    WDAlterSheetModel *model = [[WDAlterSheetModel alloc] init];<br>    model.title = title;<br>    model.titleColor = titleColor;<br>    model.titleFont = titleFont;<br>    model.subTitle = subTitle;<br>    model.subTitleColor = subTitleColor;<br>    model.subTitleFont = subTitleFont;<br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDAlterSheetControl</span> : <span class="hljs-title">UIControl</span></span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *titleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *subTitleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSLayoutConstraint</span> *&gt; *totalLayoutConstraints;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *bottomLineView;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDAlterSheetControl</span></span><br>- (<span class="hljs-keyword">instancetype</span>)init &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">self</span>.backgroundColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br>        <br>        _titleLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>        _titleLabel.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>        _titleLabel.textAlignment = <span class="hljs-built_in">NSTextAlignmentCenter</span>;<br>        [<span class="hljs-keyword">self</span> addSubview:_titleLabel];<br>        <br>        _subTitleLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>        _subTitleLabel.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>        _subTitleLabel.textAlignment = <span class="hljs-built_in">NSTextAlignmentCenter</span>;<br>        [<span class="hljs-keyword">self</span> addSubview:_subTitleLabel];<br>        <br>        _bottomLineView = [[<span class="hljs-built_in">UIView</span> alloc] init];<br>        _bottomLineView.backgroundColor = kSpaceLineColor();<br>        [<span class="hljs-keyword">self</span> addSubview:_bottomLineView];<br>    <br>        <span class="hljs-keyword">self</span>.totalLayoutConstraints = @[<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeBottom</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">-2</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeTop</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">2</span>],<br>        ];<br>        [<span class="hljs-keyword">self</span> addConstraints:<span class="hljs-keyword">self</span>.totalLayoutConstraints];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)layoutSubviews &#123;<br>    [<span class="hljs-keyword">super</span> layoutSubviews];<br>    <br>    _bottomLineView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">CGRectGetHeight</span>(<span class="hljs-keyword">self</span>.frame) - <span class="hljs-number">0.5</span>, <span class="hljs-built_in">CGRectGetWidth</span>(<span class="hljs-keyword">self</span>.frame), <span class="hljs-number">0.5</span>);<br>    <br>    <span class="hljs-keyword">if</span> (_subTitleLabel.text.length == <span class="hljs-number">0</span>) &#123;<br>        [<span class="hljs-keyword">self</span> removeConstraints:<span class="hljs-keyword">self</span>.totalLayoutConstraints];<br>        [<span class="hljs-keyword">self</span> addConstraints:@[<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>        ]];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDAlterSheetLastControl</span> : <span class="hljs-title">UIControl</span></span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *titleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span> *subTitleLabel;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSLayoutConstraint</span> *&gt; *totalLayoutConstraints;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *bottomView;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDAlterSheetLastControl</span></span><br><br>- (<span class="hljs-keyword">instancetype</span>)init &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        <br>        <span class="hljs-keyword">self</span>.backgroundColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br>        <br>        _titleLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>        _titleLabel.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>        _titleLabel.textAlignment = <span class="hljs-built_in">NSTextAlignmentCenter</span>;<br>        [<span class="hljs-keyword">self</span> addSubview:_titleLabel];<br>        <br>        _subTitleLabel = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>        _subTitleLabel.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>        _subTitleLabel.textAlignment = <span class="hljs-built_in">NSTextAlignmentCenter</span>;<br>        [<span class="hljs-keyword">self</span> addSubview:_subTitleLabel];<br>        <br>        _bottomView = [[<span class="hljs-built_in">UIView</span> alloc] init];<br>        _bottomView.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">NO</span>;<br>        _bottomView.backgroundColor = [<span class="hljs-built_in">UIColor</span> clearColor];<br>        [<span class="hljs-keyword">self</span> addSubview:_bottomView];<br>        <br>        <span class="hljs-keyword">self</span>.totalLayoutConstraints = @[<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeBottom</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">-2</span> - (kDevice_iPhoneX() ? <span class="hljs-number">34</span> : <span class="hljs-number">0</span>)],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeTop</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">2</span> - (kDevice_iPhoneX() ? <span class="hljs-number">34</span> : <span class="hljs-number">0</span>)],<br>        ];<br>        <br>        <span class="hljs-built_in">NSMutableArray</span> *array = [<span class="hljs-built_in">NSMutableArray</span> array];<br>        [array addObjectsFromArray:@[<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_bottomView attribute:<span class="hljs-built_in">NSLayoutAttributeBottom</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeBottom</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_bottomView attribute:<span class="hljs-built_in">NSLayoutAttributeHeight</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-literal">nil</span> attribute:<span class="hljs-built_in">NSLayoutAttributeHeight</span> multiplier:<span class="hljs-number">1</span> constant:kDevice_iPhoneX() ? <span class="hljs-number">34</span> : <span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_bottomView attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeLeading</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_bottomView attribute:<span class="hljs-built_in">NSLayoutAttributeTrailing</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeTrailing</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>]<br>        ]];<br>        [array addObjectsFromArray:<span class="hljs-keyword">self</span>.totalLayoutConstraints];<br>        [<span class="hljs-keyword">self</span> addConstraints:array];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)layoutSubviews &#123;<br>    [<span class="hljs-keyword">super</span> layoutSubviews];<br>    <br>    <span class="hljs-keyword">if</span> (_subTitleLabel.text.length == <span class="hljs-number">0</span>) &#123;<br>        [<span class="hljs-keyword">self</span> removeConstraints:<span class="hljs-keyword">self</span>.totalLayoutConstraints];<br>        [<span class="hljs-keyword">self</span> addConstraints:@[<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_titleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:- (kDevice_iPhoneX() ? <span class="hljs-number">34</span> : <span class="hljs-number">0</span>) / <span class="hljs-number">2</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterX</span> multiplier:<span class="hljs-number">1</span> constant:<span class="hljs-number">0</span>],<br>            [<span class="hljs-built_in">NSLayoutConstraint</span> constraintWithItem:_subTitleLabel attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> relatedBy:<span class="hljs-built_in">NSLayoutRelationEqual</span> toItem:<span class="hljs-keyword">self</span> attribute:<span class="hljs-built_in">NSLayoutAttributeCenterY</span> multiplier:<span class="hljs-number">1</span> constant:- (kDevice_iPhoneX() ? <span class="hljs-number">34</span> : <span class="hljs-number">0</span>) / <span class="hljs-number">2</span>],<br>        ]];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@end</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDAlterSheetView</span> ()</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *backView;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> totalHeight;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">copy</span>) DidSelectedBlock selectedBlock;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDAlterSheetView</span></span><br><br>+ (<span class="hljs-keyword">instancetype</span>)shared &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-keyword">static</span> WDAlterSheetView *view = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        view = [[WDAlterSheetView alloc] init];<br>        view.frame = [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> view;<br>&#125;<br><br>- (<span class="hljs-keyword">instancetype</span>)init &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        [<span class="hljs-keyword">self</span> addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(hidenView) forControlEvents: <span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleItems:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)items<br>                 didSelectBlock:(DidSelectedBlock)selectBlock &#123;<br>    [<span class="hljs-keyword">self</span> showAlterWithTitleItems:items cancelText:<span class="hljs-string">@&quot;&quot;</span> cancelColor:<span class="hljs-literal">nil</span> didSelectBlock:selectBlock];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleItems:(<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)items<br>                     cancelText:(<span class="hljs-built_in">NSString</span> *)cancelText<br>                    cancelColor:(<span class="hljs-built_in">UIColor</span> *)cancelColor<br>                 didSelectBlock:(DidSelectedBlock)selectBlock &#123;<br>    <br>    <span class="hljs-built_in">NSMutableArray</span>&lt;WDAlterSheetModel *&gt; *array = [<span class="hljs-built_in">NSMutableArray</span> arrayWithCapacity:items.count];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">NSString</span> *title <span class="hljs-keyword">in</span> items) &#123;<br>        WDAlterSheetModel *model = [WDAlterSheetModel setupWithTitle:title];<br>        [array addObject:model];<br>    &#125;<br>    [<span class="hljs-keyword">self</span> showAlterWithTitleAttItems:array cancelText:cancelText cancelColor:cancelColor didSelectBlock:selectBlock];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleAttItems:(<span class="hljs-built_in">NSArray</span>&lt;WDAlterSheetModel *&gt; *)items<br>                    didSelectBlock:(DidSelectedBlock)selectBlock &#123;<br>    [<span class="hljs-keyword">self</span> showAlterWithTitleAttItems:items cancelText:<span class="hljs-string">@&quot;&quot;</span> cancelColor:<span class="hljs-literal">nil</span> didSelectBlock:selectBlock];<br>&#125;<br><br>+ (<span class="hljs-keyword">void</span>)showAlterWithTitleAttItems:(<span class="hljs-built_in">NSArray</span>&lt;WDAlterSheetModel *&gt; *)items<br>                        cancelText:(<span class="hljs-built_in">NSString</span> *)cancelText<br>                       cancelColor:(<span class="hljs-built_in">UIColor</span> *)cancelColor<br>                    didSelectBlock:(DidSelectedBlock)selectBlock &#123;<br><br>    <span class="hljs-built_in">NSAssert</span>(items.count &gt; <span class="hljs-number">0</span>, <span class="hljs-string">@&quot;Thead Reason ===&gt; [WDAlterSheetView · itmes`count not be null]&quot;</span>);<br>       <br>    WDAlterSheetView *view = [WDAlterSheetView shared];<br>    view.selectedBlock = selectBlock;<br>    [view addSubViews];<br>    <br>    <span class="hljs-built_in">CGFloat</span> cornersSpace = KCornersSpace;<br>    <span class="hljs-keyword">if</span> (items.firstObject.subTitle.length == <span class="hljs-number">0</span>) &#123;<br>        cornersSpace = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">NSMutableArray</span> *array = [<span class="hljs-built_in">NSMutableArray</span> arrayWithArray:items];<br>    <span class="hljs-keyword">if</span> (cancelText.length != <span class="hljs-number">0</span>) &#123;<br>        WDAlterSheetModel *cancelModel = [WDAlterSheetModel setupWithTitle:cancelText titleColor:cancelColor];<br>        <span class="hljs-keyword">if</span> (cancelColor == <span class="hljs-literal">nil</span>) &#123;<br>            cancelModel = [WDAlterSheetModel setupWithTitle:cancelText titleColor:[<span class="hljs-built_in">UIColor</span> redColor]];<br>        &#125;<br>        [array addObject:cancelModel];<br>    &#125;<br>    <br>    [array enumerateObjectsUsingBlock:^(WDAlterSheetModel * _Nonnull obj, <span class="hljs-built_in">NSUInteger</span> idx, <span class="hljs-built_in">BOOL</span> * _Nonnull stop) &#123;<br>        <span class="hljs-keyword">if</span> (idx == array.count - <span class="hljs-number">1</span>) &#123;<br>            WDAlterSheetLastControl *button = [view createLastButtonWithModel:obj tag:idx];<br>            <span class="hljs-keyword">if</span> (cancelText.length == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (kDevice_iPhoneX()) &#123;<br>                    button.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, KButtonHeight * (items.count - <span class="hljs-number">1</span>) + cornersSpace, kScreenWidth(), KButtonHeight + <span class="hljs-number">34</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    button.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, KButtonHeight * (items.count - <span class="hljs-number">1</span>) + cornersSpace, kScreenWidth(), KButtonHeight);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (kDevice_iPhoneX()) &#123;<br>                    button.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, KButtonHeight * items.count + KSpace + cornersSpace, kScreenWidth(), KButtonHeight + <span class="hljs-number">34</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    button.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, KButtonHeight * items.count + KSpace + cornersSpace, kScreenWidth(), KButtonHeight);<br>                &#125;<br>            &#125;<br>            [view.backView addSubview:button];<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            WDAlterSheetControl *button = [view createButtonWithModel:obj tag:idx];<br>            <span class="hljs-keyword">if</span> (idx == <span class="hljs-number">0</span>) &#123;<br>                button.bottomLineView.hidden = idx == items.count - <span class="hljs-number">1</span>;<br>                button.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, kScreenWidth(), KButtonHeight + cornersSpace);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                button.bottomLineView.hidden = idx == items.count - <span class="hljs-number">2</span>;<br>                button.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, cornersSpace + KButtonHeight * idx, kScreenWidth(), KButtonHeight);<br>            &#125;<br>            [view.backView addSubview:button];<br>        &#125;<br>    &#125;];<br><br>    <br>    [view showView];<br>    <br>    <span class="hljs-built_in">CGFloat</span> totoalHeight = KButtonHeight * items.count;<br>    <br>    <span class="hljs-keyword">if</span> (cancelText.length != <span class="hljs-number">0</span>) &#123;<br>        totoalHeight += KSpace + KButtonHeight;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (kDevice_iPhoneX()) &#123;<br>        totoalHeight += <span class="hljs-number">34</span>;<br>    &#125;<br>    <br>    view.backView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, kScreenHeight(), kScreenWidth(), totoalHeight);<br><br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.35</span> animations:^&#123;<br>        view.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0.35</span>];<br>        view.backView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, kScreenHeight() - totoalHeight, kScreenWidth(), totoalHeight);<br>    &#125;];<br>    [<span class="hljs-keyword">self</span> setupRoundedCornersWithView:view.backView];<br><br>    view.totalHeight = totoalHeight;<br>&#125;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Private</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark Operation Methods</span><br>- (<span class="hljs-built_in">UIView</span> *)kWindowView &#123;<br>    <span class="hljs-keyword">if</span> ([<span class="hljs-keyword">self</span> viewController].view != <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span> viewController].view;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([<span class="hljs-built_in">UIApplication</span> sharedApplication].delegate.window != <span class="hljs-literal">nil</span>) &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIApplication</span> sharedApplication].delegate.window;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-built_in">UIApplication</span> sharedApplication].keyWindow;<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)hidenView &#123;<br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.35</span> animations:^&#123;<br>        <span class="hljs-keyword">self</span>.backView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, kScreenHeight(), kScreenWidth(), <span class="hljs-keyword">self</span>.totalHeight);<br>        <span class="hljs-keyword">self</span>.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>    &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>        [<span class="hljs-keyword">self</span> removeSubViews];<br>        [<span class="hljs-keyword">self</span> removeFromSuperview];<br>    &#125;];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)showView &#123;<br>    <span class="hljs-keyword">self</span>.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>    [[<span class="hljs-keyword">self</span> kWindowView] addSubview:<span class="hljs-keyword">self</span>];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)addSubViews &#123;<br>    _backView = [[<span class="hljs-built_in">UIView</span> alloc] init];<br>    _backView.backgroundColor = kSpaceColor();<br>    [<span class="hljs-keyword">self</span> addSubview:_backView];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)removeSubViews &#123;<br>    [_backView removeFromSuperview];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark Target Action Method</span><br>- (<span class="hljs-keyword">void</span>)buttonDidClickTargetAction:(<span class="hljs-built_in">UIControl</span> *)sender &#123;<br>    sender.backgroundColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br><br>    [<span class="hljs-keyword">self</span> hidenView];<br>    <span class="hljs-keyword">if</span> (sender.tag != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.selectedBlock) &#123;<br>            <span class="hljs-keyword">self</span>.selectedBlock(sender.tag - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)buttonTouchUpOutSideTargetAction:(<span class="hljs-built_in">UIControl</span> *)sender &#123;<br>    sender.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithRed:<span class="hljs-number">0.93</span> green:<span class="hljs-number">0.93</span> blue:<span class="hljs-number">0.93</span> alpha:<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark Common UI Create Methods</span><br>- (<span class="hljs-built_in">UIButton</span> *)creatButton:(<span class="hljs-built_in">NSString</span> *)title tag:(<span class="hljs-built_in">NSUInteger</span>)tag &#123;<br>    <span class="hljs-built_in">UIButton</span> *button = [[<span class="hljs-built_in">UIButton</span> alloc] init];<br>    button.tag = tag;<br>    [button setTitle:title forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>    button.titleLabel.font = kTitleFont();<br>    button.backgroundColor = [<span class="hljs-built_in">UIColor</span> whiteColor];<br>    [button addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonDidClickTargetAction:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    <span class="hljs-keyword">return</span> button;<br>&#125;<br><br>- (WDAlterSheetControl *)createButtonWithModel:(WDAlterSheetModel *)model tag:(<span class="hljs-built_in">NSUInteger</span>)tag &#123;<br>    WDAlterSheetControl *v = [[WDAlterSheetControl alloc] init];<br>    v.titleLabel.text = model.title;<br>    v.titleLabel.textColor = model.titleColor;<br>    v.titleLabel.font = model.titleFont;<br>    v.subTitleLabel.text = model.subTitle;<br>    v.subTitleLabel.textColor = model.subTitleColor;<br>    v.subTitleLabel.font = model.subTitleFont;<br>    v.tag = tag;<br>    [v addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonTouchUpOutSideTargetAction:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchDown</span>];<br>    [v addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonDidClickTargetAction:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br>- (WDAlterSheetLastControl *)createLastButtonWithModel:(WDAlterSheetModel *)model tag:(<span class="hljs-built_in">NSUInteger</span>)tag &#123;<br>    WDAlterSheetLastControl *v = [[WDAlterSheetLastControl alloc] init];<br>    v.titleLabel.text = model.title;<br>    v.titleLabel.textColor = model.titleColor;<br>    v.titleLabel.font = model.titleFont;<br>    v.subTitleLabel.text = model.subTitle;<br>    v.subTitleLabel.textColor = model.subTitleColor;<br>    v.subTitleLabel.font = model.subTitleFont;<br>    v.tag = tag;<br>    [v addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonTouchUpOutSideTargetAction:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchDown</span>];<br>    [v addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonDidClickTargetAction:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br><br>- (<span class="hljs-built_in">UIViewController</span> *)viewController &#123;<br>    <span class="hljs-built_in">UIResponder</span> *next = [<span class="hljs-keyword">self</span> nextResponder];<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> ([next isKindOfClass:[<span class="hljs-built_in">UIViewController</span> <span class="hljs-keyword">class</span>]]) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-built_in">UIViewController</span> *)next;<br>        &#125;<br>        next = [next nextResponder];<br>    &#125; <span class="hljs-keyword">while</span> (next != <span class="hljs-literal">nil</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Tool Method</span><br>+ (<span class="hljs-keyword">void</span>)setupRoundedCornersWithView:(<span class="hljs-built_in">UIView</span> *)view &#123;<br>    <br>    <span class="hljs-built_in">CAShapeLayer</span> *mask = [<span class="hljs-built_in">CAShapeLayer</span> layer];<br>    <span class="hljs-built_in">UIBezierPath</span> * path = [<span class="hljs-built_in">UIBezierPath</span> bezierPathWithRoundedRect:view.bounds<br>                                                byRoundingCorners:(<span class="hljs-built_in">UIRectCornerTopLeft</span> | <span class="hljs-built_in">UIRectCornerTopRight</span>)<br>                                                      cornerRadii:<span class="hljs-built_in">CGSizeMake</span>(<span class="hljs-number">15</span>, <span class="hljs-number">15</span>)];<br>    mask.path = path.CGPath;<br>    mask.frame = view.bounds;<br>    <br>    <span class="hljs-built_in">CAShapeLayer</span> *borderLayer = [<span class="hljs-built_in">CAShapeLayer</span> layer];<br>    borderLayer.path = path.CGPath;<br>    borderLayer.fillColor = [<span class="hljs-built_in">UIColor</span> clearColor].CGColor;<br>    borderLayer.strokeColor = [<span class="hljs-built_in">UIColor</span> clearColor].CGColor;<br>    borderLayer.lineWidth = <span class="hljs-number">0</span>;<br>    borderLayer.frame = view.bounds;<br>    view.layer.mask = mask;<br>    [view.layer addSublayer:borderLayer];<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">WDAlterSheetModel *m1 = [WDAlterSheetModel setupWithTitle:<span class="hljs-string">@&quot;拍摄&quot;</span> titleColor:<span class="hljs-built_in">UIColor</span>.blackColor titleFont:[<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">16</span>] subTitle:<span class="hljs-string">@&quot;照片或视频&quot;</span> subTitleColor:<span class="hljs-built_in">UIColor</span>.lightGrayColor subTitleFont:[<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">11</span>]];<br>WDAlterSheetModel *m2 = [WDAlterSheetModel setupWithTitle:<span class="hljs-string">@&quot;从手机相册选择&quot;</span> titleColor:<span class="hljs-built_in">UIColor</span>.blackColor];<br>[WDAlterSheetView showAlterWithTitleAttItems:@[m1, m2] cancelText:<span class="hljs-string">@&quot;取消&quot;</span> cancelColor:[<span class="hljs-built_in">UIColor</span> redColor] didSelectBlock:^(<span class="hljs-built_in">NSUInteger</span> index) &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;点击了：%lu&quot;</span>, index);<br>&#125;];<br></code></pre></td></tr></table></figure><h3 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h3><p><img src="https://upload-images.jianshu.io/upload_images/3334769-afd04fff32d300b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.7 inch"></p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-d6bab3410bbf2317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刘海屏"></p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-dc10a58e38728cb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="刘海屏"></p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件-一个简易的Combobox</title>
    <link href="/2019/10/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84Combobox/"/>
    <url>/2019/10/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84Combobox/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-72958ace35bcee4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用图"></p><p>代码简单易懂，属于自己练手的代码，还在学习，写的不好，希望勿喷<br>1、头文件</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, WDComboBoxControlDirection) &#123;<br>    WDComboBoxControlDirectionTop,<br>    WDComboBoxControlDirectionLeading,<br>    WDComboBoxControlDirectionTrailing,<br>    WDComboBoxControlDirectionBottom,<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">WDComboBoxControlDataSource</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span><br><span class="hljs-keyword">@optional</span><br><span class="hljs-comment">/** &lt; 数据数组 &gt; */</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *&gt; *)dataSourceOfColunm;<br><span class="hljs-keyword">@required</span><br><span class="hljs-comment">/** &lt; 标题数组 &gt; */</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titleOfSection;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@protocol</span> <span class="hljs-title">WDComboBoxControlDelegate</span> &lt;<span class="hljs-title">NSObject</span>&gt;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 点击事件</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> @param indexPath indexPath description</span><br><span class="hljs-comment"> @param title title description</span><br><span class="hljs-comment"> @param sourceView sourceView description</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)selectedAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath resultTitle:(<span class="hljs-built_in">NSString</span> *)title fromSourceView:(<span class="hljs-built_in">UIView</span> *)sourceView;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDComboBoxControl</span> : <span class="hljs-title">UIView</span></span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">id</span> &lt;WDComboBoxControlDataSource&gt; dataSource;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">weak</span>) <span class="hljs-keyword">id</span> &lt;WDComboBoxControlDelegate&gt; delegate;<br><span class="hljs-comment">/** &lt; 背景按钮，可以定义需要的属性 &gt; */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIButton</span> *backgroundButton;<br><span class="hljs-comment">/** &lt; 内容TableView，也可以定义一些属性 &gt; */</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UITableView</span> *tableView;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 初始化方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param height 显示内容高度</span><br><span class="hljs-comment"> @param view 参考View</span><br><span class="hljs-comment"> @return return value description</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">instancetype</span>)initViewWithMaxHeight:(<span class="hljs-built_in">CGFloat</span>)height fromView:(<span class="hljs-built_in">UIView</span> *)view showDirection:(WDComboBoxControlDirection)direction;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 显示页面</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)showInView;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><p>2、实现文件</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;WDComboBoxControl.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">WDComboBoxControl</span> () &lt;<span class="hljs-title">UITableViewDelegate</span>, <span class="hljs-title">UITableViewDataSource</span>&gt;</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> viewHeight;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *&gt; * dataArray;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; * titleArray;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *sourceView;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) WDComboBoxControlDirection direction;<br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">WDComboBoxControl</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== 初始化页面 ===============</span><br>- (<span class="hljs-keyword">instancetype</span>)initViewWithMaxHeight:(<span class="hljs-built_in">CGFloat</span>)height fromView:(<span class="hljs-built_in">UIView</span> *)view showDirection:(WDComboBoxControlDirection)direction &#123;<br>    <span class="hljs-keyword">self</span> = [<span class="hljs-keyword">super</span> init];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>) &#123;<br>        _viewHeight = height;<br>        _sourceView = view;<br>        _direction = direction;<br>        [<span class="hljs-keyword">self</span> setupSubViewsPropertys];<br>        [<span class="hljs-keyword">self</span> setupSubViewsConstraints];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== 显示页面 ===============</span><br>- (<span class="hljs-keyword">void</span>)showInView &#123;<br>    <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds;<br>    [<span class="hljs-built_in">UIApplication</span>.sharedApplication.delegate.window addSubview:<span class="hljs-keyword">self</span>];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== 让页面消失 ===============</span><br>- (<span class="hljs-keyword">void</span>)dismisssView &#123;<br>    [<span class="hljs-keyword">self</span> removeFromSuperview];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== 获取数据源 ===============</span><br>- (<span class="hljs-keyword">void</span>)setDataSource:(<span class="hljs-keyword">id</span>&lt;WDComboBoxControlDataSource&gt;)dataSource &#123;<br>    _dataSource = dataSource;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.dataSource &amp;&amp; [<span class="hljs-keyword">self</span>.dataSource respondsToSelector:<span class="hljs-keyword">@selector</span>(dataSourceOfColunm)]) &#123;<br>        <span class="hljs-keyword">self</span>.dataArray = [<span class="hljs-keyword">self</span>.dataSource dataSourceOfColunm];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.dataArray &amp;&amp; [<span class="hljs-keyword">self</span>.dataSource respondsToSelector:<span class="hljs-keyword">@selector</span>(titleOfSection)]) &#123;<br>        <span class="hljs-keyword">self</span>.titleArray =  [<span class="hljs-keyword">self</span>.dataSource titleOfSection];<br>    &#125;<br>    <br>    [<span class="hljs-keyword">self</span>.tableView reloadData];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== Add controls, set properties ===============</span><br>- (<span class="hljs-keyword">void</span>)setupSubViewsPropertys &#123;<br>    <span class="hljs-keyword">self</span>.backgroundButton = [[<span class="hljs-built_in">UIButton</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.backgroundButton.backgroundColor = <span class="hljs-built_in">UIColor</span>.clearColor;<br>    [<span class="hljs-keyword">self</span>.backgroundButton addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(dismisssView) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    [<span class="hljs-keyword">self</span> addSubview:<span class="hljs-keyword">self</span>.backgroundButton];<br>    <br>    <span class="hljs-keyword">self</span>.tableView = [[<span class="hljs-built_in">UITableView</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.tableView.delegate = <span class="hljs-keyword">self</span>;<br>    <span class="hljs-keyword">self</span>.tableView.dataSource = <span class="hljs-keyword">self</span>;<br>    <span class="hljs-keyword">self</span>.tableView.tableFooterView = [[<span class="hljs-built_in">UIView</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.tableView.layer.borderColor = <span class="hljs-built_in">UIColor</span>.lightGrayColor.CGColor;<br>    <span class="hljs-keyword">self</span>.tableView.layer.borderWidth = <span class="hljs-number">0.5</span>;<br>    <span class="hljs-keyword">self</span>.tableView.estimatedRowHeight = <span class="hljs-number">45</span>;<br>    <span class="hljs-keyword">self</span>.tableView.layer.cornerRadius = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">self</span>.tableView.rowHeight = <span class="hljs-built_in">UITableViewAutomaticDimension</span>;<br>    [<span class="hljs-keyword">self</span> addSubview:<span class="hljs-keyword">self</span>.tableView];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== Setting control layout constraints ===============</span><br>- (<span class="hljs-keyword">void</span>)setupSubViewsConstraints &#123;<br>    <span class="hljs-keyword">self</span>.backgroundButton.frame = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds;<br>    <br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">self</span>.direction) &#123;<br>        <span class="hljs-keyword">case</span> WDComboBoxControlDirectionBottom:&#123;<br>            <span class="hljs-keyword">self</span>.tableView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-built_in">CGRectGetMinX</span>(<span class="hljs-keyword">self</span>.sourceView.frame),<br>                                              <span class="hljs-built_in">CGRectGetMaxY</span>(<span class="hljs-keyword">self</span>.sourceView.frame),<br>                                              <span class="hljs-keyword">self</span>.sourceView.frame.size.width,<br>                                              <span class="hljs-keyword">self</span>.viewHeight);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> WDComboBoxControlDirectionTop:&#123;<br>            <span class="hljs-keyword">self</span>.tableView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-built_in">CGRectGetMinX</span>(<span class="hljs-keyword">self</span>.sourceView.frame),<br>                                              <span class="hljs-built_in">CGRectGetMaxY</span>(<span class="hljs-keyword">self</span>.sourceView.frame) - <span class="hljs-keyword">self</span>.viewHeight - <span class="hljs-keyword">self</span>.sourceView.frame.size.height,<br>                                              <span class="hljs-keyword">self</span>.sourceView.frame.size.width,<br>                                              <span class="hljs-keyword">self</span>.viewHeight);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> WDComboBoxControlDirectionLeading:&#123;<br>            <span class="hljs-keyword">self</span>.tableView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-built_in">CGRectGetMinX</span>(<span class="hljs-keyword">self</span>.sourceView.frame) - <span class="hljs-keyword">self</span>.sourceView.frame.size.width,<br>                                              <span class="hljs-built_in">CGRectGetMinY</span>(<span class="hljs-keyword">self</span>.sourceView.frame),<br>                                              <span class="hljs-keyword">self</span>.sourceView.frame.size.width,<br>                                              <span class="hljs-keyword">self</span>.viewHeight);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> WDComboBoxControlDirectionTrailing:&#123;<br>            <span class="hljs-keyword">self</span>.tableView.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-built_in">CGRectGetMinX</span>(<span class="hljs-keyword">self</span>.sourceView.frame) + <span class="hljs-keyword">self</span>.sourceView.frame.size.width,<br>                                              <span class="hljs-built_in">CGRectGetMinY</span>(<span class="hljs-keyword">self</span>.sourceView.frame),<br>                                              <span class="hljs-keyword">self</span>.sourceView.frame.size.width,<br>                                              <span class="hljs-keyword">self</span>.viewHeight);<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;    <br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== UITableViewDelegate, UITableViewDataSource ===============</span><br>- (<span class="hljs-built_in">NSString</span> *)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView titleForHeaderInSection:(<span class="hljs-built_in">NSInteger</span>)section &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.titleArray[section];<br>&#125;<br><br>- (<span class="hljs-built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="hljs-built_in">UITableView</span> *)tableView &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.dataArray.count;<br>&#125;<br><br>- (<span class="hljs-built_in">NSInteger</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="hljs-built_in">NSInteger</span>)section &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-keyword">self</span>.dataArray[section] count];<br>&#125;<br><br>- (<span class="hljs-built_in">UITableViewCell</span> *)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath &#123;<br>    <br>    <span class="hljs-built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="hljs-string">@&quot;cell&quot;</span>];<br>    <span class="hljs-keyword">if</span> (!cell) &#123;<br>        cell = [[<span class="hljs-built_in">UITableViewCell</span> alloc] initWithStyle:<span class="hljs-built_in">UITableViewCellStyleDefault</span> reuseIdentifier:<span class="hljs-string">@&quot;cell&quot;</span>];<br>    &#125;<br>    cell.textLabel.text = <span class="hljs-keyword">self</span>.dataArray[indexPath.section][indexPath.row];<br>    cell.textLabel.numberOfLines = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">return</span> cell;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)tableView:(<span class="hljs-built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(selectedAtIndexPath:resultTitle: fromSourceView:)]) &#123;<br>        [<span class="hljs-keyword">self</span>.delegate selectedAtIndexPath:indexPath resultTitle:<span class="hljs-keyword">self</span>.dataArray[indexPath.section][indexPath.row] fromSourceView:<span class="hljs-keyword">self</span>.sourceView];<br>        [<span class="hljs-keyword">self</span> dismisssView];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>3、使用方法</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 1、导入头文件</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;WDComboBoxControl.h&quot;</span></span><br><span class="hljs-comment">// 2、遵循代理和数据源</span><br>&lt;WDComboBoxControlDataSource, WDComboBoxControlDelegate&gt;<br><span class="hljs-comment">// 3、实现方法</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== WDComBoxControlDataSource ===============</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titleOfSection;<br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *&gt; *)dataSourceOfColunm;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== WDComBoxControlDelegate ===============</span><br>- (<span class="hljs-keyword">void</span>)selectedAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath resultTitle:(<span class="hljs-built_in">NSString</span> *)title fromSourceView:(<span class="hljs-built_in">UIView</span> *)sourceView;<br><br><br><span class="hljs-comment">// 下面是实例：</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIButton</span> *button;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIButton</span> *button2;<br>- (<span class="hljs-keyword">void</span>)viewDidLoad &#123;<br>    [<span class="hljs-keyword">super</span> viewDidLoad];<br>    <span class="hljs-comment">// Do any additional setup after loading the view.</span><br>    <br>    <span class="hljs-built_in">UIButton</span> *button = [[<span class="hljs-built_in">UIButton</span> alloc] init];<br>    [button setTitleColor:<span class="hljs-built_in">UIColor</span>.blackColor forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>    [button addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonShow:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    [<span class="hljs-keyword">self</span>.view addSubview:button];<br>    button.layer.borderColor = <span class="hljs-built_in">UIColor</span>.lightGrayColor.CGColor;<br>    button.layer.borderWidth = <span class="hljs-number">0.5</span>;<br>    [button setTitle:<span class="hljs-string">@&quot;按钮&quot;</span> forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>    [button mas_makeConstraints:^(MASConstraintMaker *make) &#123;<br>        make.centerX.mas_equalTo(<span class="hljs-keyword">self</span>.view);<br>        make.top.mas_equalTo(<span class="hljs-keyword">self</span>.wdNavigationBar.mas_bottom);<br>        make.width.mas_equalTo(<span class="hljs-number">300</span>);<br><br>    &#125;];<br>    <span class="hljs-keyword">self</span>.button = button;<br>    <br>    <br>    <span class="hljs-built_in">UIButton</span> *button2 = [[<span class="hljs-built_in">UIButton</span> alloc] init];<br>    [button2 setTitleColor:<span class="hljs-built_in">UIColor</span>.blackColor forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>    [button2 addTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(buttonShow:) forControlEvents:<span class="hljs-built_in">UIControlEventTouchUpInside</span>];<br>    [<span class="hljs-keyword">self</span>.view addSubview:button2];<br>    button2.layer.borderColor = <span class="hljs-built_in">UIColor</span>.lightGrayColor.CGColor;<br>    button2.layer.borderWidth = <span class="hljs-number">0.5</span>;<br>    [button2 setTitle:<span class="hljs-string">@&quot;按钮2&quot;</span> forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>    button2.bounds = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">300</span>, <span class="hljs-number">50</span>);<br>    button2.center = <span class="hljs-keyword">self</span>.view.center;<br>    <span class="hljs-keyword">self</span>.button2 = button2;<br>&#125;<br>- (<span class="hljs-keyword">void</span>)buttonShow:(<span class="hljs-built_in">UIButton</span> *)sender &#123;<br>    WDComboBoxControl *view = [[WDComboBoxControl alloc] initViewWithMaxHeight:<span class="hljs-number">400</span> fromView:sender showDirection:WDComboBoxControlDirectionBottom];<br>    view.dataSource = <span class="hljs-keyword">self</span>;<br>    view.delegate = <span class="hljs-keyword">self</span>;<br>    view.backgroundButton.backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0.3</span>];<br>    [view showInView];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== WDComBoxControlDataSource ===============</span><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *)titleOfSection &#123;<br>    <span class="hljs-keyword">return</span> @[<span class="hljs-string">@&quot;安徽省&quot;</span>, <span class="hljs-string">@&quot;浙江省&quot;</span>, <span class="hljs-string">@&quot;江苏省&quot;</span>, <span class="hljs-string">@&quot;安徽省&quot;</span>, <span class="hljs-string">@&quot;浙江省&quot;</span>, <span class="hljs-string">@&quot;江苏省&quot;</span>];<br>&#125;<br><br>- (<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSArray</span>&lt;<span class="hljs-built_in">NSString</span> *&gt; *&gt; *)dataSourceOfColunm &#123;<br>    <span class="hljs-keyword">return</span> @[@[<span class="hljs-string">@&quot;合肥&quot;</span>, <span class="hljs-string">@&quot;芜湖&quot;</span>, <span class="hljs-string">@&quot;安庆&quot;</span>],<br>             @[<span class="hljs-string">@&quot;南京&quot;</span>, <span class="hljs-string">@&quot;苏州&quot;</span>, <span class="hljs-string">@&quot;无锡&quot;</span>],<br>             @[<span class="hljs-string">@&quot;杭州&quot;</span>, <span class="hljs-string">@&quot;宁波&quot;</span>, <span class="hljs-string">@&quot;温州&quot;</span>],<br>             @[<span class="hljs-string">@&quot;合肥&quot;</span>, <span class="hljs-string">@&quot;芜湖&quot;</span>, <span class="hljs-string">@&quot;安庆&quot;</span>],<br>             @[<span class="hljs-string">@&quot;南京&quot;</span>, <span class="hljs-string">@&quot;苏州&quot;</span>, <span class="hljs-string">@&quot;无锡&quot;</span>],<br>             @[<span class="hljs-string">@&quot;杭州&quot;</span>, <span class="hljs-string">@&quot;宁波&quot;</span>, <span class="hljs-string">@&quot;温州&quot;</span>]];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark =============== WDComBoxControlDelegate ===============</span><br>- (<span class="hljs-keyword">void</span>)selectedAtIndexPath:(<span class="hljs-built_in">NSIndexPath</span> *)indexPath resultTitle:(<span class="hljs-built_in">NSString</span> *)title fromSourceView:(<span class="hljs-built_in">UIView</span> *)sourceView &#123;<br>    <span class="hljs-built_in">UIButton</span> *sender = (<span class="hljs-built_in">UIButton</span> *)sourceView;<br>    [sender setTitle:title forState:<span class="hljs-built_in">UIControlStateNormal</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>4、效果图</p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-a1266d179a4f81d9.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p>5、Demo地址（代码都在这里了，就不弄个Demo了，这个可以自定义的地方还有很多，TableView和背景的Button都可以，随心所欲吧！）</p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件图片浏览器</title>
    <link href="/2019/09/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <url>/2019/09/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-32704538aebd1e35.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"><br>一直想写一个自己的图片浏览器，但是自己能力又不是很够，所以一直拖这，最近趁自己时间充裕，自己研究了一下这方面的知识。感觉有以下几个难点：</p><ol><li>显示和消失的转场动画</li><li>手势拖拽</li><li> 图片加载</li></ol><h2 id="加载方式和转场动画"><a href="#加载方式和转场动画" class="headerlink" title="加载方式和转场动画"></a>加载方式和转场动画</h2><ul><li>通过<code>Controller</code>加载：需要使用<code>ViewController</code>实现<code>UIViewControllerAnimatedTransitioning</code>实现转场效果</li><li>通过<code>View</code>加载：使用<code>UIView</code>动画试下转场效果</li></ul><p>转场动画必要元素</p><ol><li>显示时需要<code>fromView</code>的<code>frame</code></li><li>消失时需要<code>toView</code>的<code>frame</code><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4>通过修改当前需要显示图片的<code>CollectionViewCell</code>中<code>ImageView</code>的<code>frame</code>，同时修改当期<code>View</code>的背景颜色透明度<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">WDImageCollectionViewCell *cell = (WDImageCollectionViewCell *)[<span class="hljs-keyword">self</span>.collectionView cellForItemAtIndexPath:[<span class="hljs-built_in">NSIndexPath</span> indexPathForRow:<span class="hljs-keyword">self</span>.tappedIndex inSection:<span class="hljs-number">0</span>]];<br><span class="hljs-built_in">CGRect</span> fromFrame                = [<span class="hljs-keyword">self</span>.originView convertRect:<span class="hljs-keyword">self</span>.originView.bounds toView:cell.contentView];<br>cell.imageView.frame            = fromFrame;<br>[<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>    <span class="hljs-keyword">self</span>.backgroundColor = [[<span class="hljs-built_in">UIColor</span> alloc] initWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">1</span>];<br>    cell.imageView.frame = cell.contentView.bounds;<br>&#125;];<br></code></pre></td></tr></table></figure><h4 id="消失"><a href="#消失" class="headerlink" title="消失"></a>消失</h4>原理与显示相同<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-built_in">CGRect</span> toRect = [<span class="hljs-keyword">self</span>.originView convertRect:<span class="hljs-keyword">self</span>.originView.bounds toView:<span class="hljs-keyword">self</span>.window];<br>[<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>    cell.imageView.clipsToBounds = <span class="hljs-literal">YES</span>;<br>    cell.imageView.frame         = toRect;<br>    <span class="hljs-keyword">self</span>.backgroundColor         = [[<span class="hljs-built_in">UIColor</span> alloc] initWithWhite:<span class="hljs-number">0</span> alpha:<span class="hljs-number">0</span>];<br>&#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>    [<span class="hljs-keyword">self</span> removeFromSuperview];<br>&#125;];<br></code></pre></td></tr></table></figure><h2 id="拖拽的手势"><a href="#拖拽的手势" class="headerlink" title="拖拽的手势"></a>拖拽的手势</h2>将手势添加在<code>CollectionViewCell</code>中<code>ScrollView</code>上，并遵循<code>UIGestureRecognizerDelegate</code>协议，不然会<code>CollectionView</code>无法进行滚动操作。</li><li>声明一个全局属性<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">CGPoint firstTouchPoint<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>实现代理<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - UIGestureRecognizer Delegate Method</span><br>- (<span class="hljs-built_in">BOOL</span>)gestureRecognizer:(<span class="hljs-built_in">UIGestureRecognizer</span> *)gestureRecognizer shouldReceiveTouch:(<span class="hljs-built_in">UITouch</span> *)touch &#123;<br>    firstTouchPoint = [touch locationInView:<span class="hljs-keyword">self</span>.window];<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br>&#125;<br><br>- (<span class="hljs-built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="hljs-built_in">UIGestureRecognizer</span> *)gestureRecognizer &#123;<br>    <span class="hljs-built_in">CGPoint</span> touchPoint = [gestureRecognizer locationInView:<span class="hljs-keyword">self</span>.window];<br>    <span class="hljs-built_in">CGFloat</span> dirTop = firstTouchPoint.y - touchPoint.y;<br>    <span class="hljs-keyword">if</span> (dirTop &gt; <span class="hljs-number">-10</span> &amp;&amp; dirTop &lt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;<br>    &#125;<br>    <span class="hljs-built_in">CGFloat</span> dirLift = firstTouchPoint.x - touchPoint.x;<br>    <span class="hljs-keyword">if</span> (dirLift &gt; <span class="hljs-number">-10</span> &amp;&amp; dirLift &lt; <span class="hljs-number">10</span> &amp;&amp; <span class="hljs-keyword">self</span>.scrollView.frame.size.height &gt; [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds].size.height) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NO</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">YES</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>拖动手势操作，同意代理传给<code>View</code></li></ol><ul><li>协议方法<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@class</span> WDImageCollectionViewCell;<br><span class="hljs-variable">@protocol</span> WDImageCollectionViewCellDelegate &lt;NSObject&gt;<br>- (void)<span class="hljs-attribute">collectionViewCell</span>:(WDImageCollectionViewCell *)cell <span class="hljs-attribute">singleTapActionWithImageUrl</span>:(NSString *)imageUrl;<br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">collectionViewCell</span>:(WDImageCollectionViewCell *)<span class="hljs-selector-tag">cell</span> <span class="hljs-selector-tag">panActionWithPercent</span>:(CGFloat)<span class="hljs-selector-tag">percent</span>;<br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">collectionViewCell</span>:(WDImageCollectionViewCell *)<span class="hljs-selector-tag">cell</span> <span class="hljs-selector-tag">dimssViewWithImageUrl</span>:(NSString *)<span class="hljs-selector-tag">imageUrl</span>;<br>@<span class="hljs-selector-tag">end</span><br></code></pre></td></tr></table></figure></li><li>拖动手势方法<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - UIGestureRecognizer Target Event</span><br><span class="hljs-comment">/** 滑动手势 */</span><br>- (<span class="hljs-keyword">void</span>)didRecognizedPanGuesture:(<span class="hljs-built_in">UIPanGestureRecognizer</span> *)pan &#123;<br>    <span class="hljs-built_in">CGPoint</span> point = [pan translationInView:<span class="hljs-keyword">self</span>.window];<br>    <span class="hljs-built_in">CGFloat</span> scale = <span class="hljs-number">1.0</span> - ABS(point.y) / [[<span class="hljs-built_in">UIScreen</span> mainScreen] bounds].size.height;<br>    <span class="hljs-keyword">switch</span> (pan.state) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-built_in">UIGestureRecognizerStateBegan</span>: &#123;&#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-built_in">UIGestureRecognizerStateChanged</span>:<br>        &#123;<br>            scale = MAX(scale, <span class="hljs-number">0</span>);<br>            <span class="hljs-built_in">CGFloat</span> s = MAX(scale, <span class="hljs-number">0.5</span>);<br>            <span class="hljs-built_in">CGAffineTransform</span> translation = <span class="hljs-built_in">CGAffineTransformMakeTranslation</span>(point.x / s, point.y / s);<br>            <span class="hljs-built_in">CGAffineTransform</span> translationScale = <span class="hljs-built_in">CGAffineTransformMakeScale</span>(s, s);<br>            <span class="hljs-keyword">self</span>.imageView.transform = <span class="hljs-built_in">CGAffineTransformConcat</span>(translation, translationScale);<br>            <span class="hljs-comment">// 传出translationScale，修改背景颜色透明度</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(collectionViewCell:panActionWithPercent:)]) &#123;<br>                [<span class="hljs-keyword">self</span>.delegate collectionViewCell:<span class="hljs-keyword">self</span> panActionWithPercent:scale];<br>            &#125;<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span>  <span class="hljs-built_in">UIGestureRecognizerStateCancelled</span> | <span class="hljs-built_in">UIGestureRecognizerStateFailed</span>:<br>        &#123;<br>            <span class="hljs-keyword">self</span>.imageView.transform = <span class="hljs-built_in">CGAffineTransformIdentity</span>;<br>            <span class="hljs-comment">// 回复初始样式，传出translationScale，修改背景颜色透明度</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(collectionViewCell:panActionWithPercent:)]) &#123;<br>                [<span class="hljs-keyword">self</span>.delegate collectionViewCell:<span class="hljs-keyword">self</span> panActionWithPercent:<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-built_in">UIGestureRecognizerStateEnded</span>:<br>        &#123;<br>            [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>                <span class="hljs-built_in">CGAffineTransform</span> transform1 = <span class="hljs-built_in">CGAffineTransformMakeTranslation</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">self</span>.imageView.transform = <span class="hljs-built_in">CGAffineTransformScale</span>(transform1, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            &#125;];<br>            <br>            <span class="hljs-comment">// 回复初始样式，传出translationScale，修改背景颜色透明度</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(collectionViewCell:panActionWithPercent:)]) &#123;<br>                [<span class="hljs-keyword">self</span>.delegate collectionViewCell:<span class="hljs-keyword">self</span> panActionWithPercent:scale];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (scale &lt; <span class="hljs-number">0.7</span>) &#123;<br>                <span class="hljs-comment">// 拖动结束，让页面消失</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(collectionViewCell:dimssViewWithImageUrl:)]) &#123;<br>                    [<span class="hljs-keyword">self</span>.delegate collectionViewCell:<span class="hljs-keyword">self</span> dimssViewWithImageUrl:<span class="hljs-keyword">self</span>.imageUrl];<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 回复初始样式，传出translationScale，修改背景颜色透明度</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.delegate &amp;&amp; [<span class="hljs-keyword">self</span>.delegate respondsToSelector:<span class="hljs-keyword">@selector</span>(collectionViewCell:panActionWithPercent:)]) &#123;<br>                    [<span class="hljs-keyword">self</span>.delegate collectionViewCell:<span class="hljs-keyword">self</span> panActionWithPercent:<span class="hljs-number">1</span>];<br>                &#125;<br>            &#125;<br>        &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h2>使用<code>SDWebImage</code>获取图片，通过<code>FLAnimatedImageView</code>加载<code>gif</code>图<h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h2><a href="https://github.com/wudan-ios/WDImageBrowser.git">项目地址</a><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="https://upload-images.jianshu.io/upload_images/3334769-daf79ce9d51e3359.gif?imageMogr2/auto-orient/strip"></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>Objective-C</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件：提醒条</title>
    <link href="/2019/08/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E6%8F%90%E9%86%92%E6%9D%A1/"/>
    <url>/2019/08/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E6%8F%90%E9%86%92%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-ccc89345e72081d5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><p>简单的提醒条，代码比较简单，使用容易，代码中目前提供了三种显示的颜色，默认显示文本内容为一行文字，默认高度为20，可以根据自己需求自定义样式。代码同时支持Objective-C和Swift，使用方式有点点差别，详情看代码。</p><h4 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, RemindBarStyle) &#123;<br>    RemindBarStyleInfo, <span class="hljs-comment">// 提醒 ❇️</span><br>    RemindBarStyleWarn, <span class="hljs-comment">// 警告 ⚠️</span><br>    RemindBarStyleError <span class="hljs-comment">// 错误 ❌</span><br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">NS_ENUM</span>(<span class="hljs-built_in">NSInteger</span>, RemindBarPosition) &#123;<br>    RemindBarPositionStatusBar,     <span class="hljs-comment">// 状态栏下面</span><br>    RemindBarPositionNavigationBar, <span class="hljs-comment">// 导航栏下面</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LZRemindBar</span> : <span class="hljs-title">UIView</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 配置显示样式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param style 样式</span><br><span class="hljs-comment"> @param position 位置</span><br><span class="hljs-comment"> @param text 内容</span><br><span class="hljs-comment"> @return return value description</span><br><span class="hljs-comment"> */</span><br>+ (LZRemindBar *)configurationWithStyle:(RemindBarStyle)style showPosition:(RemindBarPosition)position contentText:(<span class="hljs-built_in">NSString</span> *)text;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 显示 并设置显示时间</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param interval 显示时间</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)showBarAfterTimeInterval:(<span class="hljs-built_in">NSTimeInterval</span>)interval;<br><br><span class="hljs-keyword">@end</span><br><span class="hljs-built_in">NS_ASSUME_NONNULL_END</span><br></code></pre></td></tr></table></figure><h4 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;LZRemindBar.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> bar_IsPhoneX  UIApplication.sharedApplication.statusBarFrame.size.height != 20</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> bar_topInterval  bar_IsPhoneX ? UIApplication.sharedApplication.statusBarFrame.size.height : 0</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LZRemindBar</span> ()</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UILabel</span>           *contentLabel; <span class="hljs-comment">//*! 文字Label</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) RemindBarPosition position;      <span class="hljs-comment">//*! 显示位置</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">BOOL</span>              isShowing;     <span class="hljs-comment">//*! 是否正在显示</span><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">LZRemindBar</span></span><br><br>+ (<span class="hljs-keyword">instancetype</span>)remind &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-keyword">static</span> LZRemindBar *remind;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        remind = [[LZRemindBar alloc] init];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> remind;<br>&#125;<br><br>+ (LZRemindBar *)configurationWithStyle:(RemindBarStyle)style showPosition:(RemindBarPosition)position contentText:(<span class="hljs-built_in">NSString</span> *)text &#123;<br>    <br>    <span class="hljs-keyword">if</span> ([LZRemindBar remind].isShowing) &#123;<br>        <span class="hljs-keyword">return</span> [LZRemindBar remind];<br>    &#125;<br>    <br>    [LZRemindBar remind].contentLabel = (&#123;<br>        <span class="hljs-built_in">UILabel</span> *label = [[<span class="hljs-built_in">UILabel</span> alloc] init];<br>        label.backgroundColor = <span class="hljs-built_in">UIColor</span>.clearColor;<br>        label.numberOfLines = <span class="hljs-number">1</span>;<br>        label.textAlignment = <span class="hljs-built_in">NSTextAlignmentCenter</span>;<br>        label.font = [<span class="hljs-built_in">UIFont</span> systemFontOfSize:<span class="hljs-number">13</span>];<br>        label.textColor = <span class="hljs-built_in">UIColor</span>.whiteColor;<br>        [[LZRemindBar remind] addSubview:label];<br>        label.translatesAutoresizingMaskIntoConstraints = <span class="hljs-literal">false</span>;<br>        [[label.leadingAnchor constraintEqualToAnchor:[LZRemindBar remind].leadingAnchor] setActive:<span class="hljs-literal">true</span>];<br>        [[label.trailingAnchor constraintEqualToAnchor:[LZRemindBar remind].trailingAnchor] setActive:<span class="hljs-literal">true</span>];<br>        [[label.topAnchor constraintEqualToAnchor:[LZRemindBar remind].topAnchor] setActive:<span class="hljs-literal">true</span>];<br>        [[label.bottomAnchor constraintEqualToAnchor:[LZRemindBar remind].bottomAnchor] setActive:<span class="hljs-literal">true</span>];<br>        label.text = text;<br>        label;<br>    &#125;);<br>    <br>    [LZRemindBar remind].isShowing = <span class="hljs-literal">true</span>;<br>    [LZRemindBar remind].position  = position;<br>    <br>    <span class="hljs-keyword">switch</span> (style) &#123;<br>        <span class="hljs-keyword">case</span> RemindBarStyleInfo:<br>            [LZRemindBar remind].backgroundColor = [<span class="hljs-built_in">UIColor</span> colorWithRed:<span class="hljs-number">0</span> green:<span class="hljs-number">166.0</span>/<span class="hljs-number">255</span> blue:<span class="hljs-number">124.0</span>/<span class="hljs-number">255</span> alpha:<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> RemindBarStyleWarn:<br>            [LZRemindBar remind].backgroundColor = <span class="hljs-built_in">UIColor</span>.orangeColor;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> RemindBarStyleError:<br>            [LZRemindBar remind].backgroundColor = <span class="hljs-built_in">UIColor</span>.redColor;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (position == RemindBarPositionStatusBar) &#123;<br>        [[LZRemindBar remind] setupShowStatusBarBottomWithStutus:<span class="hljs-literal">true</span>];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [[LZRemindBar remind] setupShowNavigationBarBottomWithStutus:<span class="hljs-literal">true</span>];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> [LZRemindBar remind];<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setupShowStatusBarBottomWithStutus:(<span class="hljs-built_in">BOOL</span>)show &#123;<br>    <span class="hljs-keyword">if</span> (show) &#123;<br>        <span class="hljs-built_in">UIApplication</span>.sharedApplication.delegate.window.windowLevel = bar_IsPhoneX ? <span class="hljs-built_in">UIWindowLevelNormal</span> : <span class="hljs-built_in">UIWindowLevelAlert</span>;<br>        <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, bar_topInterval, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>);<br>        [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>            <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, bar_topInterval, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">20</span>);<br>        &#125;];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>            <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, bar_topInterval, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>);<br>        &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>            <span class="hljs-built_in">UIApplication</span>.sharedApplication.delegate.window.windowLevel = <span class="hljs-built_in">UIWindowLevelNormal</span>;<br>            [<span class="hljs-keyword">self</span> dismissBar];<br>        &#125;];<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setupShowNavigationBarBottomWithStutus:(<span class="hljs-built_in">BOOL</span>)show &#123;<br>    <span class="hljs-keyword">if</span> (show) &#123;<br>        <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">UIApplication</span>.sharedApplication.statusBarFrame.size.height + <span class="hljs-number">44</span>, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>);<br>        [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>            <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">UIApplication</span>.sharedApplication.statusBarFrame.size.height + <span class="hljs-number">44</span>, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">20</span>);<br>        &#125;];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.5</span> animations:^&#123;<br>            <span class="hljs-keyword">self</span>.frame = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">UIApplication</span>.sharedApplication.statusBarFrame.size.height + <span class="hljs-number">44</span>, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>);<br>        &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>            [<span class="hljs-keyword">self</span> dismissBar];<br>        &#125;];<br>    &#125;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)showBarAfterTimeInterval:(<span class="hljs-built_in">NSTimeInterval</span>)interval &#123;<br>    [<span class="hljs-built_in">UIApplication</span>.sharedApplication.delegate.window addSubview:<span class="hljs-keyword">self</span>];<br>    <br>    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(interval * <span class="hljs-built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.position == RemindBarPositionStatusBar) &#123;<br>            [<span class="hljs-keyword">self</span> setupShowStatusBarBottomWithStutus:<span class="hljs-literal">false</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            [<span class="hljs-keyword">self</span> setupShowNavigationBarBottomWithStutus:<span class="hljs-literal">false</span>];<br>        &#125;<br>    &#125;);<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)dismissBar &#123;<br>    <span class="hljs-keyword">self</span>.isShowing = <span class="hljs-literal">false</span>;<br>    [<span class="hljs-keyword">self</span>.contentLabel removeFromSuperview];<br>    [<span class="hljs-keyword">self</span> removeFromSuperview];<br>&#125;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//  参数RemindBarStyle： 显示样式</span><br><span class="hljs-comment">//  参数RemindBarPosition: 显示位置 </span><br><span class="hljs-comment">//  参数contentText: 显示文字内容 </span><br><span class="hljs-comment">//  interval：显示时间</span><br><br><span class="hljs-comment">// Objc</span><br><span class="hljs-selector-attr">[[LZRemindBar configurationWithStyle:RemindBarStyleInfo showPosition:RemindBarPositionStatusBar contentText:@<span class="hljs-string">&quot;这是一个提示&quot;</span>]</span> <span class="hljs-selector-tag">showBarAfterTimeInterval</span>:<span class="hljs-selector-tag">1</span><span class="hljs-selector-class">.2</span>];<br><span class="hljs-comment">// Swift</span><br><span class="hljs-selector-tag">LZRemindBar</span><span class="hljs-selector-class">.configuration</span>(<span class="hljs-attribute">with</span>: .info, <span class="hljs-attribute">show</span>: .statusBar, <span class="hljs-attribute">contentText</span>: <span class="hljs-string">&quot;提示文字&quot;</span>)<span class="hljs-selector-class">.show</span>(<span class="hljs-attribute">afterTimeInterval</span>: <span class="hljs-number">1.2</span>)<br></code></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-0b94020c5e06325c.gif?imageMogr2/auto-orient/strip"></p>]]></content>
    
    
    <categories>
      
      <category>Objective-C</category>
      
      <category>iOS</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件-分段选择器-Swift</title>
    <link href="/2019/07/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E5%BC%80%E5%B1%8F%E5%B9%BF%E5%91%8A/"/>
    <url>/2019/07/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E5%BC%80%E5%B1%8F%E5%B9%BF%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<p>date: 2019-06-01 10:00:00</p><p>tags: </p><ul><li>  自定义控件<br>categories:</li><li>iOS</li><li>Swift</li><li>自定义控件</li></ul><hr><p><img src="https://upload-images.jianshu.io/upload_images/3334769-b2036ea2521c628c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="专用整理图"></p><p>很久没有去写博客了，最近由于公司需求变化，需要做一个新的开屏广告的页面，所以我就简单的去研究了一下。其中显示分为视频和图片，其中图片相比而言实现起来就简单的多了。</p><h3 id="图片加载"><a href="#图片加载" class="headerlink" title="图片加载"></a>图片加载</h3><p>可以使用第三方的加载和缓存，例如：<code>SDWebImage</code>或者<code>Kingfisher</code>。当然也可以使用系统的<code>URLSession</code>下载到本地再进行读取加载。</p><h3 id="视频加载"><a href="#视频加载" class="headerlink" title="视频加载"></a>视频加载</h3><p>我这边利用的就<code>URLSession </code>的<code>downloadTask</code>进行下载到本地再进行播放的。</p><h3 id="视频下载的代码"><a href="#视频下载的代码" class="headerlink" title="视频下载的代码"></a>视频下载的代码</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import UIKit<br><br><span class="hljs-comment">/// 保存URL地址进行匹配</span><br>fileprivate <span class="hljs-keyword">let</span> kURL_DOWNLOAD_PATH = <span class="hljs-string">&quot;WDDownloadUrlPath&quot;</span><br><span class="hljs-comment">/// 保存路径</span><br>fileprivate <span class="hljs-keyword">let</span> kDOCUMENTS_PATH = <span class="hljs-constructor">NSHomeDirectory()</span> + <span class="hljs-string">&quot;/Documents/Advertisement.mp4&quot;</span><br><br>fileprivate <span class="hljs-keyword">class</span> UserDefaultsTools &#123;<br>    <span class="hljs-comment">// 设置地址</span><br>    static func wd<span class="hljs-constructor">_set(<span class="hljs-params">value</span>: String)</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDefaults</span>.</span></span>standard.set<span class="hljs-constructor">Value(<span class="hljs-params">value</span>, <span class="hljs-params">forKey</span>: <span class="hljs-params">kURL_DOWNLOAD_PATH</span>)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 读取地址</span><br>    static func wd<span class="hljs-constructor">_get()</span> -&gt; String &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDefaults</span>.</span></span>standard.<span class="hljs-keyword">object</span>(forKey: kURL_DOWNLOAD_PATH) <span class="hljs-keyword">as</span>? String ?? <span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>&#125;<br><br>fileprivate <span class="hljs-keyword">class</span> FileManagerTools &#123;<br>    <span class="hljs-comment">// 是否存在文件</span><br>    static func is<span class="hljs-constructor">ExistFile(<span class="hljs-params">atPath</span>: String)</span> -&gt; Bool &#123;<br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManager</span>.</span></span>default.file<span class="hljs-constructor">Exists(<span class="hljs-params">atPath</span>: <span class="hljs-params">atPath</span>)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 移动文件</span><br>    static func move<span class="hljs-constructor">File(<span class="hljs-params">fromPath</span>: String, <span class="hljs-params">toPath</span>: String)</span> &#123;<br>        <span class="hljs-keyword">try</span>! <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManager</span>.</span></span>default.move<span class="hljs-constructor">Item(<span class="hljs-params">atPath</span>: <span class="hljs-params">fromPath</span>, <span class="hljs-params">toPath</span>: <span class="hljs-params">toPath</span>)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 删除文件</span><br>    static func delete<span class="hljs-constructor">File(<span class="hljs-params">atPath</span>: String)</span> &#123;<br>        <span class="hljs-keyword">try</span>! <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManager</span>.</span></span>default.remove<span class="hljs-constructor">Item(<span class="hljs-params">atPath</span>: <span class="hljs-params">atPath</span>)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 文件大小</span><br>    static func file<span class="hljs-constructor">Size(<span class="hljs-params">atPath</span>: String)</span> -&gt; Float &#123;<br>        <span class="hljs-keyword">if</span> self.is<span class="hljs-constructor">ExistFile(<span class="hljs-params">atPath</span>: <span class="hljs-params">kDOCUMENTS_PATH</span>)</span> &#123;<br>            <span class="hljs-keyword">let</span> attributes = <span class="hljs-keyword">try</span>! <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManager</span>.</span></span>default.attributes<span class="hljs-constructor">OfItem(<span class="hljs-params">atPath</span>: <span class="hljs-params">atPath</span>)</span><br>            <span class="hljs-keyword">let</span> size = attributes<span class="hljs-literal">[F<span class="hljs-identifier">ileAttributeKey</span>.<span class="hljs-identifier">size</span>]</span> <span class="hljs-keyword">as</span>! Int<br>            return <span class="hljs-constructor">Float(<span class="hljs-params">size</span>)</span><br>        &#125;<br>        return <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> WDLaunchADDownloader: NSObject &#123;<br>    <span class="hljs-comment">/// 下载视频的路径</span><br>    <span class="hljs-keyword">private</span> var downloadUrlPath: String = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment">/// 下载的Session</span><br>    <span class="hljs-keyword">private</span> var session: URLSession!<br>    <span class="hljs-comment">/// 下载的任务</span><br>    <span class="hljs-keyword">private</span> var downloadTask: URLSessionDownloadTask!<br>    <span class="hljs-comment">/// 记录是否在下载</span><br>    <span class="hljs-keyword">private</span> var downloading: Bool = <span class="hljs-literal">false</span><br>    <span class="hljs-comment">/// 记录已下载的数据</span><br>    <span class="hljs-keyword">private</span> var downloadData: Data?<br><br>    <span class="hljs-comment">/* 下载视频 */</span><br>    static func download<span class="hljs-constructor">Video(<span class="hljs-params">path</span>: String)</span> -&gt; String &#123;<br>        <span class="hljs-keyword">let</span> downloader = <span class="hljs-constructor">WDLaunchADDownloader()</span><br>        return downloader.setup<span class="hljs-constructor">Download(<span class="hljs-params">with</span>: <span class="hljs-params">path</span>)</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> func setup<span class="hljs-constructor">Download(<span class="hljs-params">with</span> <span class="hljs-params">path</span>: String)</span> -&gt; String &#123;<br>        downloadUrlPath = path <span class="hljs-comment">// 获取视频播放网络路径</span><br><br>        <span class="hljs-keyword">let</span> configuration = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLSessionConfiguration</span>.</span></span>default<br>        configuration.isDiscretionary = <span class="hljs-literal">true</span><br>        session = <span class="hljs-constructor">URLSession(<span class="hljs-params">configuration</span>: <span class="hljs-params">configuration</span>, <span class="hljs-params">delegate</span>: <span class="hljs-params">self</span>, <span class="hljs-params">delegateQueue</span>: <span class="hljs-params">nil</span>)</span><br>        <br>        <span class="hljs-keyword">let</span> request = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">URLRequest</span>.</span></span>init(url: <span class="hljs-constructor">URL(<span class="hljs-params">string</span>: <span class="hljs-params">path</span>)</span>!)<br>        downloadTask = session.download<span class="hljs-constructor">Task(<span class="hljs-params">with</span>: <span class="hljs-params">request</span>)</span><br>        <br>        <span class="hljs-comment">// 网址不同，删除原本的，下载最新的</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDefaultsTools</span>.</span></span>wd<span class="hljs-constructor">_get()</span> != path &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDefaultsTools</span>.</span></span>wd<span class="hljs-constructor">_set(<span class="hljs-params">value</span>: <span class="hljs-string">&quot;&quot;</span>)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManagerTools</span>.</span></span>is<span class="hljs-constructor">ExistFile(<span class="hljs-params">atPath</span>: <span class="hljs-params">kDOCUMENTS_PATH</span>)</span> &#123;<br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManagerTools</span>.</span></span>delete<span class="hljs-constructor">File(<span class="hljs-params">atPath</span>: <span class="hljs-params">kDOCUMENTS_PATH</span>)</span><br>            &#125;<br>            <span class="hljs-comment">// 开始下载</span><br>            start<span class="hljs-constructor">Download()</span><br>        &#125;<br>        <br>        <span class="hljs-comment">// 如果已存在文件 就加载视频 否则加载图片</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManagerTools</span>.</span></span>is<span class="hljs-constructor">ExistFile(<span class="hljs-params">atPath</span>: <span class="hljs-params">kDOCUMENTS_PATH</span>)</span> &#123;<br>            return kDOCUMENTS_PATH<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            return <span class="hljs-string">&quot;&quot;</span><br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// MARK: - 开始下载</span><br>    <span class="hljs-keyword">private</span> func start<span class="hljs-constructor">Download()</span> &#123;<br>        downloading = <span class="hljs-literal">true</span><br>        downloadTask.resume<span class="hljs-literal">()</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// MARK: - 暂停下载</span><br>    <span class="hljs-keyword">private</span> func pause<span class="hljs-constructor">Download()</span> &#123;<br>        downloadTask.cancel &#123; <span class="hljs-literal">[<span class="hljs-identifier">weak</span> <span class="hljs-identifier">self</span>]</span> (resumeData) <span class="hljs-keyword">in</span><br>            self?.downloadData = resumeData<br>        &#125;<br>        downloading = <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><br>extension WDLaunchADDownloader: URLSessionDownloadDelegate &#123;<br>    <span class="hljs-comment">// 下载代理方法，下载结束</span><br>    func url<span class="hljs-constructor">Session(<span class="hljs-params">_</span> <span class="hljs-params">session</span>: URLSession, <span class="hljs-params">downloadTask</span>: URLSessionDownloadTask, <span class="hljs-params">didFinishDownloadingTo</span> <span class="hljs-params">location</span>: URL)</span> &#123;<br>        <span class="hljs-keyword">let</span> locationPath = location.path<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManagerTools</span>.</span></span>move<span class="hljs-constructor">File(<span class="hljs-params">fromPath</span>: <span class="hljs-params">locationPath</span>, <span class="hljs-params">toPath</span>: <span class="hljs-params">kDOCUMENTS_PATH</span>)</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDefaultsTools</span>.</span></span>wd<span class="hljs-constructor">_set(<span class="hljs-params">value</span>: <span class="hljs-params">downloadUrlPath</span>)</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 下载代理方法，监听下载进度</span><br>    func url<span class="hljs-constructor">Session(<span class="hljs-params">_</span> <span class="hljs-params">session</span>: URLSession, <span class="hljs-params">downloadTask</span>: URLSessionDownloadTask, <span class="hljs-params">didWriteData</span> <span class="hljs-params">bytesWritten</span>: Int64, <span class="hljs-params">totalBytesWritten</span>: Int64, <span class="hljs-params">totalBytesExpectedToWrite</span>: Int64)</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FileManagerTools</span>.</span></span>file<span class="hljs-constructor">Size(<span class="hljs-params">atPath</span>: <span class="hljs-params">kDOCUMENTS_PATH</span>)</span> &gt;= <span class="hljs-constructor">Float(<span class="hljs-params">totalBytesExpectedToWrite</span>)</span> &#123;<br>            pause<span class="hljs-constructor">Download()</span><br>            return<br>        &#125;<br>        print(<span class="hljs-constructor">String(<span class="hljs-params">format</span>: <span class="hljs-string">&quot;🍉 Advertising Video Download Progress: %0.2f&quot;</span>, Float(<span class="hljs-params">totalBytesWritten</span>)</span><span class="hljs-operator"> / </span><span class="hljs-constructor">Float(<span class="hljs-params">totalBytesExpectedToWrite</span>)</span>))<br>    &#125;<br>    <br>    <span class="hljs-comment">// 如果下载失败了</span><br>    func url<span class="hljs-constructor">Session(<span class="hljs-params">_</span> <span class="hljs-params">session</span>: URLSession, <span class="hljs-params">task</span>: URLSessionTask, <span class="hljs-params">didCompleteWithError</span> <span class="hljs-params">error</span>: Error?)</span> &#123;<br>        <span class="hljs-keyword">if</span> error != nil &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">UserDefaultsTools</span>.</span></span>wd<span class="hljs-constructor">_set(<span class="hljs-params">value</span>: <span class="hljs-string">&quot;&quot;</span>)</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="视频播放代码"><a href="#视频播放代码" class="headerlink" title="视频播放代码"></a>视频播放代码</h3><p>其中获取到加载的种类(图片、视频)，页面进行相应的布局</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><span class="hljs-keyword">import</span> AVFoundation<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WDLaunchADPlayerManager</span>: <span class="hljs-title">NSObject</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> share <span class="hljs-operator">=</span> <span class="hljs-type">WDLaunchADPlayerManager</span>()<br>    <br>    <span class="hljs-keyword">var</span> playerItem: <span class="hljs-type">AVPlayerItem</span>!<br>    <span class="hljs-keyword">var</span> player: <span class="hljs-type">AVPlayer</span>!<br>    <span class="hljs-keyword">var</span> playerLayer: <span class="hljs-type">CALayer</span>!<br>    <br>    <span class="hljs-comment">// 开始播放 &lt;播放下载好再本地文件夹里面的视频文件&gt;</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">playItem</span>(<span class="hljs-params">with</span> <span class="hljs-params">url</span>: <span class="hljs-type">String</span>)</span> &#123;<br>        playerItem <span class="hljs-operator">=</span> <span class="hljs-type">AVPlayerItem</span>(url: <span class="hljs-type">URL</span>(fileURLWithPath: url))<br>        player <span class="hljs-operator">=</span> <span class="hljs-type">AVPlayer</span>(playerItem: playerItem)<br>        playerLayer <span class="hljs-operator">=</span> <span class="hljs-type">AVPlayerLayer</span>(player: player)<br>        player.usesExternalPlaybackWhileExternalScreenIsActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        player.play()<br>        player.volume <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">// 静音播放</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 停止播放</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stopPlay</span>()</span> &#123;<br>        player.pause()<br>        player <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="页面显示"><a href="#页面显示" class="headerlink" title="页面显示"></a>页面显示</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import UIKit<br>import SDWebImage<br><br><span class="hljs-keyword">class</span> WDLaunchADController: UIViewController &#123;<br>    <br>    <span class="hljs-comment">/// 播放器的layer层</span><br>    <span class="hljs-keyword">private</span> var playerLayer: CALayer = <span class="hljs-constructor">CALayer()</span><br>    <br>    <span class="hljs-comment">/// 图片加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> imageView: UIImageView = &#123;<br>        <span class="hljs-keyword">let</span> imageV = <span class="hljs-constructor">UIImageView()</span><br>        imageV.contentMode = .scaleAspectFill<br>        imageV.clipsToBounds = <span class="hljs-literal">true</span><br>        return imageV<br>    &#125;<span class="hljs-literal">()</span><br>    <br>    deinit &#123;<br>        print(<span class="hljs-string">&quot;==[\(type(of: self))] deinit==&quot;</span>)<br>    &#125;<br>    <br>    override func view<span class="hljs-constructor">DidLoad()</span> &#123;<br>        super.view<span class="hljs-constructor">DidLoad()</span><br>        view.backgroundColor = .white<br>    &#125;<br>    <br>    <span class="hljs-comment">// 配置页面样式</span><br>    func setup(<span class="hljs-keyword">with</span> adType: WDLaunchADType, url: String, bottomLogoView: UIView? = <span class="hljs-constructor">UIView()</span>, bottomLogoViewHeight: CGFloat = <span class="hljs-number">180</span>) &#123;<br>        <span class="hljs-keyword">if</span> adType<span class="hljs-operator"> == </span>.image &#123;<br>            imageView.isUserInteractionEnabled = <span class="hljs-literal">true</span><br>            view.add<span class="hljs-constructor">Subview(<span class="hljs-params">imageView</span>)</span><br>            imageView.sd<span class="hljs-constructor">_setImage(<span class="hljs-params">with</span>: URL(<span class="hljs-params">string</span>: <span class="hljs-params">url</span>)</span>, completed: nil)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WDLaunchADPlayerManager</span>.</span></span>share.play<span class="hljs-constructor">Item(<span class="hljs-params">with</span>: <span class="hljs-params">url</span>)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> layer = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WDLaunchADPlayerManager</span>.</span></span>share.playerLayer &#123;<br>                self.view.layer.add<span class="hljs-constructor">Sublayer(<span class="hljs-params">layer</span>)</span><br>                playerLayer = layer<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> logoView = bottomLogoView &#123;<br>            view.add<span class="hljs-constructor">Subview(<span class="hljs-params">logoView</span>)</span><br>            logoView.frame = <span class="hljs-constructor">CGRect(<span class="hljs-params">x</span>: 0, <span class="hljs-params">y</span>: <span class="hljs-params">view</span>.<span class="hljs-params">frame</span>.<span class="hljs-params">height</span> - <span class="hljs-params">bottomLogoViewHeight</span>, <span class="hljs-params">width</span>: <span class="hljs-params">view</span>.<span class="hljs-params">frame</span>.<span class="hljs-params">width</span>, <span class="hljs-params">height</span>: <span class="hljs-params">bottomLogoViewHeight</span>)</span><br>            <span class="hljs-keyword">if</span> adType<span class="hljs-operator"> == </span>.image &#123;<br>                imageView.frame = <span class="hljs-constructor">CGRect(<span class="hljs-params">x</span>: 0, <span class="hljs-params">y</span>: 0, <span class="hljs-params">width</span>: <span class="hljs-params">view</span>.<span class="hljs-params">frame</span>.<span class="hljs-params">width</span>, <span class="hljs-params">height</span>: <span class="hljs-params">view</span>.<span class="hljs-params">frame</span>.<span class="hljs-params">height</span> - <span class="hljs-params">bottomLogoViewHeight</span>)</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                playerLayer.frame = <span class="hljs-constructor">CGRect(<span class="hljs-params">x</span>: 0, <span class="hljs-params">y</span>: 0, <span class="hljs-params">width</span>: <span class="hljs-params">view</span>.<span class="hljs-params">frame</span>.<span class="hljs-params">width</span>, <span class="hljs-params">height</span>: <span class="hljs-params">view</span>.<span class="hljs-params">frame</span>.<span class="hljs-params">height</span>)</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> adType<span class="hljs-operator"> == </span>.image &#123;<br>                imageView.frame = view.bounds<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                playerLayer.frame = view.bounds<br>            &#125;<br>        &#125;<br>    &#125;<br>        <br>    override var shouldAutorotate: Bool &#123;<br>        return <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    override var prefersHomeIndicatorAutoHidden: Bool &#123;<br>        return <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加载控制代码"><a href="#加载控制代码" class="headerlink" title="加载控制代码"></a>加载控制代码</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">WDLaunchADType</span> </span>&#123;<br>    <span class="hljs-keyword">case</span> image<br>    <span class="hljs-keyword">case</span> video<br>&#125;<br><br><span class="hljs-comment">/// 是否是刘海屏系列</span><br><span class="hljs-keyword">var</span> kIS_IPHONEX: <span class="hljs-type">Bool</span> &#123;<br>    <span class="hljs-keyword">var</span> iPhoneX <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-type">UIDevice</span>.current.userInterfaceIdiom <span class="hljs-operator">!=</span> .phone &#123;<br>        <span class="hljs-keyword">return</span> iPhoneX<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">#available</span>(<span class="hljs-keyword">iOS</span> <span class="hljs-number">11.0</span>, <span class="hljs-operator">*</span>) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> mainWindow <span class="hljs-operator">=</span> <span class="hljs-type">UIApplication</span>.shared.delegate<span class="hljs-operator">?</span>.window &#123;<br>            <span class="hljs-keyword">if</span> (mainWindow<span class="hljs-operator">?</span>.safeAreaInsets.bottom)<span class="hljs-operator">!</span> <span class="hljs-operator">&gt;</span> <span class="hljs-type">CGFloat</span>(<span class="hljs-number">0.0</span>) &#123;<br>                iPhoneX <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> iPhoneX<br>&#125;<br><br><span class="hljs-comment">/// 状态栏高度</span><br><span class="hljs-keyword">var</span> kSTATUS_HEIGHT: <span class="hljs-type">CGFloat</span> &#123;<br>    <span class="hljs-keyword">return</span> kIS_IPHONEX <span class="hljs-operator">?</span> <span class="hljs-type">UIApplication</span>.shared.statusBarFrame.height : <span class="hljs-number">22</span><br>&#125;<br><br><span class="hljs-comment">// MARK: - Main</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WDLaunchAD</span>: <span class="hljs-title">NSObject</span> </span>&#123;<br>    <span class="hljs-comment">// MARK: Public</span><br>    <span class="hljs-comment">/// 静态方法</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// - Parameters:</span><br>    <span class="hljs-comment">///   - adType: 广告类型 `图片` `视频&lt;无声音&gt;`</span><br>    <span class="hljs-comment">///   - url: 广告地址</span><br>    <span class="hljs-comment">///   - durition: 显示时间</span><br>    <span class="hljs-comment">///   - bottomView: 底部视图</span><br>    <span class="hljs-comment">///   - buttomViewHeight: 底部视图高度</span><br>    <span class="hljs-comment">///   - clickBlock: 广告点击事件回调</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setup</span>(<span class="hljs-params">with</span> <span class="hljs-params">adType</span>: <span class="hljs-type">WDLaunchADType</span> <span class="hljs-operator">=</span> .image,</span><br><span class="hljs-function">                      <span class="hljs-params">url</span>: <span class="hljs-type">String</span>, <span class="hljs-params">durition</span>: <span class="hljs-type">Int</span>,</span><br><span class="hljs-function">                      <span class="hljs-params">bottomView</span>: <span class="hljs-type">UIView</span>? <span class="hljs-operator">=</span> <span class="hljs-type">UIView</span>(),</span><br><span class="hljs-function">                      <span class="hljs-params">buttomViewHeight</span>: <span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,</span><br><span class="hljs-function">                      <span class="hljs-params">clickBlock</span>: <span class="hljs-keyword">@escaping</span> (() -&gt; <span class="hljs-type">Void</span>))</span> &#123;<br>        <br>        <span class="hljs-keyword">let</span> manager <span class="hljs-operator">=</span> <span class="hljs-type">WDLaunchAD</span>()<br>        manager.show(with: adType, url: url, durition: durition, bottomView: bottomView, buttomViewHeight: buttomViewHeight ,clickBlock: clickBlock)<br>    &#125;<br>    <br>    <span class="hljs-comment">// MARK: Private</span><br>    <span class="hljs-comment">/// 页面显示的window根控制器，除了倒计时按钮，其他元素在控制器中配置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> wdLaunchADViewController <span class="hljs-operator">=</span> <span class="hljs-type">WDLaunchADController</span>()<br>    <span class="hljs-comment">/// 显示的时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> timerInterval: <span class="hljs-type">Int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment">/// 定时器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> timer: <span class="hljs-type">Timer</span>?<br>    <span class="hljs-comment">/// 点击事件回调</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> clickBlockHandle: (() -&gt; <span class="hljs-type">Void</span>)<span class="hljs-operator">?</span><br>    <span class="hljs-comment">/// 页面显示的window</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> window: <span class="hljs-type">UIWindow</span> <span class="hljs-operator">=</span> &#123;<br>        <span class="hljs-keyword">let</span> window <span class="hljs-operator">=</span> <span class="hljs-type">UIWindow</span>.<span class="hljs-keyword">init</span>(frame: <span class="hljs-type">UIScreen</span>.main.bounds)<br>        window.rootViewController<span class="hljs-operator">?</span>.view.backgroundColor <span class="hljs-operator">=</span> .black<br>        window.rootViewController<span class="hljs-operator">?</span>.view.isUserInteractionEnabled <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        window.windowLevel <span class="hljs-operator">=</span> <span class="hljs-type">UIWindow</span>.<span class="hljs-type">Level</span>.statusBar <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>        window.isHidden <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        window.alpha <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> window<br>    &#125;()<br>    <span class="hljs-comment">/// 倒计时按钮</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">let</span> timeButton: <span class="hljs-type">UIButton</span> <span class="hljs-operator">=</span> &#123;<br>        <span class="hljs-keyword">let</span> button <span class="hljs-operator">=</span> <span class="hljs-type">UIButton</span>(type: .custom)<br>        button.backgroundColor <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>(white: <span class="hljs-number">0</span>, alpha: <span class="hljs-number">0.5</span>)<br>        button.setTitleColor(.white, for: .normal)<br>        button.titleLabel<span class="hljs-operator">?</span>.font <span class="hljs-operator">=</span> <span class="hljs-type">UIFont</span>.systemFont(ofSize: <span class="hljs-number">15</span>)<br>        <span class="hljs-keyword">return</span> button<br>    &#125;()<br>&#125;<br><br><span class="hljs-comment">// MARK: - 页面初始化与销毁</span><br><span class="hljs-keyword">fileprivate</span> <span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">WDLaunchAD</span> </span>&#123;<br>    <span class="hljs-comment">// 控制器初始化页面</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">show</span>(<span class="hljs-params">with</span> <span class="hljs-params">adType</span>: <span class="hljs-type">WDLaunchADType</span>, <span class="hljs-params">url</span>: <span class="hljs-type">String</span>, <span class="hljs-params">durition</span>: <span class="hljs-type">Int</span>, <span class="hljs-params">bottomView</span>: <span class="hljs-type">UIView</span>?, <span class="hljs-params">buttomViewHeight</span>: <span class="hljs-type">CGFloat</span>, <span class="hljs-params">clickBlock</span>: <span class="hljs-keyword">@escaping</span> (() -&gt; <span class="hljs-type">Void</span>))</span> &#123;<br>        clickBlockHandle <span class="hljs-operator">=</span> clickBlock<br>        timerInterval <span class="hljs-operator">=</span> durition<br>        window.rootViewController <span class="hljs-operator">=</span> wdLaunchADViewController<br>        wdLaunchADViewController.view.addGestureRecognizer(<span class="hljs-type">UITapGestureRecognizer</span>.<span class="hljs-keyword">init</span>(target: <span class="hljs-keyword">self</span>, action: #selector(adGuestureTargetAction)))<br>        wdLaunchADViewController.setup(with: adType, url: url, bottomLogoView: bottomView, bottomLogoViewHeight: buttomViewHeight)<br>        addTimeButton()<br>        <br>        <span class="hljs-comment">// 开始倒计时</span><br>        <span class="hljs-type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="hljs-operator">+</span> <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">self</span>.timer <span class="hljs-operator">=</span> <span class="hljs-type">Timer</span>.scheduledTimer(timeInterval: <span class="hljs-number">1</span>, target: <span class="hljs-keyword">self</span>, selector: #selector(<span class="hljs-keyword">self</span>.timerDown(timer:)), userInfo: <span class="hljs-literal">nil</span>, repeats: <span class="hljs-literal">true</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> timer <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.timer &#123;<br>                timer.fire()<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 移除定时器与视图</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">removeWindow</span>()</span> &#123;<br>        <span class="hljs-comment">// 停止播放视频</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-type">WDLaunchADPlayerManager</span>.share.player <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span>  &#123;<br>            <span class="hljs-type">WDLaunchADPlayerManager</span>.share.stopPlay()<br>        &#125;<br>        <br>        <span class="hljs-comment">// 停止倒计时并移除</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> timer <span class="hljs-operator">=</span> timer &#123;<br>            timer.invalidate()<br>        &#125;<br>        timer <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>        <br>        <span class="hljs-comment">// 移除当前视图</span><br>        <span class="hljs-type">UIView</span>.transition(with: window, duration: <span class="hljs-number">0.8</span>, options: <span class="hljs-type">UIView</span>.<span class="hljs-type">AnimationOptions</span>.curveEaseOut, animations: &#123;<br>            <span class="hljs-keyword">self</span>.window.alpha <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        &#125;) &#123; (finished) <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">self</span>.window.rootViewController <span class="hljs-operator">=</span> <span class="hljs-literal">nil</span><br>            <span class="hljs-keyword">self</span>.window.removeFromSuperview()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// MARK: - 页面控件配置</span><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">WDLaunchAD</span> </span>&#123;<br>    <span class="hljs-comment">// 配置时间按钮</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addTimeButton</span>()</span> &#123;<br>        timeButton.setTitle(<span class="hljs-string">&quot;   跳过 <span class="hljs-subst">\(timerInterval)</span>   &quot;</span>, for: .normal)<br>        timeButton.addTarget(<span class="hljs-keyword">self</span>, action: #selector(buttonTargetAction(sender:)), for: .touchUpInside)<br>        window.addSubview(timeButton)<br>        timeButton.translatesAutoresizingMaskIntoConstraints <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        window.addConstraints([<br>            <span class="hljs-type">NSLayoutConstraint</span>(item: timeButton, attribute: .trailing, relatedBy: .equal, toItem: window, attribute: .trailing, multiplier: <span class="hljs-number">1</span>, constant: <span class="hljs-operator">-</span><span class="hljs-number">15</span>),<br>            <span class="hljs-type">NSLayoutConstraint</span>(item: timeButton, attribute: .top, relatedBy: .equal, toItem: window, attribute: .top, multiplier: <span class="hljs-number">1</span>, constant: kSTATUS_HEIGHT),<br>        ])<br>        timeButton.layoutIfNeeded()<br>        timeButton.layer.cornerRadius <span class="hljs-operator">=</span> timeButton.frame.height <span class="hljs-operator">/</span> <span class="hljs-number">2.0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// MARK: - 倒计时与倒计时点击事件</span><br><span class="hljs-keyword">@objc</span> <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">WDLaunchAD</span> </span>&#123;<br>    <span class="hljs-comment">// 倒计时</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">timerDown</span>(<span class="hljs-params">timer</span>: <span class="hljs-type">Timer</span>)</span> &#123;<br>        timerInterval <span class="hljs-operator">-=</span> <span class="hljs-number">1</span><br>        timeButton.setTitle(<span class="hljs-string">&quot;   跳过 <span class="hljs-subst">\(timerInterval)</span>   &quot;</span>, for: .normal)<br>        <span class="hljs-keyword">if</span> timerInterval <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>            removeWindow()<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 广告页移除</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buttonTargetAction</span>(<span class="hljs-params">sender</span>: <span class="hljs-type">UIButton</span>)</span> &#123;<br>        removeWindow()<br>    &#125;<br>    <br>    <span class="hljs-comment">// 点击手势</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adGuestureTargetAction</span>()</span> &#123;<br>        <span class="hljs-keyword">if</span> clickBlockHandle <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span> &#123;<br>            clickBlockHandle<span class="hljs-operator">!</span>()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>在<code>AppDelgate</code>中的<code>didFinishLaunchingWithOptions</code>方法中调用方法。<br>我这为了适应变化的需要，提供了相对自由的显示方式</p><p>底部的logo视图是可以自定义的，传入对应显示的高度即可。</p><p>图片地址</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">let imagePath = <span class="hljs-string">&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1567682065374&amp;di=4c2a4d2008a4e951b34b3d130db19d12&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201704%2F14%2F20170414155109_Cmz24.jpeg&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>仅显示图片</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">WDLaunchAD</span><span class="hljs-selector-class">.setup</span>(<span class="hljs-attribute">with</span>: .image, <span class="hljs-attribute">url</span>: imagePath, <span class="hljs-attribute">durition</span>: <span class="hljs-number">5</span>, <span class="hljs-attribute">bottomView</span>: WDLaunchADBottomLogoView(), <span class="hljs-attribute">buttomViewHeight</span>: <span class="hljs-number">180</span>) &#123;<br>    <span class="hljs-selector-tag">print</span>(<span class="hljs-string">&quot;✨ 点击了广告&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3334769-d6fbb2567bb19116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="仅显示图片"></p></li><li><p>显示图片与底部logo视图<br>底部视图代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// MARK: - 底部logo视图</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WDLaunchADBottomLogoView</span>: <span class="hljs-title">UIView</span> </span>&#123;<br>    <span class="hljs-comment">// logo</span><br>    <span class="hljs-keyword">let</span> logoImageView: <span class="hljs-type">UIImageView</span> <span class="hljs-operator">=</span> &#123;<br>        <span class="hljs-keyword">let</span> imageV <span class="hljs-operator">=</span> <span class="hljs-type">UIImageView</span>()<br>        imageV.image <span class="hljs-operator">=</span> <span class="hljs-type">UIImage</span>(named: <span class="hljs-string">&quot;nav-logo-4c7bbafe27adc892f3046e6978459bac&quot;</span>)<span class="hljs-operator">?</span>.withRenderingMode(.alwaysTemplate)<br>        imageV.tintColor <span class="hljs-operator">=</span> .red<br>        <span class="hljs-keyword">return</span> imageV<br>    &#125;()<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">init</span>(<span class="hljs-params">frame</span>: <span class="hljs-type">CGRect</span>)</span> &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(frame: frame)<br>        setupSubviews()<br>        setupSubviewsLayouts()<br>    &#125;<br>    <br>    <span class="hljs-keyword">required</span> <span class="hljs-function"><span class="hljs-keyword">init?</span>(<span class="hljs-params">coder</span> <span class="hljs-params">aDecoder</span>: <span class="hljs-type">NSCoder</span>)</span> &#123;<br>        <span class="hljs-built_in">fatalError</span>(<span class="hljs-string">&quot;init(coder:) has not been implemented&quot;</span>)<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// MARK: 底部logo视图页面配置与布局</span><br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">WDLaunchADBottomLogoView</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setupSubviews</span>()</span> &#123;<br>        backgroundColor <span class="hljs-operator">=</span> .white<br>        addSubview(logoImageView)<br>        logoImageView.translatesAutoresizingMaskIntoConstraints <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setupSubviewsLayouts</span>()</span> &#123;<br>        addConstraints([<br>            <span class="hljs-type">NSLayoutConstraint</span>(item: logoImageView, attribute: .centerX, relatedBy: .equal, toItem: <span class="hljs-keyword">self</span>, attribute: .centerX, multiplier: <span class="hljs-number">1</span>, constant: <span class="hljs-number">0</span>),<br>            <span class="hljs-type">NSLayoutConstraint</span>(item: logoImageView, attribute: .centerY, relatedBy: .equal, toItem: <span class="hljs-keyword">self</span>, attribute: .centerY, multiplier: <span class="hljs-number">1</span>, constant: <span class="hljs-number">0</span>)<br>        ])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加载代码</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">WDLaunchAD</span><span class="hljs-selector-class">.setup</span>(<span class="hljs-attribute">with</span>: .image, <span class="hljs-attribute">url</span>: imagePath, <span class="hljs-attribute">durition</span>: <span class="hljs-number">5</span>, <span class="hljs-attribute">bottomView</span>: WDLaunchADBottomLogoView(), <span class="hljs-attribute">buttomViewHeight</span>: <span class="hljs-number">180</span>) &#123;<br>    <span class="hljs-selector-tag">print</span>(<span class="hljs-string">&quot;✨ 点击了广告&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3334769-50c5290afad2df1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="图片+底部logo视图"></p></li><li><p>加载视频<br>首先需要现在有网的环境缓存到本地，我这边的思想是，首次进入App默认加载图片，然后下载广告的视频到本地。再次进入的时候，判断是否是缓存的视频，是则进行播放。是否加载的<code>URL</code>与缓存的不同，则依旧加载图片，并下载最新<code>URL</code>下的视频。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> path = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WDLaunchADDownloader</span>.</span></span>download<span class="hljs-constructor">Video(<span class="hljs-params">path</span>: <span class="hljs-string">&quot;http://wvideo.spriteapp.cn/video/2018/0514/eede6198571f11e8b5ca842b2b4c75ab_wpd.mp4&quot;</span>)</span><br>    <span class="hljs-keyword">if</span> path.count &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WDLaunchAD</span>.</span></span>setup(<span class="hljs-keyword">with</span>: .video, url: path, durition: <span class="hljs-number">5</span>, bottomView: <span class="hljs-constructor">WDLaunchADBottomLogoView()</span>, buttomViewHeight: <span class="hljs-number">180</span>) &#123;<br>            print(<span class="hljs-string">&quot;✨ 点击了广告&quot;</span>)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">WDLaunchAD</span>.</span></span>setup(<span class="hljs-keyword">with</span>: .image, url: imagePath, durition: <span class="hljs-number">5</span>, bottomView: <span class="hljs-constructor">WDLaunchADBottomLogoView()</span>, buttomViewHeight: <span class="hljs-number">180</span>) &#123;<br>            print(<span class="hljs-string">&quot;✨ 点击了广告&quot;</span>)<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>效果图，没有找到合适大小的视频就凑合着用了。</p></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3334769-fad275cc7fe23ab3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375" alt="视频播放"></p><blockquote><p>说明:</p><ol><li>页面消失的动画，没有做过多的处理</li><li>视频没有做循环播放</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>Swift</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件-分段选择器-Swift</title>
    <link href="/2019/06/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E5%88%86%E6%AE%B5%E9%80%89%E6%8B%A9%E5%99%A8-Swift/"/>
    <url>/2019/06/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E5%88%86%E6%AE%B5%E9%80%89%E6%8B%A9%E5%99%A8-Swift/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-3932cbca22e906ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"><br>废话不多说，直接上代码</p><h5 id="1、数据源方法"><a href="#1、数据源方法" class="headerlink" title="1、数据源方法"></a>1、数据源方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// MARK: ============ SegmentSelectorManagerDataSource ============</span><br><span class="hljs-keyword">@objc</span> <span class="hljs-class"><span class="hljs-keyword">protocol</span>  <span class="hljs-title">SegmentSelectorManagerDataSource</span>:<span class="hljs-title">NSObjectProtocol</span> </span>&#123;<br>    <br>    <span class="hljs-comment">/// 主要配置 -&gt; 必须要实现</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">nameOfSliderItems</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">childViewControllers</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">Array</span>&lt;<span class="hljs-type">UIViewController</span>&gt;<br>    <br>    <span class="hljs-comment">/// 字体颜色配置 -&gt; 有默认</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">optional</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfSlider</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">optional</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfTopView</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span><br>    <br>    <span class="hljs-comment">/// 背景颜色配置 -&gt; 有默认</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">optional</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfSliderItemsTitle</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">optional</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfHighlightedSliderItemsTitle</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span><br>    <br>    <span class="hljs-comment">/// 高度配置 -&gt; 有默认</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">optional</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">heightOfTopView</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">CGFloat</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-keyword">optional</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">heightOfSlider</span>(<span class="hljs-params">segemntControl</span>:<span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">CGFloat</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、代理方法"><a href="#2、代理方法" class="headerlink" title="2、代理方法"></a>2、代理方法</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// MARK: ============ SegmentSelectorManagerDelegate ============</span><br><span class="hljs-class"><span class="hljs-keyword">protocol</span> <span class="hljs-title">SegmentSelectorManagerDelegate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slideView</span>(<span class="hljs-params">sliderView</span>:<span class="hljs-type">SegmentSelectorManager</span>, <span class="hljs-params">didSelectItemAtIndex</span>:<span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Void</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、页面实现"><a href="#3、页面实现" class="headerlink" title="3、页面实现"></a>3、页面实现</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">init</span>(<span class="hljs-params">frame</span>: <span class="hljs-type">CGRect</span>)</span> &#123;<br>        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(frame: frame)<br>    &#125;<br>    <br>    <span class="hljs-keyword">required</span> <span class="hljs-function"><span class="hljs-keyword">init?</span>(<span class="hljs-params">coder</span> <span class="hljs-params">aDecoder</span>: <span class="hljs-type">NSCoder</span>)</span> &#123;<br>        <span class="hljs-built_in">fatalError</span>(<span class="hljs-string">&quot;init(coder:) has not been implemented&quot;</span>)<br>    &#125;<br>    <br>    <span class="hljs-comment">/// 数据源</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> dataSource:<span class="hljs-type">SegmentSelectorManagerDataSource</span>? &#123;<br>        <span class="hljs-keyword">didSet</span> &#123;<br>            <span class="hljs-comment">// 名称数组</span><br>            namesOfSlideItems <span class="hljs-operator">=</span> dataSource<span class="hljs-operator">?</span>.nameOfSliderItems(segemntControl: <span class="hljs-keyword">self</span>)<br>            <span class="hljs-comment">// 控制器数组</span><br>            childControllersArray <span class="hljs-operator">=</span> dataSource<span class="hljs-operator">?</span>.childViewControllers(segemntControl: <span class="hljs-keyword">self</span>)<br>            <br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> ds <span class="hljs-operator">=</span> dataSource &#123;<br><br>                <span class="hljs-keyword">if</span> (ds.responds(to: #selector(ds.colorOfHighlightedSliderItemsTitle(segemntControl:)))) &#123;<br>                    <span class="hljs-comment">//按钮字体颜色默认</span><br>                    colorOfSlideItemsTitle <span class="hljs-operator">=</span> ds.colorOfSliderItemsTitle<span class="hljs-operator">!</span>(segemntControl: <span class="hljs-keyword">self</span>)<br>                &#125;<br>            <br>                <span class="hljs-keyword">if</span> (ds.responds(to: #selector(ds.colorOfHighlightedSliderItemsTitle(segemntControl:)))) &#123;<br>                    <span class="hljs-comment">// 按钮字体颜色选中</span><br>                    colorOfHighlightedSlideItemsTitle <span class="hljs-operator">=</span> ds.colorOfHighlightedSliderItemsTitle<span class="hljs-operator">!</span>(segemntControl: <span class="hljs-keyword">self</span>)<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> (ds.responds(to: #selector(ds.colorOfSlider(segemntControl:)))) &#123;<br>                    <span class="hljs-comment">// 指示器颜色</span><br>                    colorOfSlider <span class="hljs-operator">=</span> ds.colorOfSlider<span class="hljs-operator">!</span>(segemntControl: <span class="hljs-keyword">self</span>)<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> ds.responds(to: #selector(ds.heightOfTopView(segemntControl:))) &#123;<br>                    <span class="hljs-comment">// 顶部视图高度</span><br>                    heightOfTopView <span class="hljs-operator">=</span> (ds.heightOfTopView<span class="hljs-operator">!</span>(segemntControl: <span class="hljs-keyword">self</span>))<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> ds.responds(to: #selector(ds.heightOfTopView(segemntControl:))) &#123;<br>                    <span class="hljs-comment">// 指示器高度</span><br>                    heightOfSlider <span class="hljs-operator">=</span> (ds.heightOfSlider<span class="hljs-operator">!</span>(segemntControl: <span class="hljs-keyword">self</span>))<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 代理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">var</span> delegate:<span class="hljs-type">SegmentSelectorManagerDelegate</span>?<br>    <br>    <span class="hljs-keyword">var</span> namesOfSlideItems: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;? <span class="hljs-operator">=</span> []                           <span class="hljs-comment">// 名称数组</span><br>    <span class="hljs-keyword">var</span> colorOfSlider: <span class="hljs-type">UIColor</span>? <span class="hljs-operator">=</span>  <span class="hljs-type">UIColor</span>.orange                        <span class="hljs-comment">// 指示器颜色</span><br>    <span class="hljs-keyword">var</span> colorOfSlideView: <span class="hljs-type">UIColor</span>? <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>.white                       <span class="hljs-comment">// 顶部视图颜色</span><br>    <span class="hljs-keyword">var</span> colorOfSlideItemsTitle: <span class="hljs-type">UIColor</span>? <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>.gray                  <span class="hljs-comment">// 默认字体颜色</span><br>    <span class="hljs-keyword">var</span> colorOfHighlightedSlideItemsTitle: <span class="hljs-type">UIColor</span>? <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>.orange     <span class="hljs-comment">// 选中字体颜色</span><br>    <span class="hljs-keyword">var</span> heightOfTopView:<span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">45</span>                                     <span class="hljs-comment">// 顶部视图高度</span><br>    <span class="hljs-keyword">var</span> heightOfSlider:<span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>                                       <span class="hljs-comment">// 指示器高度</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-type">SliderThanSliderView_WidthRatio</span>:<span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>                      <span class="hljs-comment">// 按钮和指示器宽度比</span><br>    <span class="hljs-keyword">var</span> buttonsArray:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">UIButton</span>&gt;? <span class="hljs-operator">=</span> []                               <span class="hljs-comment">// 所有按钮的数组</span><br>    <span class="hljs-keyword">var</span> childControllersArray:<span class="hljs-type">Array</span>&lt;<span class="hljs-type">UIViewController</span>&gt;? <span class="hljs-operator">=</span> []              <span class="hljs-comment">// 控制器数组</span><br>    <br>    <span class="hljs-keyword">let</span> <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.bounds.size.width<br>    <span class="hljs-keyword">let</span> <span class="hljs-type">SCREEN_HEIGHT</span> <span class="hljs-operator">=</span> <span class="hljs-type">UIScreen</span>.main.bounds.height<br>    <br>    <span class="hljs-comment">/// 顶部View</span><br>    <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">var</span> slideBar:<span class="hljs-type">UIView</span> <span class="hljs-operator">=</span> &#123;<br>        <span class="hljs-keyword">let</span> view <span class="hljs-operator">=</span> <span class="hljs-type">UIView</span>.<span class="hljs-keyword">init</span>()<br>        view.backgroundColor <span class="hljs-operator">=</span> colorOfSlideView<br>        addSubview(view)<br>        view.translatesAutoresizingMaskIntoConstraints <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        view.leadingAnchor.constraint(equalTo: leadingAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        view.trailingAnchor.constraint(equalTo: trailingAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        view.topAnchor.constraint(equalTo: topAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        view.heightAnchor.constraint(equalToConstant: <span class="hljs-keyword">self</span>.heightOfTopView).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">return</span> view<br>    &#125;()<br>    <br>    <span class="hljs-comment">// 底部指示器</span><br>    <span class="hljs-keyword">var</span> slider:<span class="hljs-type">UIView</span>?<br>    <br>    <span class="hljs-comment">/// 控制器ScrollView</span><br>    <span class="hljs-keyword">lazy</span> <span class="hljs-keyword">var</span> contentScrollView:<span class="hljs-type">UIScrollView</span> <span class="hljs-operator">=</span> &#123;<br>        <span class="hljs-keyword">let</span> sc <span class="hljs-operator">=</span> <span class="hljs-type">UIScrollView</span>.<span class="hljs-keyword">init</span>()<br>        sc.isDirectionalLockEnabled <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        sc.backgroundColor <span class="hljs-operator">=</span> <span class="hljs-type">UIColor</span>.white<br>        sc.isPagingEnabled <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        sc.showsHorizontalScrollIndicator <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        sc.delegate <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span><br>        sc.bounces <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        addSubview(sc)<br>        sc.translatesAutoresizingMaskIntoConstraints <span class="hljs-operator">=</span> <span class="hljs-literal">false</span><br>        sc.leadingAnchor.constraint(equalTo: leadingAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        sc.trailingAnchor.constraint(equalTo: trailingAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        sc.topAnchor.constraint(equalTo: <span class="hljs-keyword">self</span>.slideBar.bottomAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        sc.bottomAnchor.constraint(equalTo: bottomAnchor).isActive <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">return</span> sc<br>    &#125;()<br></code></pre></td></tr></table></figure><p>#####4、绘制页面UI</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs swift">    <span class="hljs-comment">// 获取当前页面的控制器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewController</span>()</span>-&gt;<span class="hljs-type">UIViewController</span>? &#123;<br>        <span class="hljs-keyword">var</span> nextResponder: <span class="hljs-type">UIResponder</span>? <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span><br>        <span class="hljs-keyword">repeat</span> &#123;<br>            nextResponder <span class="hljs-operator">=</span> nextResponder<span class="hljs-operator">?</span>.next<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> viewController <span class="hljs-operator">=</span> nextResponder <span class="hljs-keyword">as?</span> <span class="hljs-type">UIViewController</span> &#123;<br>                <span class="hljs-keyword">return</span> viewController<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> nextResponder <span class="hljs-operator">!=</span> <span class="hljs-literal">nil</span><br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br><br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">layoutSubviews</span>()</span> &#123;<br>        <span class="hljs-keyword">super</span>.layoutSubviews()<br>        addSlider()<br>        addButton()<br>        addContentScrollView()<br>    &#125;<br><span class="hljs-comment">/// 添加按钮到顶部视图</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addButton</span>()</span> &#123;<br>        <br>        <span class="hljs-keyword">let</span> numberOfItems:<span class="hljs-type">Int</span> <span class="hljs-operator">=</span> (namesOfSlideItems<span class="hljs-operator">?</span>.count)<span class="hljs-operator">!</span><br>        <span class="hljs-keyword">let</span> slideItemWidth <span class="hljs-operator">=</span> <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">/</span> <span class="hljs-type">CGFloat</span>(numberOfItems)<br>        <span class="hljs-keyword">let</span> sliderWidth <span class="hljs-operator">=</span> slideItemWidth <span class="hljs-operator">*</span> <span class="hljs-type">SliderThanSliderView_WidthRatio</span><br>        <span class="hljs-keyword">let</span> position_x <span class="hljs-operator">=</span> (slideItemWidth <span class="hljs-operator">-</span> sliderWidth) <span class="hljs-operator">/</span> <span class="hljs-number">2.0</span><br>        <br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>numberOfItems &#123;<br>            <span class="hljs-keyword">let</span> b <span class="hljs-operator">=</span> <span class="hljs-type">UIButton</span>.<span class="hljs-keyword">init</span>(type: .custom)<br>            b.tag <span class="hljs-operator">=</span> index<br>            b.setTitle(namesOfSlideItems<span class="hljs-operator">!</span>[index], for: .normal)<br>            b.setTitleColor(colorOfSlideItemsTitle, for: .normal)<br>            b.titleLabel<span class="hljs-operator">?</span>.textAlignment <span class="hljs-operator">=</span> .center<br>            b.addTarget(<span class="hljs-keyword">self</span>, action: #selector(buttonTouched(button:)), for: .touchUpInside)<br>            buttonsArray<span class="hljs-operator">?</span>.append(b)<br>            b.frame <span class="hljs-operator">=</span> <span class="hljs-type">CGRect</span>(x: position_x <span class="hljs-operator">+</span> slideItemWidth <span class="hljs-operator">*</span> <span class="hljs-type">CGFloat</span>(index),<br>                             y: <span class="hljs-number">5</span>,<br>                             width: sliderWidth,<br>                             height: heightOfTopView<span class="hljs-operator">-</span><span class="hljs-number">5</span>)<br>            slideBar.addSubview(b)<br>            <br>            <span class="hljs-keyword">if</span> index <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>                b.setTitleColor(colorOfHighlightedSlideItemsTitle<span class="hljs-operator">!</span>, for: .normal)<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 添加底部指示器到顶部视图</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addSlider</span>()</span> &#123;<br>        <span class="hljs-keyword">let</span> slideItemWidth <span class="hljs-operator">=</span>  <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">/</span> <span class="hljs-type">CGFloat</span>((namesOfSlideItems<span class="hljs-operator">?</span>.count)<span class="hljs-operator">!</span>)<br>        <span class="hljs-keyword">let</span> sliderWidth <span class="hljs-operator">=</span> slideItemWidth <span class="hljs-operator">*</span> <span class="hljs-type">SliderThanSliderView_WidthRatio</span><br>        <span class="hljs-keyword">let</span> position_x <span class="hljs-operator">=</span> (slideItemWidth <span class="hljs-operator">-</span> sliderWidth) <span class="hljs-operator">/</span> <span class="hljs-number">2.0</span><br>        slideBar.addSubview(sliderView(frame: <span class="hljs-type">CGRect</span>(x: position_x,<br>                                                     y: heightOfTopView <span class="hljs-operator">-</span> heightOfSlider,<br>                                                     width: sliderWidth,<br>                                                     height: heightOfSlider)))<br>        slideBar.backgroundColor <span class="hljs-operator">=</span> colorOfSlideView<br>        slider<span class="hljs-operator">?</span>.backgroundColor <span class="hljs-operator">=</span> colorOfSlider<br>    &#125;<br>    <br>     <span class="hljs-comment">// 添加ScrollView</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">addContentScrollView</span>()</span> &#123;<br>        contentScrollView.contentSize <span class="hljs-operator">=</span> <span class="hljs-type">CGSize</span>(width: <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">*</span> <span class="hljs-type">CGFloat</span>((namesOfSlideItems<span class="hljs-operator">?</span>.count)<span class="hljs-operator">!</span>), height: <span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">for</span> (index) <span class="hljs-keyword">in</span> (childControllersArray<span class="hljs-operator">?</span>.enumerated())<span class="hljs-operator">!</span> &#123;<br>            index.element.view.frame <span class="hljs-operator">=</span> <span class="hljs-type">CGRect</span>(x: <span class="hljs-type">CGFloat</span>(index.offset) <span class="hljs-operator">*</span> <span class="hljs-type">SCREEN_WIDTH</span>,<br>                                              y: <span class="hljs-number">0</span>,<br>                                              width: contentScrollView.frame.width,<br>                                              height: contentScrollView.frame.height)<br>            contentScrollView.addSubview(index.element.view)<br>            viewController()<span class="hljs-operator">?</span>.addChild(index.element)<br>            index.element.didMove(toParent: viewController())<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// vc滚动动画</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">animateSlider</span>(<span class="hljs-params">tag</span>:<span class="hljs-type">Int</span>)</span> -&gt; <span class="hljs-type">Void</span> &#123;<br>        contentScrollView.setContentOffset(<span class="hljs-type">CGPoint</span>(x: <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">*</span> <span class="hljs-type">CGFloat</span>(tag), y: <span class="hljs-number">0</span>), animated: <span class="hljs-literal">true</span>)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 指示器滚动动画</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">animateSliderToPosition</span>(<span class="hljs-params">offset</span>:<span class="hljs-type">CGPoint</span>)</span> -&gt; <span class="hljs-type">Void</span> &#123;<br>        <br>        <span class="hljs-keyword">let</span> slideItemWidth <span class="hljs-operator">=</span>  <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">/</span> <span class="hljs-type">CGFloat</span>((namesOfSlideItems<span class="hljs-operator">?</span>.count)<span class="hljs-operator">!</span>)<br>        <span class="hljs-keyword">let</span> sliderWidth <span class="hljs-operator">=</span>  slideItemWidth <span class="hljs-operator">*</span> <span class="hljs-type">SliderThanSliderView_WidthRatio</span><br>        <span class="hljs-keyword">let</span> position_x <span class="hljs-operator">=</span>  (slideItemWidth <span class="hljs-operator">-</span> sliderWidth) <span class="hljs-operator">/</span> <span class="hljs-number">2.0</span><br>        <br>        <span class="hljs-keyword">let</span> newFrame <span class="hljs-operator">=</span> <span class="hljs-type">CGRect</span>(x: (offset.x <span class="hljs-operator">/</span> <span class="hljs-type">SCREEN_WIDTH</span>) <span class="hljs-operator">*</span> slideItemWidth <span class="hljs-operator">+</span> position_x,<br>                              y: (slider<span class="hljs-operator">?</span>.frame.origin.y)<span class="hljs-operator">!</span>,<br>                              width: (slider<span class="hljs-operator">?</span>.frame.width)<span class="hljs-operator">!</span>,<br>                              height: (slider<span class="hljs-operator">?</span>.frame.height)<span class="hljs-operator">!</span>)<br>        slider<span class="hljs-operator">?</span>.frame <span class="hljs-operator">=</span> newFrame<br>        <br>        <span class="hljs-keyword">for</span> (index) <span class="hljs-keyword">in</span> (buttonsArray<span class="hljs-operator">?</span>.enumerated())<span class="hljs-operator">!</span> &#123;<br>            index.element.setTitleColor(colorOfSlideItemsTitle, for: .normal)<br>        &#125;<br>        <br>        <span class="hljs-keyword">var</span> buttonTag <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">let</span> ratio <span class="hljs-operator">=</span> offset.x <span class="hljs-operator">/</span> <span class="hljs-type">SCREEN_WIDTH</span><br>        <span class="hljs-keyword">let</span> tempRation <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(ratio)<br>        <br>        <span class="hljs-keyword">let</span> decimal:<span class="hljs-type">CGFloat</span> <span class="hljs-operator">=</span> ratio <span class="hljs-operator">-</span> <span class="hljs-type">CGFloat</span>(tempRation)<br><br>        <span class="hljs-keyword">if</span> decimal <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0.5</span> &#123;<br>            buttonTag <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(ratio) <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            buttonTag <span class="hljs-operator">=</span> <span class="hljs-type">Int</span>(ratio)<br>        &#125;<br>        <br>        buttonsArray<span class="hljs-operator">!</span>[buttonTag].setTitleColor(colorOfHighlightedSlideItemsTitle, for: .normal)<br>    &#125;<br>    <br>    <span class="hljs-comment">/// 根据frame初始化指示器</span><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sliderView</span>(<span class="hljs-params">frame</span>:<span class="hljs-type">CGRect</span>)</span> -&gt; <span class="hljs-type">UIView</span> &#123;<br>        slider <span class="hljs-operator">=</span> <span class="hljs-type">UIView</span>.<span class="hljs-keyword">init</span>(frame: frame)<br>        <span class="hljs-keyword">return</span> slider<span class="hljs-operator">!</span><br>    &#125;<br>   <br>    <span class="hljs-comment">/// 点击事件</span><br>    <span class="hljs-keyword">@objc</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">buttonTouched</span>(<span class="hljs-params">button</span>:<span class="hljs-type">UIButton</span>)</span> &#123;<br>        delegate<span class="hljs-operator">?</span>.slideView(sliderView: <span class="hljs-keyword">self</span>, didSelectItemAtIndex: button.tag)<br>        animateSlider(tag: tag)<br>        contentScrollView.setContentOffset(<span class="hljs-type">CGPoint</span>(x: <span class="hljs-type">SCREEN_WIDTH</span> <span class="hljs-operator">*</span> <span class="hljs-type">CGFloat</span>(button.tag), y: <span class="hljs-number">0</span>), animated: <span class="hljs-literal">true</span>)<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="5、使用Extension实现UIScrollViewDidScrollDelegate"><a href="#5、使用Extension实现UIScrollViewDidScrollDelegate" class="headerlink" title="5、使用Extension实现UIScrollViewDidScrollDelegate"></a>5、使用Extension实现UIScrollViewDidScrollDelegate</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// MARK: ============ UIScrollViewDidScrollDelegate ============</span><br>extension SegmentSelectorManager:UIScrollViewDelegate &#123;<br>    func scroll<span class="hljs-constructor">ViewDidScroll(<span class="hljs-params">_</span> <span class="hljs-params">scrollView</span>: UIScrollView)</span> &#123;<br>        animate<span class="hljs-constructor">SliderToPosition(<span class="hljs-params">offset</span>: <span class="hljs-params">scrollView</span>.<span class="hljs-params">contentOffset</span>)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6、使用方法-实例代码"><a href="#6、使用方法-实例代码" class="headerlink" title="6、使用方法(实例代码)"></a>6、使用方法(实例代码)</h5><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs roboconf">override func setupSubViewsProperties() &#123;<br>        <span class="hljs-attribute">segmentView = SegmentSelectorManager.init(frame</span>: CGRect<span class="hljs-variable">.zero</span>)<br>        segmentView?<span class="hljs-variable">.delegate</span> = self<br>        segmentView?<span class="hljs-variable">.dataSource</span> = self<br>        view<span class="hljs-variable">.addSubview</span>(segmentView!)<br>    &#125;<br>    <br>    override func setupSubViewsConstrains() &#123;<br>        if let seg = segmentView &#123;<br>            seg<span class="hljs-variable">.translatesAutoresizingMaskIntoConstraints</span> = false<br>            seg<span class="hljs-variable">.leadingAnchor</span><span class="hljs-variable">.constraint</span>(equalTo: view<span class="hljs-variable">.leadingAnchor</span>)<span class="hljs-variable">.isActive</span> = true<br>            seg<span class="hljs-variable">.trailingAnchor</span><span class="hljs-variable">.constraint</span>(equalTo: view<span class="hljs-variable">.trailingAnchor</span>)<span class="hljs-variable">.isActive</span> = true<br>            seg<span class="hljs-variable">.bottomAnchor</span><span class="hljs-variable">.constraint</span>(equalTo: view<span class="hljs-variable">.bottomAnchor</span>, constant: -kTabBarHeight)<span class="hljs-variable">.isActive</span> = true<br>            seg<span class="hljs-variable">.topAnchor</span><span class="hljs-variable">.constraint</span>(equalTo: wd_navgationBar_normal<span class="hljs-variable">.bottomAnchor</span>)<span class="hljs-variable">.isActive</span> = true<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">HotPlayController</span>: <span class="hljs-title">SegmentSelectorManagerDataSource</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">nameOfSliderItems</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt; &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&quot;正在热映&quot;</span>, <span class="hljs-string">&quot;即将上映&quot;</span>]<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">childViewControllers</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">Array</span>&lt;<span class="hljs-type">UIViewController</span>&gt; &#123;<br>        <span class="hljs-keyword">return</span> [<span class="hljs-type">HotPlayingController</span>(), <span class="hljs-type">HotWillPlayViewController</span>()]<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">heightOfTopView</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">CGFloat</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">45</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">heightOfSlider</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">CGFloat</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfSlider</span>(<span class="hljs-params">segemntControl</span> <span class="hljs-params">slider</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UIColor</span>.wd_init(r: <span class="hljs-number">73</span>, g: <span class="hljs-number">73</span>, b: <span class="hljs-number">73</span>)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfTopView</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UIColor</span>.white<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfSliderItemsTitle</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UIColor</span>.gray<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">colorOfHighlightedSliderItemsTitle</span>(<span class="hljs-params">segemntControl</span>: <span class="hljs-type">SegmentSelectorManager</span>)</span> -&gt; <span class="hljs-type">UIColor</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UIColor</span>.wd_init(r: <span class="hljs-number">73</span>, g: <span class="hljs-number">73</span>, b: <span class="hljs-number">73</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">HotPlayController</span>: <span class="hljs-title">SegmentSelectorManagerDelegate</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">slideView</span>(<span class="hljs-params">sliderView</span>: <span class="hljs-type">SegmentSelectorManager</span>, <span class="hljs-params">didSelectItemAtIndex</span>: <span class="hljs-type">Int</span>)</span> &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="7、效果图"><a href="#7、效果图" class="headerlink" title="7、效果图"></a>7、效果图</h5><p><img src="https://upload-images.jianshu.io/upload_images/3334769-115a441c7def0de0.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>Swift</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS自定义控件-仿QQ侧边菜单</title>
    <link href="/2019/05/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E4%BB%BFQQ%E4%BE%A7%E8%BE%B9%E8%8F%9C%E5%8D%95/"/>
    <url>/2019/05/01/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6-%E4%BB%BFQQ%E4%BE%A7%E8%BE%B9%E8%8F%9C%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;UIKit/UIKit.h&gt;</span></span><br><br><span class="hljs-built_in">NS_ASSUME_NONNULL_BEGIN</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LZSliderContainerViewController</span> : <span class="hljs-title">UIViewController</span></span><br><span class="hljs-comment">// 是否允许侧滑手势</span><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">BOOL</span> allowOpenSliderView;<br><br><span class="hljs-comment">// 单例</span><br>+ (<span class="hljs-keyword">instancetype</span>)mamager;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 初始化方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> @param mainController 主页面控制器</span><br><span class="hljs-comment"> @param sliderController 菜单页面控制器</span><br><span class="hljs-comment"> @param space 空隙</span><br><span class="hljs-comment"> @return UIViewController</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-built_in">UIViewController</span> *)lz_setupMainController:(<span class="hljs-built_in">UIViewController</span> *)mainController sliderController:(<span class="hljs-built_in">UIViewController</span> *)sliderController space:(<span class="hljs-built_in">CGFloat</span>)space;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 打开侧边菜单</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)lz_openSlderView;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> 关闭侧边菜单</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)lz_closeSliderView;<br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;LZSliderContainerViewController.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">UIView</span> (<span class="hljs-title">Frame</span>)</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>) <span class="hljs-built_in">CGFloat</span> left;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>) <span class="hljs-built_in">CGFloat</span> right;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">UIView</span> (<span class="hljs-title">Frame</span>)</span><br><br>- (<span class="hljs-built_in">CGFloat</span>)left &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.frame.origin.x;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setLeft:(<span class="hljs-built_in">CGFloat</span>)x &#123;<br>    <span class="hljs-built_in">CGRect</span> frame = <span class="hljs-keyword">self</span>.frame;<br>    frame.origin.x = x;<br>    <span class="hljs-keyword">self</span>.frame = frame;<br>&#125;<br><br>- (<span class="hljs-built_in">CGFloat</span>)right &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.frame.origin.x + <span class="hljs-keyword">self</span>.frame.size.width;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)setRight:(<span class="hljs-built_in">CGFloat</span>)right &#123;<br>    <span class="hljs-built_in">CGRect</span> frame = <span class="hljs-keyword">self</span>.frame;<br>    frame.origin.x = right - frame.size.width;<br>    <span class="hljs-keyword">self</span>.frame = frame;<br>&#125;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">LZSliderContainerViewController</span> ()</span><br><br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIViewController</span> *mainController;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIViewController</span> *sliderController;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> spece;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">assign</span>) <span class="hljs-built_in">CGFloat</span> panStartX;<br><span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">UIView</span> *coverView;<br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">LZSliderContainerViewController</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 单例方法</span><br>+ (<span class="hljs-keyword">instancetype</span>)mamager &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-keyword">static</span> LZSliderContainerViewController *vc;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        vc = [[LZSliderContainerViewController alloc] init];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> vc;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 初始化方法</span><br>- (<span class="hljs-built_in">UIViewController</span> *)lz_setupMainController:(<span class="hljs-built_in">UIViewController</span> *)mainController sliderController:(<span class="hljs-built_in">UIViewController</span> *)sliderController space:(<span class="hljs-built_in">CGFloat</span>)space &#123;<br>    [<span class="hljs-keyword">self</span> lz_addChildControllerWithMainController:mainController sliderController:sliderController];<br>    [<span class="hljs-keyword">self</span> lz_setupCoverView];<br>    _spece = space;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 配置遮罩层</span><br>- (<span class="hljs-keyword">void</span>)lz_setupCoverView &#123;<br>    <span class="hljs-keyword">self</span>.coverView = [[<span class="hljs-built_in">UIView</span> alloc] init];<br>    <span class="hljs-keyword">self</span>.coverView.frame = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds;<br>    <span class="hljs-keyword">self</span>.coverView.backgroundColor = [[<span class="hljs-built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">self</span>.coverView.hidden = <span class="hljs-literal">true</span>;<br>    [<span class="hljs-keyword">self</span>.coverView addGestureRecognizer:[[<span class="hljs-built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(lz_closeSliderView)]];<br>    [<span class="hljs-keyword">self</span>.view addSubview:<span class="hljs-keyword">self</span>.coverView];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 添加VC</span><br>- (<span class="hljs-keyword">void</span>)lz_addChildControllerWithMainController:(<span class="hljs-built_in">UIViewController</span> *)mainController sliderController:(<span class="hljs-built_in">UIViewController</span> *)sliderController &#123;<br>    [<span class="hljs-keyword">self</span> addChildViewController:mainController];<br>    [mainController didMoveToParentViewController:<span class="hljs-keyword">self</span>];<br>    mainController.view.frame = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds;<br>    [<span class="hljs-keyword">self</span>.view addSubview:mainController.view];<br>    <br>    [<span class="hljs-keyword">self</span> addChildViewController:sliderController];<br>    [sliderController didMoveToParentViewController:<span class="hljs-keyword">self</span>];<br>    sliderController.view.frame = <span class="hljs-built_in">CGRectMake</span>(-<span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-number">0</span>, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width, <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.height);<br>    [<span class="hljs-keyword">self</span>.view addSubview:sliderController.view];<br>    <br>    <span class="hljs-keyword">self</span>.mainController = mainController;<br>    <span class="hljs-keyword">self</span>.sliderController = sliderController;<br>    <br>    [<span class="hljs-keyword">self</span> lz_setupGusture];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 添加平移手势</span><br>- (<span class="hljs-keyword">void</span>)lz_setupGusture &#123;<br>    <span class="hljs-built_in">UIPanGestureRecognizer</span> *panGusture = [[<span class="hljs-built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> action:<span class="hljs-keyword">@selector</span>(lz_panGestureRecognizer:)];<br>    [<span class="hljs-keyword">self</span>.view addGestureRecognizer:panGusture];<br>&#125;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - UIPanGestureRecognizer Action</span><br>- (<span class="hljs-keyword">void</span>)lz_panGestureRecognizer:(<span class="hljs-built_in">UIPanGestureRecognizer</span> *)sender &#123;<br>    <span class="hljs-built_in">UIView</span> *rootView = <span class="hljs-keyword">self</span>.mainController.view;<br>    <span class="hljs-built_in">UIView</span> *menuView = <span class="hljs-keyword">self</span>.sliderController.view;<br>    <br>    <span class="hljs-keyword">if</span> (sender.state == <span class="hljs-built_in">UIGestureRecognizerStateBegan</span>) &#123;<br>        <span class="hljs-built_in">CGFloat</span> startPointX = [sender translationInView:<span class="hljs-keyword">self</span>.view].x;<br>        <span class="hljs-keyword">self</span>.panStartX = startPointX;<br>        <span class="hljs-keyword">self</span>.coverView.hidden = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.panStartX &gt;= <span class="hljs-number">40</span> &amp;&amp; rootView.frame.origin.x == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">CGFloat</span> translationX = [sender translationInView:rootView].x;<br>    <span class="hljs-built_in">CGFloat</span> rootViewX = rootView.frame.origin.x;<br>    <br>    rootViewX = [<span class="hljs-keyword">self</span> lz_minmumWithValueA:(rootViewX + translationX) valueB:(<span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width - <span class="hljs-keyword">self</span>.spece)];<br>    rootViewX = [<span class="hljs-keyword">self</span> lz_maxmumWithValueA:rootViewX valueB:<span class="hljs-number">0</span>];<br>    <br>    rootView.left = rootViewX;<br>    menuView.right = rootView.left;<br>    <span class="hljs-keyword">self</span>.coverView.frame = rootView.frame;<br>    <br>    <span class="hljs-built_in">CGFloat</span> aphal = <span class="hljs-number">0.5</span> * rootView.frame.origin.x / (<span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width - <span class="hljs-keyword">self</span>.spece);<br>    <span class="hljs-keyword">self</span>.coverView.backgroundColor = [[<span class="hljs-built_in">UIColor</span> blackColor] colorWithAlphaComponent:aphal];<br>    <br>    [sender setTranslation:<span class="hljs-built_in">CGPointZero</span> inView:rootView];<br>    <br>    <span class="hljs-keyword">if</span> (sender.state == <span class="hljs-built_in">UIGestureRecognizerStateEnded</span> || sender.state == <span class="hljs-built_in">UIGestureRecognizerStateCancelled</span>) &#123;<br>        <span class="hljs-keyword">if</span> (rootViewX &gt;= (<span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width - <span class="hljs-keyword">self</span>.spece)/<span class="hljs-number">2</span>) &#123;<br>            [<span class="hljs-keyword">self</span> lz_openSlderView];<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            [<span class="hljs-keyword">self</span> lz_closeSliderView];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 打开侧边菜单</span><br>- (<span class="hljs-keyword">void</span>)lz_openSlderView &#123;<br>    [<span class="hljs-keyword">self</span> lz_setupGusture];<br>    <br>    <span class="hljs-built_in">UIView</span> *rootView = <span class="hljs-keyword">self</span>.mainController.view;<br>    <span class="hljs-built_in">UIView</span> *menuView = <span class="hljs-keyword">self</span>.sliderController.view;<br>    <br>    <span class="hljs-keyword">self</span>.coverView.hidden = <span class="hljs-literal">false</span>;<br>    <br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.4</span> animations:^&#123;<br>        rootView.left = <span class="hljs-built_in">UIScreen</span>.mainScreen.bounds.size.width - <span class="hljs-keyword">self</span>.spece;<br>        menuView.right = rootView.left;<br>        <span class="hljs-keyword">self</span>.coverView.frame = rootView.frame;<br>        <span class="hljs-keyword">self</span>.coverView.backgroundColor = [[<span class="hljs-built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="hljs-number">0.5</span>];<br>    &#125;];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 关闭侧边菜单</span><br>- (<span class="hljs-keyword">void</span>)lz_closeSliderView &#123;<br>    <span class="hljs-built_in">UIView</span> *rootView = <span class="hljs-keyword">self</span>.mainController.view;<br>    <span class="hljs-built_in">UIView</span> *menuView = <span class="hljs-keyword">self</span>.sliderController.view;<br>    <br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.4</span> animations:^&#123;<br>        <span class="hljs-keyword">self</span>.coverView.backgroundColor = [[<span class="hljs-built_in">UIColor</span> blackColor] colorWithAlphaComponent:<span class="hljs-number">0</span>];<br>        rootView.left = <span class="hljs-number">0</span>;<br>        menuView.right = rootView.left;<br>        <span class="hljs-keyword">self</span>.coverView.frame = rootView.frame;<br>    &#125; completion:^(<span class="hljs-built_in">BOOL</span> finished) &#123;<br>        <span class="hljs-keyword">if</span> (finished) &#123;<br>            <span class="hljs-keyword">self</span>.coverView.hidden = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 比较大小取最小值</span><br>- (<span class="hljs-built_in">CGFloat</span>)lz_minmumWithValueA:(<span class="hljs-built_in">CGFloat</span>)a valueB:(<span class="hljs-built_in">CGFloat</span>)b &#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? b : a;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - 比较大小取最大值</span><br>- (<span class="hljs-built_in">CGFloat</span>)lz_maxmumWithValueA:(<span class="hljs-built_in">CGFloat</span>)a valueB:(<span class="hljs-built_in">CGFloat</span>)b &#123;<br>    <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> mark - Setter</span><br>- (<span class="hljs-keyword">void</span>)setAllowOpenSliderView:(<span class="hljs-built_in">BOOL</span>)allowOpenSliderView &#123;<br>    _allowOpenSliderView = allowOpenSliderView;<br>    <span class="hljs-keyword">if</span> (allowOpenSliderView) &#123;<br>        [<span class="hljs-keyword">self</span> lz_setupGusture];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">UIGestureRecognizer</span> *pan <span class="hljs-keyword">in</span> <span class="hljs-keyword">self</span>.view.gestureRecognizers) &#123;<br>            [<span class="hljs-keyword">self</span>.view removeGestureRecognizer:pan];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@end</span><br><br></code></pre></td></tr></table></figure><p>AppDelegate中设置为根控制器</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">self.window.rootViewController</span> = [[LZSliderContainerViewController mamager] lz_setupMainController:tab sliderController:sldier space:<span class="hljs-number">200</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>// 单独打开或关闭</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// 打开页面</span><br><span class="hljs-string">[[LZSliderContainerViewController mamager]</span> lz_openSlderView];<br><span class="hljs-comment">// 关闭页面</span><br><span class="hljs-string">[[LZSliderContainerViewController mamager]</span> lz_closeSliderView];<br></code></pre></td></tr></table></figure><p>默认所有页面都是打开的，如果需要关闭</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewWillAppear:(<span class="hljs-built_in">BOOL</span>)animated&#123;<br>    [<span class="hljs-keyword">super</span> viewWillAppear:animated];<br>    [LZSliderContainerViewController mamager].allowOpenSliderView = <span class="hljs-literal">NO</span>;<br>&#125;<br><br>- (<span class="hljs-keyword">void</span>)viewDidDisappear:(<span class="hljs-built_in">BOOL</span>)animated &#123;<br>    [<span class="hljs-keyword">super</span> viewDidDisappear:animated];<br>    [LZSliderContainerViewController mamager].allowOpenSliderView = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图<br><br><img src="http://i2.bvimg.com/667578/85fad1a82178134d.gif" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>Objective-C</category>
      
      <category>自定义控件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义控件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS多线程-9种锁</title>
    <link href="/2019/04/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B-9%E7%A7%8D%E9%94%81.md/"/>
    <url>/2019/04/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B-9%E7%A7%8D%E9%94%81.md/</url>
    
    <content type="html"><![CDATA[<h2 id="1、dispatch-semaphore-自旋锁"><a href="#1、dispatch-semaphore-自旋锁" class="headerlink" title="1、dispatch_semaphore 自旋锁"></a>1、dispatch_semaphore 自旋锁</h2><h2 id="2、-synchronized-互斥锁"><a href="#2、-synchronized-互斥锁" class="headerlink" title="2、@synchronized 互斥锁"></a>2、@synchronized 互斥锁</h2><h2 id="3、NSLock-线程锁"><a href="#3、NSLock-线程锁" class="headerlink" title="3、NSLock 线程锁"></a>3、NSLock 线程锁</h2><h2 id="4、NSRecursiveLock-递归锁"><a href="#4、NSRecursiveLock-递归锁" class="headerlink" title="4、NSRecursiveLock 递归锁"></a>4、NSRecursiveLock 递归锁</h2><h2 id="5、NSConditionLock-条件锁"><a href="#5、NSConditionLock-条件锁" class="headerlink" title="5、NSConditionLock 条件锁"></a>5、NSConditionLock 条件锁</h2><h2 id="6、NSCondition-断言"><a href="#6、NSCondition-断言" class="headerlink" title="6、NSCondition 断言"></a>6、NSCondition 断言</h2><h2 id="7、OSSpinLock-自旋锁"><a href="#7、OSSpinLock-自旋锁" class="headerlink" title="7、OSSpinLock 自旋锁"></a>7、OSSpinLock 自旋锁</h2><h2 id="8、pthread-mutex-互斥锁"><a href="#8、pthread-mutex-互斥锁" class="headerlink" title="8、pthread_mutex 互斥锁"></a>8、pthread_mutex 互斥锁</h2><h2 id="9、pthread-mutex-recursive-互斥锁"><a href="#9、pthread-mutex-recursive-互斥锁" class="headerlink" title="9、pthread_mutex(recursive) 互斥锁"></a>9、pthread_mutex(recursive) 互斥锁</h2>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS多线程-GCD</title>
    <link href="/2019/03/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B-GCD/"/>
    <url>/2019/03/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B-GCD/</url>
    
    <content type="html"><![CDATA[<h1 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h1><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>就是执行操作的意思，换句话说就是你在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种方式：同步执行（sync）和异步执行（async）。<br>两者的主要区别是：是否等待队列的任务执行结束，以及是否具备开启新线程的能力。</p><h3 id="同步执行（sync）"><a href="#同步执行（sync）" class="headerlink" title="同步执行（sync）"></a>同步执行（sync）</h3><p>同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再继续执行。<br><br>只能在当前线程中执行任务，不具备开启新线程的能力。</p><h3 id="异步执行（async）"><a href="#异步执行（async）" class="headerlink" title="异步执行（async）"></a>异步执行（async）</h3><p>异步添加任务到指定的队列中，它不会做任何等待，可以继续执行任务。<br><br>可以在新的线程中执行任务，具备开启新线程的能力。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>执行任务的等待队列，即用来存放任务的队列。队列是一种特殊的线性表，采用 FIFO（先进先出）的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从队列的头部开始读取。每读取一个任务，则从队列中释放一个任务。<br><br><br>在 GCD 中有两种队列：串行队列和并发队列。两者都符合 FIFO（先进先出）的原则。两者的主要区别是：执行顺序不同，以及开启线程数不同。</p><h3 id="串行队列（Serial-Dispatch-Queue）"><a href="#串行队列（Serial-Dispatch-Queue）" class="headerlink" title="串行队列（Serial Dispatch Queue）"></a>串行队列（Serial Dispatch Queue）</h3><p>每次只有一个任务被执行。让任务一个接着一个地执行。（只开启一个线程，一个任务执行完毕后，再执行下一个任务）</p><h3 id="并发队列（Concurrent-Dispatch-Queue）"><a href="#并发队列（Concurrent-Dispatch-Queue）" class="headerlink" title="并发队列（Concurrent Dispatch Queue）"></a>并发队列（Concurrent Dispatch Queue）</h3><p>可以让多个任务并发（同时）执行。（可以开启多个线程，并且同时执行任务）</p><blockquote><p>注意：并发队列 的并发功能只有在异步（dispatch_async）函数下才有效</p></blockquote><h2 id="dispatch-queue-t"><a href="#dispatch-queue-t" class="headerlink" title="dispatch_queue_t"></a>dispatch_queue_t</h2><table><thead><tr><th>任务</th><th>队列</th></tr></thead><tbody><tr><td>同步</td><td>串行</td></tr><tr><td>异步</td><td>并发</td></tr></tbody></table><h4 id="组合结果"><a href="#组合结果" class="headerlink" title="组合结果"></a>组合结果</h4><table><thead><tr><th>组合</th><th>结果</th></tr></thead><tbody><tr><td>同步执行 + 并发队列</td><td>在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务</td></tr><tr><td>异步执行 + 并发队列</td><td>可以开启多个线程，任务交替（同时）执行</td></tr><tr><td>同步执行 + 串行队列</td><td>不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务</td></tr><tr><td>异步执行 + 串行队列</td><td>会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务</td></tr><tr><td>同步执行 + 主队列</td><td>在主线程中调用会出现死锁，而在其他线程中则不会</td></tr><tr><td>异步执行 + 主队列</td><td>互相等待卡住不可行</td></tr></tbody></table><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h4><p>常用宏定义</p><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>DISPATCH_QUEUE_SERIAL</td><td>NULL</td></tr><tr><td>DISPATCH_QUEUE_SERIAL_INACTIVE</td><td>dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_SERIAL)</td></tr><tr><td>DISPATCH_QUEUE_SERIAL_WITH_AUTORELEASE_POOL</td><td>dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_SERIAL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM)</td></tr><tr><td></td><td></td></tr></tbody></table><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">dispatch_queue_create</span>(<span class="hljs-string">&quot;标识&quot;</span>, DISPATCH_QUEUE_SERIAL);<br></code></pre></td></tr></table></figure><h4 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h4><p>常用宏定义</p><table><thead><tr><th>名称</th><th>值</th></tr></thead><tbody><tr><td>DISPATCH_QUEUE_CONCURRENT</td><td>NULL</td></tr><tr><td>DISPATCH_QUEUE_CONCURRENT_INACTIVE</td><td>dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_CONCURRENT)</td></tr><tr><td>DISPATCH_QUEUE_CONCURRENT_WITH_AUTORELEASE_POOL</td><td>dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_SERIAL,DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM)</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">dispatch_queue_t</span> queue = <span class="hljs-built_in">dispatch_queue_create</span>(<span class="hljs-string">&quot;标识&quot;</span>, DISPATCH_QUEUE_CONCURRENT);<br><br></code></pre></td></tr></table></figure><h4 id="获取主线程"><a href="#获取主线程" class="headerlink" title="获取主线程"></a>获取主线程</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">dispatch_get_main_queue()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="获取系统默认的全局并发队列"><a href="#获取系统默认的全局并发队列" class="headerlink" title="获取系统默认的全局并发队列"></a>获取系统默认的全局并发队列</h4><h4 id="iOS-8-0"><a href="#iOS-8-0" class="headerlink" title="iOS 8.0"></a>iOS 8.0</h4><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>QOS_CLASS_USER_INTERACTIVE</td><td>用户交互(希望尽快完成，用户对结果很期望，不要放太耗时操作)</td></tr><tr><td>QOS_CLASS_USER_INITIATED</td><td>用户期望(不要放太耗时操作)</td></tr><tr><td>QOS_CLASS_DEFAULT</td><td>默认(不是给程序员使用的，用来重置对列使用的)</td></tr><tr><td>QOS_CLASS_UTILITY</td><td>实用工具(耗时操作，可以使用这个选项)</td></tr><tr><td>QOS_CLASS_BACKGROUND</td><td>后台</td></tr><tr><td>QOS_CLASS_UNSPECIFIED</td><td>未指定</td></tr></tbody></table><h4 id="iOS-8-0之前"><a href="#iOS-8-0之前" class="headerlink" title="iOS 8.0之前"></a>iOS 8.0之前</h4><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>DISPATCH_QUEUE_PRIORITY_HIGH</td><td>高优先级</td></tr><tr><td>DISPATCH_QUEUE_PRIORITY_DEFAULT</td><td>默认优先级</td></tr><tr><td>DISPATCH_QUEUE_PRIORITY_LOW</td><td>低优先级</td></tr><tr><td>DISPATCH_QUEUE_PRIORITY_BACKGROUND</td><td>后台优先级</td></tr></tbody></table><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">int</span> context = <span class="hljs-number">10</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  队列异步执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  <span class="hljs-doctag">@param</span> queue 队列</span><br><span class="hljs-comment">  <span class="hljs-doctag">@param</span> context 要传递给函数的应用程序定义的上下文参数。</span><br><span class="hljs-comment">  <span class="hljs-doctag">@param</span> asyncMethod c操作方法</span><br><span class="hljs-comment">  <span class="hljs-doctag">@return</span> dispatch_queue_t</span><br><span class="hljs-comment">*/</span><br>dispatch_async_f(queue, &amp;context, asyncMethod);<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">asyncMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br>dispatch_sync(queue, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="同步执行"><a href="#同步执行" class="headerlink" title="同步执行"></a>同步执行</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">int</span> context = <span class="hljs-number">10</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  队列同步执行</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  <span class="hljs-doctag">@param</span> queue 队列</span><br><span class="hljs-comment">  <span class="hljs-doctag">@param</span> context 要传递给函数的应用程序定义的上下文参数。</span><br><span class="hljs-comment">  <span class="hljs-doctag">@param</span> syncMethod c操作方法</span><br><span class="hljs-comment">  <span class="hljs-doctag">@return</span> dispatch_queue_t</span><br><span class="hljs-comment"> */</span><br>dispatch_sync_f(queue, &amp;context, syncMethod);<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">syncMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br>dispatch_sync(queue, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="延迟操作"><a href="#延迟操作" class="headerlink" title="延迟操作"></a>延迟操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> context = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">dispatch_after_f</span>(<span class="hljs-built_in">dispatch_time</span>(DISPATCH_TIME_NOW, (<span class="hljs-keyword">int64_t</span>)(<span class="hljs-number">1.2</span> * NSEC_PER_SEC)), queue, &amp;context, afterMethod);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afterMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br><span class="hljs-keyword">dispatch_queue_t</span> queue = <span class="hljs-built_in">dispatch_get_main_queue</span>();<br> <span class="hljs-built_in">dispatch_after</span>(<span class="hljs-built_in">dispatch_time</span>(DISPATCH_TIME_NOW, (<span class="hljs-keyword">int64_t</span>)(<span class="hljs-number">1.2</span> * NSEC_PER_SEC)), queue, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="快速迭代"><a href="#快速迭代" class="headerlink" title="快速迭代"></a>快速迭代</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> context = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 执行10次applyMethod函数</span><br>dispatch<span class="hljs-constructor">_apply_f(10, <span class="hljs-params">queue</span>, &amp;<span class="hljs-params">context</span>, <span class="hljs-params">applyMethod</span>)</span>;<br>void apply<span class="hljs-constructor">Method()</span> &#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br>dispatch<span class="hljs-constructor">_apply(10, <span class="hljs-params">queue</span>, ^(<span class="hljs-params">size_t</span> <span class="hljs-params">index</span>)</span> &#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="执行一次"><a href="#执行一次" class="headerlink" title="执行一次"></a>执行一次</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">dispatch_once_f</span>(&amp;onceToken, &amp;context, onceMethod);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onceMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">dispatch_once_t</span> onceToken;<br><span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="栅栏方法"><a href="#栅栏方法" class="headerlink" title="栅栏方法"></a>栅栏方法</h4><p>将队列执行的操作组给分割起来。</p><ul><li>dispatch_barrier_async<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> context = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">dispatch_barrier_async_f</span>(queue, &amp;context, barrierAsync);<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">barrierAsync</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br><span class="hljs-built_in">dispatch_barrier_async</span>(queue, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li>dispatch_barrier_sync<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> context = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">dispatch_barrier_sync_f</span>(queue, &amp;context, barrierAsync);<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">barrierSync</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br><span class="hljs-built_in">dispatch_barrier_sync</span>(queue, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure>dispatch_barrier_sync和dispatch_barrier_async的共同点： <blockquote><ul><li>1、都会等待在它前面插入队列的任务先执行完 </li><li>2、都会等待他们自己的任务执行完再执行后面的任务</li></ul></blockquote></li></ul><p>dispatch_barrier_sync和dispatch_barrier_async的不共同点： </p><blockquote><ul><li>在将任务插入到queue的时候，dispatch_barrier_sync需要等待自己的任务结束之后才会继续程序，然后插入被写在它后面的任务，然后执行后面的任务<br>而dispatch_barrier_async将自己的任务插入到queue之后，不会等待自己的任务结束，它会继续把后面的任务插入到queue。</li><li>所以，dispatch_barrier_async的不等待（异步）特性体现在将任务插入队列的过程，它的等待特性体现在任务真正执行的过程。</li></ul></blockquote><h2 id="dispatch-semaphore"><a href="#dispatch-semaphore" class="headerlink" title="dispatch_semaphore"></a>dispatch_semaphore</h2><p>GCD 中的信号量是指 Dispatch Semaphore，是持有计数的信号。类似于过高速路收费站的栏杆。可以通过时，打开栏杆，不可以通过时，关闭栏杆。在 Dispatch Semaphore 中，使用计数来完成这个功能，计数为0时等待，不可通过。计数为1或大于1时，计数减1且不等待，可通过。<br><br></p><h5 id="Dispatch-Semaphore-提供了三个函数。"><a href="#Dispatch-Semaphore-提供了三个函数。" class="headerlink" title="Dispatch Semaphore 提供了三个函数。"></a>Dispatch Semaphore 提供了三个函数。</h5><ul><li>dispatch_semaphore_create：创建一个Semaphore并初始化信号的总量</li><li>dispatch_semaphore_signal：发送一个信号，让信号总量加1</li><li>dispatch_semaphore_wait：可以使总信号量减1，当信号总量为0时就会一直等待（阻塞所在线程），否则就可以正常执行。</li></ul><blockquote><p>注意：信号量的使用前提是：想清楚你需要处理哪个线程等待（阻塞），又要哪个线程继续执行，然后使用信号量。</p></blockquote><h5 id="Dispatch-Semaphore-在实际开发中主要用于："><a href="#Dispatch-Semaphore-在实际开发中主要用于：" class="headerlink" title="Dispatch Semaphore 在实际开发中主要用于："></a>Dispatch Semaphore 在实际开发中主要用于：</h5><ul><li>保持线程同步，将异步执行任务转换为同步执行任务</li><li>保证线程安全，为线程加锁</li></ul><h3 id="Dispatch-Semaphore-线程同步"><a href="#Dispatch-Semaphore-线程同步" class="headerlink" title="Dispatch Semaphore 线程同步"></a>Dispatch Semaphore 线程同步</h3><p>我们在开发中，会遇到这样的需求：异步执行耗时任务，并使用异步执行的结果进行一些额外的操作。换句话说，相当于，将将异步执行任务转换为同步执行任务。比如说：AFNetworking 中 AFURLSessionManager.m 里面的 tasksForKeyPath: 方法。通过引入信号量的方式，等待异步执行任务结果，获取到 tasks，然后再返回该 tasks。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-built_in">NSArray</span> *)tasksForKeyPath:(<span class="hljs-built_in">NSString</span> *)keyPath &#123;<br>    __block <span class="hljs-built_in">NSArray</span> *tasks = <span class="hljs-literal">nil</span>;<br>    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="hljs-number">0</span>);<br>    [<span class="hljs-keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="hljs-built_in">NSArray</span> *dataTasks, <span class="hljs-built_in">NSArray</span> *uploadTasks, <span class="hljs-built_in">NSArray</span> *downloadTasks) &#123;<br>        <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-built_in">NSStringFromSelector</span>(<span class="hljs-keyword">@selector</span>(dataTasks))]) &#123;<br>            tasks = dataTasks;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-built_in">NSStringFromSelector</span>(<span class="hljs-keyword">@selector</span>(uploadTasks))]) &#123;<br>            tasks = uploadTasks;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-built_in">NSStringFromSelector</span>(<span class="hljs-keyword">@selector</span>(downloadTasks))]) &#123;<br>            tasks = downloadTasks;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ([keyPath isEqualToString:<span class="hljs-built_in">NSStringFromSelector</span>(<span class="hljs-keyword">@selector</span>(tasks))]) &#123;<br>            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:<span class="hljs-string">@&quot;@unionOfArrays.self&quot;</span>];<br>        &#125;<br><br>        dispatch_semaphore_signal(semaphore);<br>    &#125;];<br><br>    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);<br><br>    <span class="hljs-keyword">return</span> tasks;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Dispatch-Semaphore-线程安全和线程同步（为线程加锁）"><a href="#Dispatch-Semaphore-线程安全和线程同步（为线程加锁）" class="headerlink" title="Dispatch Semaphore 线程安全和线程同步（为线程加锁）"></a>Dispatch Semaphore 线程安全和线程同步（为线程加锁）</h3><ul><li><p>线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。<br><br>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。</p></li><li><p>线程同步：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。</p></li><li><p>举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。<br>下面，我们模拟火车票售卖的方式，实现 NSThread 线程安全和解决线程同步问题。<br>场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。</p><h4 id="非线程安全（不使用-semaphore）"><a href="#非线程安全（不使用-semaphore）" class="headerlink" title="非线程安全（不使用 semaphore）"></a>非线程安全（不使用 semaphore）</h4><p>先来看看不考虑线程安全的代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 非线程安全：不使用 semaphore</span><br><span class="hljs-comment"> * 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)initTicketStatusNotSave &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;currentThread---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]);  <span class="hljs-comment">// 打印当前线程</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;semaphore---begin&quot;</span>);<br>    <br>    <span class="hljs-keyword">self</span>.ticketSurplusCount = <span class="hljs-number">50</span>;<br>    <br>    <span class="hljs-comment">// queue1 代表北京火车票售卖窗口</span><br>    <span class="hljs-built_in">dispatch_queue_t</span> queue1 = dispatch_queue_create(<span class="hljs-string">&quot;net.bujige.testQueue1&quot;</span>, DISPATCH_QUEUE_SERIAL);<br>    <span class="hljs-comment">// queue2 代表上海火车票售卖窗口</span><br>    <span class="hljs-built_in">dispatch_queue_t</span> queue2 = dispatch_queue_create(<span class="hljs-string">&quot;net.bujige.testQueue2&quot;</span>, DISPATCH_QUEUE_SERIAL);<br>    <br>    __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf = <span class="hljs-keyword">self</span>;<br>    <span class="hljs-built_in">dispatch_async</span>(queue1, ^&#123;<br>        [weakSelf saleTicketNotSafe];<br>    &#125;);<br>    <br>    <span class="hljs-built_in">dispatch_async</span>(queue2, ^&#123;<br>        [weakSelf saleTicketNotSafe];<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 售卖火车票(非线程安全)</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)saleTicketNotSafe &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.ticketSurplusCount &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//如果还有票，继续售卖</span><br>            <span class="hljs-keyword">self</span>.ticketSurplusCount--;<br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;剩余票数：%d 窗口：%@&quot;</span>, <span class="hljs-keyword">self</span>.ticketSurplusCount, [<span class="hljs-built_in">NSThread</span> currentThread]]);<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">0.2</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果已卖完，关闭售票窗口</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;所有火车票均已售完&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>输出结果（部分）：<br>2018-02-23 22:25:35.789072+0800 YSC-GCD-demo[20712:5258914] currentThread—&lt;NSThread: 0x604000068880&gt;{number = 1, name = main}</p></blockquote></li></ul><blockquote><p>2018-02-23 22:25:35.789260+0800 YSC-GCD-demo[20712:5258914] semaphore—begin</p></blockquote><blockquote><p>2018-02-23 22:25:35.789641+0800 YSC-GCD-demo[20712:5259176] 剩余票数：48 窗口：&lt;NSThread: 0x60000027db80&gt;{number = 3, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:25:35.789646+0800 YSC-GCD-demo[20712:5259175] 剩余票数：49 窗口：&lt;NSThread: 0x60000027e740&gt;{number = 4, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:25:35.994113+0800 YSC-GCD-demo[20712:5259175] 剩余票数：47 窗口：&lt;NSThread: 0x60000027e740&gt;{number = 4, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:25:35.994129+0800 YSC-GCD-demo[20712:5259176] 剩余票数：46 窗口：&lt;NSThread: 0x60000027db80&gt;{number = 3, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:25:36.198993+0800 YSC-GCD-demo[20712:5259176] 剩余票数：45 窗口：&lt;NSThread: 0x60000027db80&gt;{number = 3, name = (null)}</p></blockquote><p>可以看到在不考虑线程安全，不使用 semaphore 的情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。</p><h4 id="线程安全（使用-semaphore-加锁）"><a href="#线程安全（使用-semaphore-加锁）" class="headerlink" title="线程安全（使用 semaphore 加锁）"></a>线程安全（使用 semaphore 加锁）</h4><p>考虑线程安全的代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程安全：使用 semaphore 加锁</span><br><span class="hljs-comment"> * 初始化火车票数量、卖票窗口(线程安全)、并开始卖票</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)initTicketStatusSave &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;currentThread---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]);  <span class="hljs-comment">// 打印当前线程</span><br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;semaphore---begin&quot;</span>);<br>    <br>    semaphoreLock = dispatch_semaphore_create(<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">self</span>.ticketSurplusCount = <span class="hljs-number">50</span>;<br>    <br>    <span class="hljs-comment">// queue1 代表北京火车票售卖窗口</span><br>    <span class="hljs-built_in">dispatch_queue_t</span> queue1 = dispatch_queue_create(<span class="hljs-string">&quot;net.bujige.testQueue1&quot;</span>, DISPATCH_QUEUE_SERIAL);<br>    <span class="hljs-comment">// queue2 代表上海火车票售卖窗口</span><br>    <span class="hljs-built_in">dispatch_queue_t</span> queue2 = dispatch_queue_create(<span class="hljs-string">&quot;net.bujige.testQueue2&quot;</span>, DISPATCH_QUEUE_SERIAL);<br>    <br>    __<span class="hljs-keyword">weak</span> <span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">self</span>) weakSelf = <span class="hljs-keyword">self</span>;<br>    <span class="hljs-built_in">dispatch_async</span>(queue1, ^&#123;<br>        [weakSelf saleTicketSafe];<br>    &#125;);<br>    <br>    <span class="hljs-built_in">dispatch_async</span>(queue2, ^&#123;<br>        [weakSelf saleTicketSafe];<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 售卖火车票(线程安全)</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)saleTicketSafe &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 相当于加锁</span><br>        dispatch_semaphore_wait(semaphoreLock, DISPATCH_TIME_FOREVER);<br>        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.ticketSurplusCount &gt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">//如果还有票，继续售卖</span><br>            <span class="hljs-keyword">self</span>.ticketSurplusCount--;<br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;剩余票数：%d 窗口：%@&quot;</span>, <span class="hljs-keyword">self</span>.ticketSurplusCount, [<span class="hljs-built_in">NSThread</span> currentThread]]);<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">0.2</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果已卖完，关闭售票窗口</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;所有火车票均已售完&quot;</span>);<br>            <br>            <span class="hljs-comment">// 相当于解锁</span><br>            dispatch_semaphore_signal(semaphoreLock);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 相当于解锁</span><br>        dispatch_semaphore_signal(semaphoreLock);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>2018-02-23 22:32:19.814232+0800 YSC-GCD-demo[20862:5290531] currentThread—&lt;NSThread: 0x6000000783c0&gt;{number = 1, name = main}</p></blockquote><blockquote><p>2018-02-23 22:32:19.814412+0800 YSC-GCD-demo[20862:5290531] semaphore—begin</p></blockquote><blockquote><p>2018-02-23 22:32:19.814837+0800 YSC-GCD-demo[20862:5290687] 剩余票数：49 窗口：&lt;NSThread: 0x6040002709c0&gt;{number = 3, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:20.017745+0800 YSC-GCD-demo[20862:5290689] 剩余票数：48 窗口：&lt;NSThread: 0x60000046c640&gt;{number = 4, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:20.222039+0800 YSC-GCD-demo[20862:5290687] 剩余票数：47 窗口：&lt;NSThread: 0x6040002709c0&gt;{number = 3, name = (null)}</p></blockquote><blockquote><p>…<br>2018-02-23 22:32:29.024817+0800 YSC-GCD-demo[20862:5290689] 剩余票数：4 窗口：&lt;NSThread: 0x60000046c640&gt;{number = 4, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:29.230110+0800 YSC-GCD-demo[20862:5290687] 剩余票数：3 窗口：&lt;NSThread: 0x6040002709c0&gt;{number = 3, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:29.433615+0800 YSC-GCD-demo[20862:5290689] 剩余票数：2 窗口：&lt;NSThread: 0x60000046c640&gt;{number = 4, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:29.637572+0800 YSC-GCD-demo[20862:5290687] 剩余票数：1 窗口：&lt;NSThread: 0x6040002709c0&gt;{number = 3, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:29.840234+0800 YSC-GCD-demo[20862:5290689] 剩余票数：0 窗口：&lt;NSThread: 0x60000046c640&gt;{number = 4, name = (null)}</p></blockquote><blockquote><p>2018-02-23 22:32:30.044960+0800 YSC-GCD-demo[20862:5290687] 所有火车票均已售完</p></blockquote><blockquote><p>2018-02-23 22:32:30.045260+0800 YSC-GCD-demo[20862:5290689] 所有火车票均已售完</p></blockquote><p>可以看出，在考虑了线程安全的情况下，使用 dispatch_semaphore<br>机制之后，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。</p><h2 id="dispatch-group"><a href="#dispatch-group" class="headerlink" title="dispatch_group"></a>dispatch_group</h2><p>多个任务放到一个组中。</p><h3 id="dispatch-group-t"><a href="#dispatch-group-t" class="headerlink" title="dispatch_group_t"></a>dispatch_group_t</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">dispatch_group_t <span class="hljs-keyword">group</span> <span class="hljs-title">= dispatch_group_create</span>();<br></code></pre></td></tr></table></figure><h4 id="添加任务"><a href="#添加任务" class="headerlink" title="添加任务"></a>添加任务</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">dispatch_queue_t</span> queue = <span class="hljs-built_in">dispatch_queue_create</span>(<span class="hljs-string">&quot;name&quot;</span>, DISPATCH_QUEUE_SERIAL);<br><span class="hljs-keyword">int</span> context = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">dispatch_group_async_f</span>(group, queue, &amp;context, groupMethod);<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">groupMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;<br><br><span class="hljs-keyword">dispatch_queue_t</span> queue = <span class="hljs-built_in">dispatch_queue_create</span>(<span class="hljs-string">&quot;name&quot;</span>, DISPATCH_QUEUE_SERIAL);<br><span class="hljs-built_in">dispatch_group_async</span>(group, queue, ^&#123;<br>    <span class="hljs-comment">// TODO</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><h5 id="1-获取任务组任务完成，进行操作"><a href="#1-获取任务组任务完成，进行操作" class="headerlink" title="1. 获取任务组任务完成，进行操作"></a>1. 获取任务组任务完成，进行操作</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 所有任务执行完，通知调度组，在queue上异步执行block，不会阻塞当前任务<br>dispatch_group_notify_f(group, queue5, &amp;context, groupMethod);<br><br>void groupMethod() &#123;<br>    <span class="hljs-regexp">//</span> TODO<br>&#125;<br><br><span class="hljs-regexp">//</span> dispatch_group_notify_f的封装    <br>dispatch_group_notify(group, queue, ^&#123;<br>    <span class="hljs-regexp">//</span> TODO<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-通知group，下面的任务马上要放到group中执行了。"><a href="#2-通知group，下面的任务马上要放到group中执行了。" class="headerlink" title="2. 通知group，下面的任务马上要放到group中执行了。"></a>2. 通知group，下面的任务马上要放到group中执行了。</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">dispatch<span class="hljs-constructor">_group_enter(<span class="hljs-params">group</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="3-通知group，任务完成了，该任务要从group中移除了。"><a href="#3-通知group，任务完成了，该任务要从group中移除了。" class="headerlink" title="3. 通知group，任务完成了，该任务要从group中移除了。"></a>3. 通知group，任务完成了，该任务要从group中移除了。</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">dispatch<span class="hljs-constructor">_group_leave(<span class="hljs-params">group</span>)</span>;<br></code></pre></td></tr></table></figure><h4 id="4-设置超时"><a href="#4-设置超时" class="headerlink" title="4. 设置超时"></a>4. 设置超时</h4><p>假设创建dispatch_group_wait里的dispatch_time等待时间是4秒,那么group里的内容在4s内完成的话,那wait直接结束,如果group在4s内没有执行完,那么wait也会结束,结束之后,周末的任务就会被加进来了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">long result = dispatch<span class="hljs-constructor">_group_wait(<span class="hljs-params">group</span>, <span class="hljs-params">dispatch_time</span>(DISPATCH_TIME_NOW, 4.0 <span class="hljs-operator">*</span> NSEC_PER_SEC)</span>);<br><span class="hljs-keyword">if</span> (result) &#123;<br>    <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;超过等待时间了&quot;</span>)</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-constructor">NSLog(@<span class="hljs-string">&quot;时间没有超过等待时间&quot;</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS多线程-NSOperation</title>
    <link href="/2019/02/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B-NSOperation/"/>
    <url>/2019/02/01/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B-NSOperation/</url>
    
    <content type="html"><![CDATA[<h2 id="1-NSOperation、NSOperationQueue-简介"><a href="#1-NSOperation、NSOperationQueue-简介" class="headerlink" title="1.NSOperation、NSOperationQueue 简介"></a>1.NSOperation、NSOperationQueue 简介</h2><p>NSOperation、NSOperationQueue 是苹果提供给我们的一套多线程解决方案。实际上 NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。</p><h5 id="为什么要使用-NSOperation、NSOperationQueue？"><a href="#为什么要使用-NSOperation、NSOperationQueue？" class="headerlink" title="为什么要使用 NSOperation、NSOperationQueue？"></a>为什么要使用 NSOperation、NSOperationQueue？</h5><ol><li>可添加完成的代码块，在操作完成后执行。</li><li>添加操作之间的依赖关系，方便的控制执行顺序。</li><li>设定操作执行的优先级。</li><li>可以很方便的取消一个操作的执行。</li><li>使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。</li></ol><h2 id="2-NSOperation、NSOperationQueue-操作和操作队列"><a href="#2-NSOperation、NSOperationQueue-操作和操作队列" class="headerlink" title="2. NSOperation、NSOperationQueue 操作和操作队列"></a>2. NSOperation、NSOperationQueue 操作和操作队列</h2><p>既然是基于 GCD 的更高一层的封装。那么，GCD 中的一些概念同样适用于 NSOperation、NSOperationQueue。在 NSOperation、NSOperationQueue 中也有类似的任务（操作）和队列（操作队列）的概念。</p><h4 id="操作（Operation）："><a href="#操作（Operation）：" class="headerlink" title="操作（Operation）："></a>操作（Operation）：</h4><ul><li>执行操作的意思，换句话说就是你在线程中执行的那段代码。</li><li>在 GCD 中是放在 block 中的。在 NSOperation 中，我们使用 NSOperation 子类 NSInvocationOperation、NSBlockOperation，或者自定义子类来封装操作。<h4 id="操作队列（Operation-Queues）："><a href="#操作队列（Operation-Queues）：" class="headerlink" title="操作队列（Operation Queues）："></a>操作队列（Operation Queues）：</h4></li><li>这里的队列指操作队列，即用来存放操作的队列。不同于 GCD 中的调度队列 FIFO（先进先出）的原则。NSOperationQueue 对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。</li><li>操作队列通过设置最大并发操作数（maxConcurrentOperationCount）来控制并发、串行。</li><li>NSOperationQueue 为我们提供了两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。</li></ul><h2 id="3-NSOperation、NSOperationQueue-使用步骤"><a href="#3-NSOperation、NSOperationQueue-使用步骤" class="headerlink" title="3. NSOperation、NSOperationQueue 使用步骤"></a>3. NSOperation、NSOperationQueue 使用步骤</h2><p>NSOperation 需要配合 NSOperationQueue 来实现多线程。因为默认情况下，NSOperation 单独使用时系统同步执行操作，配合 NSOperationQueue 我们能更好的实现异步执行。<br>NSOperation 实现多线程的使用步骤分为三步：</p><p>创建操作：先将需要执行的操作封装到一个 NSOperation 对象中。<br>创建队列：创建 NSOperationQueue 对象。<br>将操作加入到队列中：将 NSOperation 对象添加到 NSOperationQueue 对象中。</p><p>之后呢，系统就会自动将 NSOperationQueue 中的 NSOperation 取出来，在新线程中执行操作。<br>下面我们来学习下 NSOperation 和 NSOperationQueue 的基本使用。</p><h2 id="4-NSOperation-和-NSOperationQueue-基本使用"><a href="#4-NSOperation-和-NSOperationQueue-基本使用" class="headerlink" title="4. NSOperation 和 NSOperationQueue 基本使用"></a>4. NSOperation 和 NSOperationQueue 基本使用</h2><h3 id="4-1-创建操作"><a href="#4-1-创建操作" class="headerlink" title="4.1 创建操作"></a>4.1 创建操作</h3><p>NSOperation 是个抽象类，不能用来封装操作。我们只有使用它的子类来封装操作。我们有三种方式来封装操作。</p><p>使用子类 NSInvocationOperation<br>使用子类 NSBlockOperation<br>自定义继承自 NSOperation 的子类，通过实现内部相应的方法来封装操作。</p><p>在不使用 NSOperationQueue，单独使用 NSOperation 的情况下系统同步执行操作，下面我们学习以下操作的三种创建方式。</p><h4 id="4-1-1-使用子类-NSInvocationOperation"><a href="#4-1-1-使用子类-NSInvocationOperation" class="headerlink" title="4.1.1 使用子类 NSInvocationOperation"></a>4.1.1 使用子类 NSInvocationOperation</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用子类 NSInvocationOperation</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)useInvocationOperation &#123;<br><br>    <span class="hljs-comment">// 1.创建 NSInvocationOperation 对象</span><br>    <span class="hljs-built_in">NSInvocationOperation</span> *op = [[<span class="hljs-built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(task1) object:<span class="hljs-literal">nil</span>];<br><br>    <span class="hljs-comment">// 2.调用 start 方法开始执行操作</span><br>    [op start];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 任务1</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)task1 &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-8adc1a81b44170e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><ul><li>可以看到：在没有使用 NSOperationQueue、在主线程中单独使用使用子类 NSInvocationOperation 执行一个操作的情况下，操作是在当前线程执行的，并没有开启新线程。<br>如果在其他线程中执行操作，则打印结果为其他线程。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 在其他线程使用子类 NSInvocationOperation</span><br>[<span class="hljs-built_in">NSThread</span> detachNewThreadSelector:<span class="hljs-keyword">@selector</span>(useInvocationOperation) toTarget:<span class="hljs-keyword">self</span> withObject:<span class="hljs-literal">nil</span>];<br></code></pre></td></tr></table></figure>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-3a5b4d58d70a9129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></li><li>可以看到：在其他线程中单独使用子类 NSInvocationOperation，操作是在当前调用的其他线程执行的，并没有开启新线程。</li></ul><p>下边再来看看 NSBlockOperation。</p><h4 id="4-1-2-使用子类-NSBlockOperation"><a href="#4-1-2-使用子类-NSBlockOperation" class="headerlink" title="4.1.2 使用子类 NSBlockOperation"></a>4.1.2 使用子类 NSBlockOperation</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用子类 NSBlockOperation</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)useBlockOperation &#123;<br><br>    <span class="hljs-comment">// 1.创建 NSBlockOperation 对象</span><br>    <span class="hljs-built_in">NSBlockOperation</span> *op = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br><br>    <span class="hljs-comment">// 2.调用 start 方法开始执行操作</span><br>    [op start];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-bfec9a19f48614b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><ul><li>可以看到：在没有使用 NSOperationQueue、在主线程中单独使用 NSBlockOperation 执行一个操作的情况下，操作是在当前线程执行的，并没有开启新线程。</li></ul><blockquote><p>注意：和上边 NSInvocationOperation 使用一样。因为代码是在主线程中调用的，所以打印结果为主线程。如果在其他线程中执行操作，则打印结果为其他线程。</p></blockquote><p>但是，NSBlockOperation 还提供了一个方法 addExecutionBlock:，通过 addExecutionBlock: 就可以为 NSBlockOperation 添加额外的操作。这些操作（包括 blockOperationWithBlock 中的操作）可以在不同的线程中同时（并发）执行。只有当所有相关的操作已经完成执行时，才视为完成。<br><br><br><br><br>如果添加的操作多的话，blockOperationWithBlock: 中的操作也可能会在其他线程（非当前线程）中执行，这是由系统决定的，并不是说添加到 blockOperationWithBlock: 中的操作一定会在当前线程中执行。（可以使用 addExecutionBlock: 多添加几个操作试试）。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用子类 NSBlockOperation</span><br><span class="hljs-comment"> * 调用方法 AddExecutionBlock:</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)useBlockOperationAddExecutionBlock &#123;<br><br>    <span class="hljs-comment">// 1.创建 NSBlockOperation 对象</span><br>    <span class="hljs-built_in">NSBlockOperation</span> *op = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br><br>    <span class="hljs-comment">// 2.添加额外的操作</span><br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;4---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;5---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;6---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;7---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;8---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br><br>    <span class="hljs-comment">// 3.调用 start 方法开始执行操作</span><br>    [op start];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-86c1302fa13acc83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><ul><li>可以看出：使用子类 NSBlockOperation，并调用方法 AddExecutionBlock: 的情况下，blockOperationWithBlock:方法中的操作 和 addExecutionBlock: 中的操作是在不同的线程中异步执行的。而且，这次执行结果中 blockOperationWithBlock:方法中的操作也不是在当前线程（主线程）中执行的。从而印证了blockOperationWithBlock: 中的操作也可能会在其他线程（非当前线程）中执行。</li></ul><p>一般情况下，如果一个 NSBlockOperation 对象封装了多个操作。NSBlockOperation 是否开启新线程，取决于操作的个数。如果添加的操作的个数多，就会自动开启新线程。当然开启的线程数是由系统来决定的。</p><h4 id="4-1-3-使用自定义继承自-NSOperation-的子类"><a href="#4-1-3-使用自定义继承自-NSOperation-的子类" class="headerlink" title="4.1.3 使用自定义继承自 NSOperation 的子类"></a>4.1.3 使用自定义继承自 NSOperation 的子类</h4><p>如果使用子类 NSInvocationOperation、NSBlockOperation 不能满足日常需求，我们可以使用自定义继承自 NSOperation 的子类。可以通过重写 main 或者 start 方法 来定义自己的 NSOperation 对象。重写main方法比较简单，我们不需要管理操作的状态属性 isExecuting 和 isFinished。当 main 执行完返回的时候，这个操作就结束了。</p><p>先定义一个继承自 NSOperation 的子类，重写main方法。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// YSCOperation.h 文件</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&lt;Foundation/Foundation.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">YSCOperation</span> : <span class="hljs-title">NSOperation</span></span><br><br><span class="hljs-keyword">@end</span><br><br><span class="hljs-comment">// YSCOperation.m 文件</span><br><span class="hljs-meta">#import <span class="hljs-meta-string">&quot;YSCOperation.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">YSCOperation</span></span><br><br>- (<span class="hljs-keyword">void</span>)main &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">self</span>.isCancelled) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];<br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@end</span><br></code></pre></td></tr></table></figure><p>然后使用的时候导入头文件YSCOperation.h。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用自定义继承自 NSOperation 的子类</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)useCustomOperation &#123;<br>    <span class="hljs-comment">// 1.创建 YSCOperation 对象</span><br>    YSCOperation *op = [[YSCOperation alloc] <span class="hljs-keyword">init</span>];<br>    <span class="hljs-comment">// 2.调用 start 方法开始执行操作</span><br>    [<span class="hljs-meta">op start</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-3ed047566df45382.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><ul><li>可以看出：在没有使用 NSOperationQueue、在主线程单独使用自定义继承自 NSOperation 的子类的情况下，是在主线程执行操作，并没有开启新线程。</li></ul><p>下边我们来讲讲 NSOperationQueue 的创建。</p><h3 id="4-2-创建队列"><a href="#4-2-创建队列" class="headerlink" title="4.2 创建队列"></a>4.2 创建队列</h3><p>NSOperationQueue 一共有两种队列：主队列、自定义队列。其中自定义队列同时包含了串行、并发功能。下边是主队列、自定义队列的基本创建方法和特点。</p><h4 id="主队列"><a href="#主队列" class="headerlink" title="主队列"></a>主队列</h4><ul><li>凡是添加到主队列中的操作，都会放到主线程中执行（注：不包括操作使用addExecutionBlock:添加的额外操作，额外操作可能在其他线程执行，感谢指正）。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"> <span class="hljs-comment">// 主队列获取方法</span><br><span class="hljs-built_in">NSOperationQueue</span> *queue = [<span class="hljs-built_in">NSOperationQueue</span> mainQueue];<br></code></pre></td></tr></table></figure><h4 id="自定义队列（非主队列）"><a href="#自定义队列（非主队列）" class="headerlink" title="自定义队列（非主队列）"></a>自定义队列（非主队列）</h4></li><li>添加到这种队列中的操作，就会自动放到子线程中执行。</li><li>同时包含了：串行、并发功能。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 自定义队列创建方法</span><br><span class="hljs-type">NSOperationQueue</span> <span class="hljs-operator">*</span>queue <span class="hljs-operator">=</span> [[<span class="hljs-type">NSOperationQueue</span> alloc] <span class="hljs-keyword">init</span>];<br></code></pre></td></tr></table></figure><h3 id="4-3-将操作加入到队列中"><a href="#4-3-将操作加入到队列中" class="headerlink" title="4.3 将操作加入到队列中"></a>4.3 将操作加入到队列中</h3>上边我们说到 NSOperation 需要配合 NSOperationQueue 来实现多线程。</li></ul><p>那么我们需要将创建好的操作加入到队列中去。总共有两种方法：</p><p>1.- (void)addOperation:(NSOperation *)op;</p><ul><li>需要先创建操作，再将创建好的操作加入到创建好的队列中去。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 addOperation: 将操作加入到操作队列中</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)addOperationToQueue &#123;<br><br>    <span class="hljs-comment">// 1.创建队列</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue = [[<span class="hljs-built_in">NSOperationQueue</span> alloc] init];<br><br>    <span class="hljs-comment">// 2.创建操作</span><br>    <span class="hljs-comment">// 使用 NSInvocationOperation 创建操作1</span><br>    <span class="hljs-built_in">NSInvocationOperation</span> *op1 = [[<span class="hljs-built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(task1) object:<span class="hljs-literal">nil</span>];<br><br>    <span class="hljs-comment">// 使用 NSInvocationOperation 创建操作2</span><br>    <span class="hljs-built_in">NSInvocationOperation</span> *op2 = [[<span class="hljs-built_in">NSInvocationOperation</span> alloc] initWithTarget:<span class="hljs-keyword">self</span> selector:<span class="hljs-keyword">@selector</span>(task2) object:<span class="hljs-literal">nil</span>];<br><br>    <span class="hljs-comment">// 使用 NSBlockOperation 创建操作3</span><br>    <span class="hljs-built_in">NSBlockOperation</span> *op3 = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [op3 addExecutionBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;4---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br><br>    <span class="hljs-comment">// 3.使用 addOperation: 添加所有操作到队列中</span><br>    [queue addOperation:op1]; <span class="hljs-comment">// [op1 start]</span><br>    [queue addOperation:op2]; <span class="hljs-comment">// [op2 start]</span><br>    [queue addOperation:op3]; <span class="hljs-comment">// [op3 start]</span><br>&#125;<br></code></pre></td></tr></table></figure>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-f31a03ee66c365e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></li><li>可以看出：使用 NSOperation 子类创建操作，并使用 addOperation: 将操作加入到操作队列后能够开启新线程，进行并发执行.</li></ul><br>2.- (void)addOperationWithBlock:(void (^)(void))block;- 无需先创建操作，在 block 中添加操作，直接将包含操作的 block 加入到队列中。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 addOperationWithBlock: 将操作加入到操作队列中</span><br><span class="hljs-comment"> */</span><br><br>- (<span class="hljs-keyword">void</span>)addOperationWithBlockToQueue &#123;<br>    <span class="hljs-comment">// 1.创建队列</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue = [[<span class="hljs-built_in">NSOperationQueue</span> alloc] init];<br><br>    <span class="hljs-comment">// 2.使用 addOperationWithBlock: 添加操作到队列中</span><br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-ac8c2cdaf40b4202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><ul><li>可以看出：使用 addOperationWithBlock: 将操作加入到操作队列后能够开启新线程，进行并发执行。</li></ul><h2 id="5-NSOperationQueue-控制串行执行、并发执行"><a href="#5-NSOperationQueue-控制串行执行、并发执行" class="headerlink" title="5. NSOperationQueue 控制串行执行、并发执行"></a>5. NSOperationQueue 控制串行执行、并发执行</h2><p>之前我们说过，NSOperationQueue 创建的自定义队列同时具有串行、并发功能，上边我们演示了并发功能，那么他的串行功能是如何实现的？</p><p>这里有个关键属性 maxConcurrentOperationCount，叫做最大并发操作数。用来控制一个特定队列中可以有多少个操作同时参与并发执行。</p><blockquote><p>注意：这里 maxConcurrentOperationCount 控制的不是并发线程的数量，而是一个队列中同时能并发执行的最大操作数。而且一个操作也并非只能在一个线程中运行。</p></blockquote><h4 id="最大并发操作数：maxConcurrentOperationCount"><a href="#最大并发操作数：maxConcurrentOperationCount" class="headerlink" title="最大并发操作数：maxConcurrentOperationCount"></a>最大并发操作数：maxConcurrentOperationCount</h4><ul><li><p>maxConcurrentOperationCount 默认情况下为-1，表示不进行限制，可进行并发执行。</p></li><li><p>maxConcurrentOperationCount 为1时，队列为串行队列。只能串行执行。</p></li><li><p>maxConcurrentOperationCount 大于1时，队列为并发队列。操作并发执行，当然这个值不应超过系统限制，即使自己设置一个很大的值，系统也会自动调整为 min{自己设定的值，系统设定的默认最大值}。</p></li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 设置 MaxConcurrentOperationCount（最大并发操作数）</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)setMaxConcurrentOperationCount &#123;<br><br>    <span class="hljs-comment">// 1.创建队列</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue = [[<span class="hljs-built_in">NSOperationQueue</span> alloc] init];<br><br>    <span class="hljs-comment">// 2.设置最大并发操作数</span><br>    queue.maxConcurrentOperationCount = <span class="hljs-number">1</span>; <span class="hljs-comment">// 串行队列</span><br><span class="hljs-comment">// queue.maxConcurrentOperationCount = 2; // 并发队列</span><br><span class="hljs-comment">// queue.maxConcurrentOperationCount = 8; // 并发队列</span><br><br>    <span class="hljs-comment">// 3.添加操作</span><br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;3---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;4---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>最大并发操作数为1 输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-79e0996ee294d434.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p></li><li><p>最大并发操作数为2 输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-c4f7ac2202fcb871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p></li><li><p>可以看出：当最大并发操作数为1时，操作是按顺序串行执行的，并且一个操作完成之后，下一个操作才开始执行。当最大操作并发数为2时，操作是并发执行的，可以同时执行两个操作。而开启线程数量是由系统决定的，不需要我们来管理。</p></li></ul><p>这样看来，是不是比 GCD 还要简单了许多？</p><h2 id="6-NSOperation-操作依赖"><a href="#6-NSOperation-操作依赖" class="headerlink" title="6. NSOperation 操作依赖"></a>6. NSOperation 操作依赖</h2><p>NSOperation、NSOperationQueue 最吸引人的地方是它能添加操作之间的依赖关系。通过操作依赖，我们可以很方便的控制操作之间的执行先后顺序。NSOperation 提供了3个接口供我们管理和查看依赖。</p><blockquote><ul><li>(void)addDependency:(NSOperation *)op; 添加依赖，使当前操作依赖于操作 op 的完成。</li></ul></blockquote><blockquote><ul><li>(void)removeDependency:(NSOperation *)op; 移除依赖，取消当前操作对操作 op 的依赖。</li></ul></blockquote><blockquote><p>@property (readonly, copy) NSArray&lt;NSOperation *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。</p></blockquote><p>当然，我们经常用到的还是添加依赖操作。现在考虑这样的需求，比如说有 A、B 两个操作，其中 A 执行完操作，B 才能执行操作。</p><p>如果使用依赖来处理的话，那么就需要让操作 B 依赖于操作 A。具体代码如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 操作依赖</span><br><span class="hljs-comment"> * 使用方法：addDependency:</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)addDependency &#123;<br><br>    <span class="hljs-comment">// 1.创建队列</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue = [[<span class="hljs-built_in">NSOperationQueue</span> alloc] init];<br><br>    <span class="hljs-comment">// 2.创建操作</span><br>    <span class="hljs-built_in">NSBlockOperation</span> *op1 = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br>    <span class="hljs-built_in">NSBlockOperation</span> *op2 = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br>    &#125;];<br><br>    <span class="hljs-comment">// 3.添加依赖</span><br>    [op2 addDependency:op1]; <span class="hljs-comment">// 让op2 依赖于 op1，则先执行op1，在执行op2</span><br><br>    <span class="hljs-comment">// 4.添加操作到队列中</span><br>    [queue addOperation:op1];<br>    [queue addOperation:op2];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-c0ce9c8c762ea71b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><ul><li>可以看到：通过添加操作依赖，无论运行几次，其结果都是 op1 先执行，op2 后执行。</li></ul><h2 id="7-NSOperation-优先级"><a href="#7-NSOperation-优先级" class="headerlink" title="7. NSOperation 优先级"></a>7. NSOperation 优先级</h2><p>NSOperation 提供了queuePriority（优先级）属性，queuePriority属性适用于同一操作队列中的操作，不适用于不同操作队列中的操作。默认情况下，所有新创建的操作对象优先级都是NSOperationQueuePriorityNormal。但是我们可以通过setQueuePriority:方法来改变当前操作在同一队列中的执行优先级。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elm">// 优先级的取值<br>typedef <span class="hljs-type">NS_ENUM</span>(<span class="hljs-type">NSInteger</span>, <span class="hljs-type">NSOperationQueuePriority</span>) &#123;<br>    <span class="hljs-type">NSOperationQueuePriorityVeryLow</span> = -8L,<br>    <span class="hljs-type">NSOperationQueuePriorityLow</span> = -4L,<br>    <span class="hljs-type">NSOperationQueuePriorityNormal</span> = 0,<br>    <span class="hljs-type">NSOperationQueuePriorityHigh</span> = 4,<br>    <span class="hljs-type">NSOperationQueuePriorityVeryHigh</span> = 8<br>&#125;;<br></code></pre></td></tr></table></figure><p>上边我们说过：对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。</p><h5 id="那么，什么样的操作才是进入就绪状态的操作呢？"><a href="#那么，什么样的操作才是进入就绪状态的操作呢？" class="headerlink" title="那么，什么样的操作才是进入就绪状态的操作呢？"></a>那么，什么样的操作才是进入就绪状态的操作呢？</h5><ul><li>当一个操作的所有依赖都已经完成时，操作对象通常会进入准备就绪状态，等待执行。</li></ul><p>举个例子，现在有4个优先级都是 NSOperationQueuePriorityNormal（默认级别）的操作：op1，op2，op3，op4。其中 op3 依赖于 op2，op2 依赖于 op1，即 op3 -&gt; op2 -&gt; op1。现在将这4个操作添加到队列中并发执行。</p><ul><li>因为 op1 和 op4 都没有需要依赖的操作，所以在 op1，op4 执行之前，就是处于准备就绪状态的操作。</li><li>而 op3 和 op2 都有依赖的操作（op3 依赖于 op2，op2 依赖于 op1），所以 op3 和 op2 都不是准备就绪状态下的操作。</li></ul><p>理解了进入就绪状态的操作，那么我们就理解了queuePriority 属性的作用对象。</p><ul><li>queuePriority 属性决定了进入准备就绪状态下的操作之间的开始执行顺序。并且，优先级不能取代依赖关系。</li><li>如果一个队列中既包含高优先级操作，又包含低优先级操作，并且两个操作都已经准备就绪，那么队列先执行高优先级操作。比如上例中，如果 op1 和 op4 是不同优先级的操作，那么就会先执行优先级高的操作。</li><li>如果，一个队列中既包含了准备就绪状态的操作，又包含了未准备就绪的操作，未准备就绪的操作优先级比准备就绪的操作优先级高。那么，虽然准备就绪的操作优先级低，也会优先执行。优先级不能取代依赖关系。如果要控制操作间的启动顺序，则必须使用依赖关系。</li></ul><h2 id="8-NSOperation、NSOperationQueue-线程间的通信"><a href="#8-NSOperation、NSOperationQueue-线程间的通信" class="headerlink" title="8. NSOperation、NSOperationQueue 线程间的通信"></a>8. NSOperation、NSOperationQueue 线程间的通信</h2><p>在 iOS 开发过程中，我们一般在主线程里边进行 UI 刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程间通信</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)communication &#123;<br><br>    <span class="hljs-comment">// 1.创建队列</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue = [[<span class="hljs-built_in">NSOperationQueue</span> alloc]init];<br><br>    <span class="hljs-comment">// 2.添加操作</span><br>    [queue addOperationWithBlock:^&#123;<br>        <span class="hljs-comment">// 异步进行耗时操作</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;1---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>        &#125;<br><br>        <span class="hljs-comment">// 回到主线程</span><br>        [[<span class="hljs-built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;<br>            <span class="hljs-comment">// 进行一些 UI 刷新等操作</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>                [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>]; <span class="hljs-comment">// 模拟耗时操作</span><br>                <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;2---%@&quot;</span>, [<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br>            &#125;<br>        &#125;];<br>    &#125;];<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-c284bc79994a08dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><ul><li>可以看到：通过线程间的通信，先在其他线程中执行操作，等操作执行完了之后再回到主线程执行主线程的相应操作。</li></ul><h2 id="9-NSOperation、NSOperationQueue-线程同步和线程安全"><a href="#9-NSOperation、NSOperationQueue-线程同步和线程安全" class="headerlink" title="9. NSOperation、NSOperationQueue 线程同步和线程安全"></a>9. NSOperation、NSOperationQueue 线程同步和线程安全</h2><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。<br>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。</p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。</p><p>举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。<br>下面，我们模拟火车票售卖的方式，实现 NSOperation 线程安全和解决线程同步问题。<br>场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。</p><h3 id="9-1-NSOperation、NSOperationQueue-非线程安全"><a href="#9-1-NSOperation、NSOperationQueue-非线程安全" class="headerlink" title="9.1 NSOperation、NSOperationQueue 非线程安全"></a>9.1 NSOperation、NSOperationQueue 非线程安全</h3><p>先来看看不考虑线程安全的代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 非线程安全：不使用 NSLock</span><br><span class="hljs-comment"> * 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)initTicketStatusNotSave &#123;<br>    <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;currentThread---%@&quot;</span>,[<span class="hljs-built_in">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br><br>    <span class="hljs-keyword">self</span>.ticketSurplusCount = <span class="hljs-number">50</span>;<br><br>    <span class="hljs-comment">// 1.创建 queue1,queue1 代表北京火车票售卖窗口</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue1 = [[<span class="hljs-built_in">NSOperationQueue</span> alloc] init];<br>    queue1.maxConcurrentOperationCount = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 2.创建 queue2,queue2 代表上海火车票售卖窗口</span><br>    <span class="hljs-built_in">NSOperationQueue</span> *queue2 = [[<span class="hljs-built_in">NSOperationQueue</span> alloc] init];<br>    queue2.maxConcurrentOperationCount = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 3.创建卖票操作 op1</span><br>    <span class="hljs-built_in">NSBlockOperation</span> *op1 = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        [<span class="hljs-keyword">self</span> saleTicketNotSafe];<br>    &#125;];<br><br>    <span class="hljs-comment">// 4.创建卖票操作 op2</span><br>    <span class="hljs-built_in">NSBlockOperation</span> *op2 = [<span class="hljs-built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;<br>        [<span class="hljs-keyword">self</span> saleTicketNotSafe];<br>    &#125;];<br><br>    <span class="hljs-comment">// 5.添加操作，开始卖票</span><br>    [queue1 addOperation:op1];<br>    [queue2 addOperation:op2];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 售卖火车票(非线程安全)</span><br><span class="hljs-comment"> */</span><br>- (<span class="hljs-keyword">void</span>)saleTicketNotSafe &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.ticketSurplusCount &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果还有票，继续售卖</span><br>            <span class="hljs-keyword">self</span>.ticketSurplusCount--;<br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;%@&quot;</span>, [<span class="hljs-built_in">NSString</span> stringWithFormat:<span class="hljs-string">@&quot;剩余票数:%d 窗口:%@&quot;</span>, <span class="hljs-keyword">self</span>.ticketSurplusCount, [<span class="hljs-built_in">NSThread</span> currentThread]]);<br>            [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">0.2</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@&quot;所有火车票均已售完&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-e4a2e86c0523d4c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><p>省略一部分结果图。。。<br><img src="https://upload-images.jianshu.io/upload_images/1877784-4a354394f006929f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><blockquote><p>可以看到：在不考虑线程安全，不使用 NSLock 情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。</p></blockquote><h3 id="9-2-NSOperation、NSOperationQueue-线程安全"><a href="#9-2-NSOperation、NSOperationQueue-线程安全" class="headerlink" title="9.2 NSOperation、NSOperationQueue 线程安全"></a>9.2 NSOperation、NSOperationQueue 线程安全</h3><p>线程安全解决方案：可以给线程加锁，在一个线程执行该操作的时候，不允许其他线程进行操作。iOS 实现线程加锁有很多种方式。@synchronized、 NSLock、NSRecursiveLock、NSCondition、NSConditionLock、pthread_mutex、dispatch_semaphore、OSSpinLock、atomic(property) set/ge等等各种方式。这里我们使用 NSLock 对象来解决线程同步问题。NSLock 对象可以通过进入锁时调用 lock 方法，解锁时调用 unlock 方法来保证线程安全。<br>考虑线程安全的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程安全：使用 NSLock 加锁</span><br><span class="hljs-comment"> * 初始化火车票数量、卖票窗口(线程安全)、并开始卖票</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-operator">-</span> (void)initTicketStatusSave &#123;<br>    <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;currentThread---%@&quot;</span>,[<span class="hljs-type">NSThread</span> currentThread]); <span class="hljs-comment">// 打印当前线程</span><br><br>    <span class="hljs-keyword">self</span>.ticketSurplusCount <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><br>    <span class="hljs-keyword">self</span>.lock <span class="hljs-operator">=</span> [[<span class="hljs-type">NSLock</span> alloc] <span class="hljs-keyword">init</span>];  <span class="hljs-comment">// 初始化 NSLock 对象</span><br><br>    <span class="hljs-comment">// 1.创建 queue1,queue1 代表北京火车票售卖窗口</span><br>    <span class="hljs-type">NSOperationQueue</span> <span class="hljs-operator">*</span>queue1 <span class="hljs-operator">=</span> [[<span class="hljs-type">NSOperationQueue</span> alloc] <span class="hljs-keyword">init</span>];<br>    queue1.maxConcurrentOperationCount <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 2.创建 queue2,queue2 代表上海火车票售卖窗口</span><br>    <span class="hljs-type">NSOperationQueue</span> <span class="hljs-operator">*</span>queue2 <span class="hljs-operator">=</span> [[<span class="hljs-type">NSOperationQueue</span> alloc] <span class="hljs-keyword">init</span>];<br>    queue2.maxConcurrentOperationCount <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 3.创建卖票操作 op1</span><br>    <span class="hljs-type">NSBlockOperation</span> <span class="hljs-operator">*</span>op1 <span class="hljs-operator">=</span> [<span class="hljs-type">NSBlockOperation</span> blockOperationWithBlock:<span class="hljs-operator">^</span>&#123;<br>        [<span class="hljs-keyword">self</span> saleTicketSafe];<br>    &#125;];<br><br>    <span class="hljs-comment">// 4.创建卖票操作 op2</span><br>    <span class="hljs-type">NSBlockOperation</span> <span class="hljs-operator">*</span>op2 <span class="hljs-operator">=</span> [<span class="hljs-type">NSBlockOperation</span> blockOperationWithBlock:<span class="hljs-operator">^</span>&#123;<br>        [<span class="hljs-keyword">self</span> saleTicketSafe];<br>    &#125;];<br><br>    <span class="hljs-comment">// 5.添加操作，开始卖票</span><br>    [queue1 addOperation:op1];<br>    [queue2 addOperation:op2];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 售卖火车票(线程安全)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-operator">-</span> (void)saleTicketSafe &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-comment">// 加锁</span><br>        [<span class="hljs-keyword">self</span>.lock lock];<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.ticketSurplusCount <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果还有票，继续售卖</span><br>            <span class="hljs-keyword">self</span>.ticketSurplusCount<span class="hljs-operator">--</span>;<br>            <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>, [<span class="hljs-type">NSString</span> stringWithFormat:@<span class="hljs-string">&quot;剩余票数:%d 窗口:%@&quot;</span>, <span class="hljs-keyword">self</span>.ticketSurplusCount, [<span class="hljs-type">NSThread</span> currentThread]]);<br>            [<span class="hljs-type">NSThread</span> sleepForTimeInterval:<span class="hljs-number">0.2</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// 解锁</span><br>        [<span class="hljs-keyword">self</span>.lock unlock];<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.ticketSurplusCount <span class="hljs-operator">&lt;=</span> <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">NSLog</span>(@<span class="hljs-string">&quot;所有火车票均已售完&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/1877784-7bffb9eade5887d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><p>省略一部分结果图。。。</p><p><img src="https://upload-images.jianshu.io/upload_images/1877784-6698fdd0d10b0d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000"></p><blockquote><p>可以看出：在考虑了线程安全，使用 NSLock 加锁、解锁机制的情况下，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。</p></blockquote><h2 id="10-NSOperation、NSOperationQueue-常用属性和方法归纳"><a href="#10-NSOperation、NSOperationQueue-常用属性和方法归纳" class="headerlink" title="10. NSOperation、NSOperationQueue 常用属性和方法归纳"></a>10. NSOperation、NSOperationQueue 常用属性和方法归纳</h2><h3 id="10-1-NSOperation-常用属性和方法"><a href="#10-1-NSOperation-常用属性和方法" class="headerlink" title="10.1 NSOperation 常用属性和方法"></a>10.1 NSOperation 常用属性和方法</h3><p>1、取消操作方法</p><ul><li>-(void)cancel; 可取消操作，实质是标记 isCancelled 状态。</li></ul><p>2、判断操作状态方法</p><ul><li><p>-(BOOL)isFinished; 判断操作是否已经结束。</p></li><li><p>-(BOOL)isCancelled; 判断操作是否已经标记为取消。</p></li><li><p>-(BOOL)isExecuting; 判断操作是否正在在运行。</p></li><li><p>-(BOOL)isReady; 判断操作是否处于准备就绪状态，这个值和操作的依赖关系相关。</p></li></ul><p>3、操作同步</p><ul><li><p>-(void)waitUntilFinished; 阻塞当前线程，直到该操作结束。可用于线程执行顺序的同步。</p></li><li><p>-(void)setCompletionBlock:(void (^)(void))block; completionBlock 会在当前操作执行完毕时执行 completionBlock。</p></li><li><p>-(void)addDependency:(NSOperation *)op; 添加依赖，使当前操作依赖于操作 op 的完成。</p></li><li><p>-(void)removeDependency:(NSOperation *)op; 移除依赖，取消当前操作对操作 op 的依赖。</p></li><li><p>@property (readonly, copy) NSArray&lt;NSOperation *&gt; *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。</p></li></ul><h3 id="10-2-NSOperationQueue-常用属性和方法"><a href="#10-2-NSOperationQueue-常用属性和方法" class="headerlink" title="10.2 NSOperationQueue 常用属性和方法"></a>10.2 NSOperationQueue 常用属性和方法</h3><p>1、取消/暂停/恢复操作</p><ul><li><p>-(void)cancelAllOperations; 可以取消队列的所有操作。</p></li><li><p>-(BOOL)isSuspended; 判断队列是否处于暂停状态。 YES 为暂停状态，NO 为恢复状态。</p></li><li><p>-(void)setSuspended:(BOOL)b; 可设置操作的暂停和恢复，YES 代表暂停队列，NO 代表恢复队列。</p></li></ul><p>2、操作同步</p><ul><li>-(void)waitUntilAllOperationsAreFinished; 阻塞当前线程，直到队列中的操作全部执行完毕。</li></ul><p>3、添加/获取操作</p><ul><li><p>-(void)addOperationWithBlock:(void (^)(void))block; 向队列中添加一个 NSBlockOperation 类型操作对象。</p></li><li><p>-(void)addOperations:(NSArray *)ops waitUntilFinished:(BOOL)wait; 向队列中添加操作数组，wait 标志是否阻塞当前线程直到所有操作结束</p></li><li><p>-(NSArray *)operations; 当前在队列中的操作数组（某个操作执行结束后会自动从这个数组清除）。</p></li><li><p>-(NSUInteger)operationCount; 当前队列中的操作数。</p></li></ul><p>4、获取队列</p><ul><li>+(id)currentQueue; 获取当前队列，如果当前线程不是在 NSOperationQueue 上运行则返回 nil。</li><li>-(id)mainQueue; 获取主队列。<blockquote><p>注意：</p><p>这里的暂停和取消（包括操作的取消和队列的取消）并不代表可以将当前的操作立即取消，而是当当前的操作执行完毕之后不再执行新的操作。<br>暂停和取消的区别就在于：暂停操作之后还可以恢复操作，继续向下执行；而取消操作之后，所有的操作就清空了，无法再接着执行剩下的操作。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 动画-CAAniamtion的属性和使用</title>
    <link href="/2019/01/01/iOS%E5%8A%A8%E7%94%BB-CAAniamtion%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2019/01/01/iOS%E5%8A%A8%E7%94%BB-CAAniamtion%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="CAAnimation"><a href="#CAAnimation" class="headerlink" title="CAAnimation"></a>CAAnimation</h2><p>CAAnimation是所有动画对象的父类，负责控制动画的持续时间和速度，是个抽象类，不能直接使用，应该使用它具体的子类。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote><ul><li><p>duration：动画的持续时间</p></li><li><p>repeatCount：动画的重复次数</p></li><li><p>repeatDuration：动画的重复时间</p></li><li><p>removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards</p></li><li><p>fillMode：决定当前对象在非active时间段的行为。比如动画开始之前,动画结束之后</p></li><li><p>beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间</p></li><li><p>timingFunction：速度控制函数，控制动画运行的节奏</p></li><li><p>delegate：动画代理</p></li></ul></blockquote><h2 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h2><h3 id="1-CAPropertyAnimation"><a href="#1-CAPropertyAnimation" class="headerlink" title="1.CAPropertyAnimation"></a>1.CAPropertyAnimation</h3><p>是CAAnimation的子类，也是个抽象类，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation。</p><blockquote><ul><li>keyPath 通过指定CALayer的一个属性名称为keyPath(NSString类型)，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@”position”为keyPath，就修改CALayer的position属性的值，以达到平移的动画效果。</li></ul></blockquote><h3 id="2-CABasicAnimation"><a href="#2-CABasicAnimation" class="headerlink" title="2.CABasicAnimation"></a>2.CABasicAnimation</h3><blockquote><ul><li><p>fromValue：keyPath相应属性的初始值。</p></li><li><p>toValue：keyPath相应属性的结束值。</p></li><li><p>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue。</p></li><li><p>如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)。</p></li></ul></blockquote><h3 id="3-CAKeyframeAnimation"><a href="#3-CAKeyframeAnimation" class="headerlink" title="3.CAKeyframeAnimation"></a>3.CAKeyframeAnimation</h3><p>CApropertyAnimation的子类，跟CABasicAnimation的区别是：CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值。</p><blockquote><ul><li><p>values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧。</p></li><li><p>path：可以设置一个CGPathRef\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略。</p></li><li><p>keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的。</p></li><li><p>CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation。</p></li></ul></blockquote><h3 id="4-CAAnimationGroup"><a href="#4-CAAnimationGroup" class="headerlink" title="4.CAAnimationGroup"></a>4.CAAnimationGroup</h3><p>CAAnimation的子类，可以保存一组动画对象，将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行。</p><blockquote><ul><li><p>animations：用来保存一组动画对象的NSArray。</p></li><li><p>默认情况下，一组动画对象是同时运行的，也可以通过设置动画对象的beginTime属性来更改动画的开始时间。</p></li></ul></blockquote><h3 id="5-CATransition"><a href="#5-CATransition" class="headerlink" title="5.CATransition"></a>5.CATransition</h3><p>CAAnimation的子类，用于做转场动画，能够为层提供移出屏幕和移入屏幕的动画效果。iOS比Mac OS X的转场动画效果少一点。UINavigationController就是通过CATransition实现了将控制器的视图推入屏幕的动画效果。</p><blockquote><ul><li><p>type：动画过渡类型。</p></li><li><p>subtype：动画过渡方向。</p></li><li><p>startProgress：动画起点(在整体动画的百分比)。</p></li><li><p>endProgress：动画终点(在整体动画的百分比)。</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS动画-CALayer的属性和使用(未完结)</title>
    <link href="/2018/12/01/iOS%E5%8A%A8%E7%94%BB-CALayer%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%BF%E7%94%A8(%E6%9C%AA%E5%AE%8C%E7%BB%93)/"/>
    <url>/2018/12/01/iOS%E5%8A%A8%E7%94%BB-CALayer%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%BF%E7%94%A8(%E6%9C%AA%E5%AE%8C%E7%BB%93)/</url>
    
    <content type="html"><![CDATA[<h2 id="一、CALayer的常用属性"><a href="#一、CALayer的常用属性" class="headerlink" title="一、CALayer的常用属性"></a>一、CALayer的常用属性</h2><blockquote><ul><li><p>@propertyCGPoint position;<br>图层中心点的位置，类似与UIView的center；用来设置CALayer在父层中的位置；以父层的左上角为原点（0，0）</p></li><li><p>@property CGPoint anchorPoint;<br>称『定位点』、『锚点』，该描述是相对于x、y位置比例而言的默认在图像中心点（0.5、0.5）的位置；决定着CALayer身上的哪个点会再position属性所指的位置，以自己的左上角为原点（0，0）；它的x、y取值范围都是0~1</p></li><li><p>@property(nullable) CGColorRef backgroundColor<br>图层背景颜色</p></li><li><p>@property(nullable) CGColorRef borderColor<br>图层边框颜色</p></li><li><p>@property CGFloat borderWidth<br>图层边框宽度</p></li><li><p>@property CGRect bounds<br>图层大小</p></li><li><p>@property(nullable, strong) id contents<br>图层显示内容，例如可以将图片作为图层内容显示</p></li><li><p>@property CGRect contentsRect<br>图层显示内容的大小和位置</p></li><li><p>@property CGFloat cornerRadius<br>圆角半径</p></li><li><p>@property(getter=isDoubleSided) BOOL doubleSided<br>图层背景是否显示，默认是YES</p></li><li><p>@property CGRect frame<br>图层大小和位置，不支持隐式动画，所以CALyaer中很少使用frame，通常使用bound和position代替</p></li><li><p>@property(getter=isHidden) BOOL hidden<br>是否隐藏</p></li><li><p>@property(nullable, strong) CALayer *mask<br>图层蒙版</p></li><li><p>@property BOOL masksToBounds<br>子图层是否剪切图层边界，默认是NO</p></li><li><p>@property float opacit;<br>图层透明度，类似与UIView的alpha</p></li><li><p>@property(nullable) CGColorRef shadowColor<br>阴影颜色</p></li><li><p>@property CGSize shadowOffset<br>阴影偏移量</p></li><li><p>@property float shadowOpacity<br>阴影透明度，注意默认为0，如果设置阴影必须设置此属性</p></li><li><p>@property(nullable) CGPathRef shadowPath<br>阴影形状</p></li><li><p>@property CGFloat shadowRadius<br>阴影模糊半径</p></li><li><p>@property(nullable, copy) NSArray</p></li></ul></blockquote><h2 id="二、CALayer不常用属性"><a href="#二、CALayer不常用属性" class="headerlink" title="二、CALayer不常用属性"></a>二、CALayer不常用属性</h2><blockquote><ul><li><p>@property CGFloat zPosition<br>图层中心点在z轴中的位置</p></li><li><p>@property CGFloat anchorPointZ<br>图层在z轴中的锚点；</p></li><li><p>方法 - (CGAffineTransform)affineTransform</p></li><li><p>方法 - (void)setAffineTransform:(CGAffineTransform)m<br>以上属性为图层形变；该属性值指定一个CGAffineTransform对象，该对象代表对CALayer执行X、Y两个维度（也就是平面）上的旋转、缩放、位移、斜切、镜像等变换矩阵</p></li><li><p>@property(nullable, readonly) CALayer *superlayer<br>图层的父图层</p></li></ul></blockquote><h2 id="三、CALayer图层操作"><a href="#三、CALayer图层操作" class="headerlink" title="三、CALayer图层操作"></a>三、CALayer图层操作</h2><blockquote><ul><li><p>方法  - (void)addSublayer:(CALayer *)layer<br>添加子图层</p></li><li><p>方法  - (void)removeFromSuperlayer<br>将自己从父图层中移除</p></li><li><p>方法 - (void)insertSublayer:(CALayer *)layer atIndex:(unsigned)idx<br>在自己子图层数组中的第idx位置添加图层</p></li><li><p>方法  - (void)insertSublayer:(CALayer )layer below:(nullable CALayer )sibling<br>将图层layer添加在子图层sibling的下面</p></li><li><p>方法 - (void)insertSublayer:(CALayer )layer above:(nullable CALayer )sibling<br>将图层layer添加在子图层sibling的上面</p></li><li><p>方法 - (void)replaceSublayer:(CALayer )layer with:(CALayer )layer2<br>将图层layer替换layer2；</p></li></ul></blockquote><h2 id="四、CALayer动画操作"><a href="#四、CALayer动画操作" class="headerlink" title="四、CALayer动画操作"></a>四、CALayer动画操作</h2><blockquote><ul><li><p>方法  - (void)addAnimation:(CAAnimation )anim forKey:(nullable NSString )key<br>图层添加某一属性的动画</p></li><li><p>方法 - (nullable NSArray&lt; NSString &gt; )animationKeys<br>获取所有动画的属性</p></li><li><p>方法 - (nullable CAAnimation )animationForKey:(NSString )key<br>获取某一属性的动画</p></li><li><p>方法 - (void)removeAnimationForKey:(NSString *)key<br>移除某一属性动画</p></li><li><p>方法 - (void)removeAllAnimations<br>移除所有动画</p></li></ul></blockquote><h2 id="五、CALayer子类其他说明"><a href="#五、CALayer子类其他说明" class="headerlink" title="五、CALayer子类其他说明"></a>五、CALayer子类其他说明</h2><table><thead><tr><th>子类名称</th><th>用途</th></tr></thead><tbody><tr><td>CAEmitterLayer</td><td>发射器层，用来控制粒子效果</td></tr><tr><td>CAGradientLayer</td><td>梯度层，颜色渐变</td></tr><tr><td>CAEAGLayer</td><td>用OpenGL ES绘制的层</td></tr><tr><td>CAReplicationLayer</td><td>用来自动复制sublayer</td></tr><tr><td>CAShapeLayer</td><td>绘制立体的贝塞尔曲线</td></tr><tr><td>CAScrollLayer</td><td>用来管理可滑动的区域</td></tr><tr><td>CATextLayer</td><td>可以绘制AttributeString</td></tr><tr><td>CATiledLayer</td><td>用来管理一副可以被分割的大图</td></tr><tr><td>CATransformLayer</td><td>用来渲染3D layer的层次结构</td></tr></tbody></table><h3 id="1-CAShapeLayer"><a href="#1-CAShapeLayer" class="headerlink" title="1. CAShapeLayer"></a>1. CAShapeLayer</h3><p>CAShapeLayer属于QuartzCore框架，继承自CALayer。CAShapeLayer是在坐标系内绘制贝塞尔曲线的，通过绘制贝塞尔曲线，设置shape(形状)的path(路径)，从而绘制各种各样的图形以及不规则图形。因此，使用CAShapeLayer需要与UIBezierPath一起使用。<br>UIBezierPath类允许你在自定义的 View 中绘制和渲染由直线和曲线组成的路径.。你可以在初始化的时候直接为你的UIBezierPath指定一个几何图形。<br>通俗点就是UIBezierPath用来指定绘制图形路径，而CAShapeLayer就是根据路径来绘图的。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote><ul><li><p>1、@property(nullable) CGPathRef path;  呈现的形状的路径</p></li><li><p>2、@property(nullable) CGColorRef fillColor;填充路径的颜色  </p></li><li><p>3、@property(copy) CAShapeLayerFillRule fillRule;   当在填充颜色的时候则就需要这种填充规则，值有两种，非零和奇偶数，但默认是非零值。</p></li><li><p>4、@property(nullable) CGColorRef strokeColor;设置描边色，默认无色。</p></li><li><p>5、@property CGFloat strokeStart; 绘制边线轮廓路径的子区域。该值必须在[0,1]范围，0代表路径的开始，1代表路径的结束。 默认为0</p></li><li><p>6、@property CGFloat strokeEnd; 默认为1</p></li><li><p>7、@property CGFloat lineWidth; 线的宽度 默认为1</p></li><li><p>8、@property CGFloat miterLimit;最大斜接长度。斜接长度指的是在两条线交汇处和外交之间的距离。只有lineJoin属性为kCALineJoinMiter时miterLimit才有效。边角的角度越小，斜接长度就会越大。为了避免斜接长度过长，我们可以使用miterLimit属性。如果斜接长度超过miterLimit的值，边角会以lineJoin的“bevel”即kCALineJoinBevel类型来显示。</p></li><li><p>9、@property(copy) CAShapeLayerLineCap lineCap; 线端点类型，值有三个类型，分别为kCALineCapButt 、kCALineCapRound 、kCALineCapSquare，默认值为Butt；</p></li><li><p>10、@property(copy) CAShapeLayerLineJoin lineJoin;lineJoin为线连接类型，其值也有三个类型，分别为kCALineJoinMiter、kCALineJoinRound、kCALineJoinBevel，默认值是Miter。</p></li><li><p>11、@property CGFloat lineDashPhase;为线型模版的起始位置；lineDashPattern为线性模版，这是一个NSNumber的数组，索引从1开始记，奇数位数值表示实线长度，偶数位数值表示空白长度。<br>注：fillColor与strokeColor都是在有UIBezierPath参数配置的情况下才能发生作用</p></li><li><p>12、@property(nullable, copy) NSArray&lt;NSNumber *&gt; *lineDashPattern;</p></li></ul></blockquote><h3 id="2-CAReplicationLayer"><a href="#2-CAReplicationLayer" class="headerlink" title="2.CAReplicationLayer"></a>2.CAReplicationLayer</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><blockquote><ul><li><p>1、@property NSInteger instanceCount;  复制subLayer个数，默认为1</p></li><li><p>2、@property BOOL preservesDepth; 是否将3D例子系统平面化到一个图层（默认值）或者可以在3D空间中混合其他的图层</p></li><li><p>3、@property CFTimeInterval instanceDelay; 设置复制子层的延迟动画时长</p></li><li><p>4、@property CATransform3D instanceTransform; 设置复制子层的相对位置</p></li><li><p>5、@property(nullable) CGColorRef instanceColor; 子层颜色，会和原生子层背景色冲突，因此二者选其一设置</p></li><li><p>6、@property float instanceRedOffset;<br>设置每个复制图层相对上一个复制图层的红色偏移量</p></li><li><p>7、@property float instanceRedOffset;<br>设置每个复制图层相对上一个复制图层的绿色偏移量</p></li><li><p>8、@property float instanceBlueOffset;设置每个复制图层相对上一个复制图层的蓝色偏移量</p></li><li><p>9、@property float instanceAlphaOffset;设置每个复制图层相对上一个复制图层的透明度偏移量</p></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS动画-CATransition反转动画</title>
    <link href="/2018/12/01/iOS%E5%8A%A8%E7%94%BB-CATransition%E5%8F%8D%E8%BD%AC%E5%8A%A8%E7%94%BB/"/>
    <url>/2018/12/01/iOS%E5%8A%A8%E7%94%BB-CATransition%E5%8F%8D%E8%BD%AC%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>移动动画</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* Common transition types. */</span><br><br>/**<br> *   kCATransitionFade    <span class="hljs-regexp">//</span> 渐变<br> *   kCATransitionMoveIn  <span class="hljs-regexp">//</span> 覆盖<br> *   kCATransitionPush    <span class="hljs-regexp">//</span> 推出<br> *   kCATransitionReveal  <span class="hljs-regexp">//</span> 揭开<br> */<br><br><span class="hljs-regexp">/* Common transition subtypes. */</span><br><br>/**<br> *   kCATransitionFromRight<br> *   kCATransitionFromLeft<br> *   kCATransitionFromTop<br> *   kCATransitionFromBottom<br> */<br><br>CATransition *transition = [CATransition animation];<br>transition.duration = <span class="hljs-number">0.25</span>;<br>transition.type = kCATransitionPush;<br>transition.subtype = kCATransitionFromRight;<br>[containerView.layer addAnimation:transition forKey:nil];<br>[containerView exchangeSubviewAtIndex:<span class="hljs-number">0</span> withSubviewAtIndex:<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS动画-CATransition属性动画</title>
    <link href="/2018/11/01/iOS%E5%8A%A8%E7%94%BB-CATransition%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB/"/>
    <url>/2018/11/01/iOS%E5%8A%A8%E7%94%BB-CATransition%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>私有方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* Common transition types. */</span><br><br>/**<br> *   cube                  <span class="hljs-regexp">//</span> 立方体旋转<br> *   suckEffect            <span class="hljs-regexp">//</span> 收缩动画<br> *   oglFlip               <span class="hljs-regexp">//</span> 翻转<br> *   pageCurl              <span class="hljs-regexp">//</span> 页面揭开<br> *   pageUnCurl            <span class="hljs-regexp">//</span> 放下页面<br> *   cemeraIrisHollowOpen  <span class="hljs-regexp">//</span> 镜头打开<br> *   cameraIrisHollowClose <span class="hljs-regexp">//</span> 镜头关闭<br> */<br><br><span class="hljs-regexp">/* Common transition subtypes. */</span><br><br>/**<br> *   kCATransitionFromRight<br> *   kCATransitionFromLeft<br> *   kCATransitionFromTop<br> *   kCATransitionFromBottom<br> */<br><br>CATransition *transition = [CATransition animation];<br>transition.duration = <span class="hljs-number">3</span>;<br>transition.type = @<span class="hljs-string">&quot;oglFlip&quot;</span>;<br>transition.subtype = kCATransitionFromTop;<br>[containerView.layer addAnimation:transition forKey:nil];<br>[containerView exchangeSubviewAtIndex:<span class="hljs-number">0</span> withSubviewAtIndex:<span class="hljs-number">1</span>];<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS动画-CATransition移动动画</title>
    <link href="/2018/10/01/iOS%E5%8A%A8%E7%94%BB-CATransition%E7%A7%BB%E5%8A%A8%E5%8A%A8%E7%94%BB/"/>
    <url>/2018/10/01/iOS%E5%8A%A8%E7%94%BB-CATransition%E7%A7%BB%E5%8A%A8%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">/**<br> *  UIViewAnimationTransitionNone              <span class="hljs-regexp">//</span>没有效果<br> *  UIViewAnimationTransitionFlipFromLeft      <span class="hljs-regexp">//</span>从左水平翻转<br> *  UIViewAnimationTransitionFlipFromRight     <span class="hljs-regexp">//</span>从右水平翻转<br> *  UIViewAnimationTransitionCurlUp            <span class="hljs-regexp">//</span>翻书上掀<br> *  UIViewAnimationTransitionCurlDown          <span class="hljs-regexp">//</span>翻书下盖<br> *  UIViewAnimationTransitionCrossDissolve     <span class="hljs-regexp">//</span>融合<br> *  UIViewAnimationTransitionFlipFromTop       <span class="hljs-regexp">//</span>从上垂直翻转<br> *  UIViewAnimationTransitionFlipFromBottom    <span class="hljs-regexp">//</span>从下垂直翻转<br> *<br> */<br><br>[UIView beginAnimations:@<span class="hljs-string">&quot;animation&quot;</span> context:nil];<br>[UIView setAnimationDuration:<span class="hljs-number">1.0</span>f];<br>[UIView setAnimationTransition:UIViewAnimationTransitionNone forView:containerView cache:YES];<br>[UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];<br><span class="hljs-regexp">//</span> 交换层级关系<br>[containerView exchangeSubviewAtIndex:<span class="hljs-number">0</span> withSubviewAtIndex:<span class="hljs-number">1</span>];<br>[UIView commitAnimations];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS动画-Transition转场动画</title>
    <link href="/2018/09/01/iOS%E5%8A%A8%E7%94%BB-Transition%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <url>/2018/09/01/iOS%E5%8A%A8%E7%94%BB-Transition%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">/**<br> *  UIViewAnimationOptionTransitionNone              <span class="hljs-regexp">//</span>没有效果<br> *  UIViewAnimationOptionTransitionFlipFromLeft      <span class="hljs-regexp">//</span>从左水平翻转<br> *  UIViewAnimationOptionTransitionFlipFromRight     <span class="hljs-regexp">//</span>从右水平翻转<br> *  UIViewAnimationOptionTransitionCurlUp            <span class="hljs-regexp">//</span>翻书上掀<br> *  UIViewAnimationOptionTransitionCurlDown          <span class="hljs-regexp">//</span>翻书下盖<br> *  UIViewAnimationOptionTransitionCrossDissolve     <span class="hljs-regexp">//</span>融合<br> *  UIViewAnimationOptionTransitionFlipFromTop       <span class="hljs-regexp">//</span>从上垂直翻转<br> *  UIViewAnimationOptionTransitionFlipFromBottom    <span class="hljs-regexp">//</span>从下垂直翻转<br> *<br> */<br><br>[UIView transitionWithView:UIApplication.sharedApplication.keyWindow<br>                  duration:<span class="hljs-number">0.5</span><br>                   options:UIViewAnimationOptionTransitionFlipFromLeft<br>                animations:^&#123;<br>                <br>                 <span class="hljs-regexp">//</span> TODO: 页面跳转<br>                       <br>              &#125; completion:^(BOOL finished) &#123;<br>    <br>&#125;];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（八）</title>
    <link href="/2018/08/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-008/"/>
    <url>/2018/08/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-008/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-f0679730c4864b7b.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><h3 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h3><p>默认格式：<code>@syntheszie var = _var;</code></p><p><code>ARC</code>中，默认修饰<br></p><ul><li>基本数据类型<code>@property (atomic, assign)</code><br></li><li>对象数据类型<code>@property (atomic, strong)</code></li></ul><h3 id="修饰词解释"><a href="#修饰词解释" class="headerlink" title="修饰词解释"></a>修饰词解释</h3><ul><li><p><code>nonatomic</code> 非原子性访问，不对set方法加锁，不是安全线程，但是性能高。</p></li><li><p><code>atomic</code> 原子性访问，对生成的 set 方法加互斥锁 @synchronized(锁对象），安全线程（不是绝对安全线程）,性能差。</p></li><li><p><code>strong</code>ARC中使用，修饰OC对象，<code>拥有关系</code>，引用计数器+1。</p></li><li><p><code>reatain</code>MRC中使用，修饰OC对象，<code>拥有关系</code>，引用计数器+1。</p></li><li><p><code>assign</code>修饰基础数据类型，直接赋值，<code>非拥有关系</code>，不使用引用计数器。</p></li><li><p><code>weak</code>修饰协议，控件，<code>非拥有关系</code>，指向的对象销毁，指针会自动置为nil，不使用引用计数器。</p></li><li><p><code>unsafe_unretained</code>与weak类似，不会自动nil化，如果所指向的内存区域被释放了，这个指针就是一个野指针。</p></li><li><p><code>copy</code>在 MRC 时是这样做的 release 旧对象( 旧对象的引用计数器 -1 ) , copy 新对象( 新对象的引用计数器 +1 ) , 然后指向新对象 .（新对象是指最终指向的那个对象，不管深拷贝还是浅拷贝），在 ARC 时是这么干的 copy 新对象( 新对象的引用计数器 +1 ) , 然后指向新对象。</p></li><li><p><code>readonly</code>只生成get方法，不想把暴露的属性被人随便替换时 , 可以使用。</p></li><li><p><code>readwrite</code>生成get/set方法。</p></li></ul><h3 id="dynamic"><a href="#dynamic" class="headerlink" title="@dynamic"></a>@dynamic</h3><p>告诉编译器:属性的 setter 与 getter 方法由用户自己实现,不自动生成。(当然对于 readonly 的属性只需提供 getter 即可)</p><h3 id="synthesize"><a href="#synthesize" class="headerlink" title="@synthesize"></a>@synthesize</h3><p>如果你没有手动实现 setter 方法和 getter 方法,那么编译器会自动为你加上这两个方法。</p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h3><p>线程同步锁</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>（1）什么情况使用 weak 关键字？相比 assign 有什么不同?</p><ul><li>使用<blockquote><ol><li>协议声明使用weak</li><li>IBOutlet 使用weak</li></ol></blockquote></li><li>weak 和 assign 的不同点:<blockquote><p>weak 策略在属性所指的对象遭到摧毁时,系统会将 weak 修饰的属性对象的指针指向 nil,在 OC 给 nil 发消息是不会有什么问题的;如果使用 assign 策略在属性所指的对象遭到摧毁时,属性对象指针还指向原来的对象,由于对象已经被销毁,这时候就产生了野指针,如果这时候在给此对象发送消息,很容造成程序奔溃assigin 可以用于修饰非 OC 对象,而 weak 必须用于 OC 对象。</p></blockquote></li></ul><p>（2）使用 atomic 一定是线程安全的吗?</p><ul><li>不是,atomic 的本意是指属性的存取方法是线程安全的,并不保证整个对象是线程安全的。<blockquote><p>例如： 声明一个 NSMutableArray 的原子属性 stuff,此时 self.stuff 和 self.stuff =othersulf 都是线程安全的。但是,使用[self.stuff objectAtIndex:index]就不是线程安全的,需要用互斥锁来保证线程安全性。</p></blockquote></li></ul><p>（3）@synthesize 和 @dynamic 分别有什么作用</p><ul><li><p>@property 有两个对应的词,一个是@synthesize,一个是@dynamic。<br>如果@synthesize 和@dynamic 都没写,那么默认的就是<br>@syntheszie var = _var;</p></li><li><p>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法,那么编译器会自动为你加上这两个方法。</p></li><li><p>@dynamic 告诉编译器:属性的 setter 与 getter 方法由用户自己实现,不自动生成。(当然对于 readonly 的属性只需提供 getter 即可)</p></li><li><p>假如一个属性被声明为@dynamic var；然后你没有提供@setter 方法和@getter 方法,编译的时候没问题,但是当程序运行到 instance.var = someVar,由于缺 setter方法会导致程序崩溃;<br>或者当运行到 someVar = instance.var 时,由于缺 getter 方法同样会导致崩溃。</p></li></ul><p>（4）ARC 下,不显式指定任何属性关键字时,默认的关键字都有哪些?</p><ul><li><p>基本数据：  <code>atomic,readwrite,assign</code></p></li><li><p>普通的 OC 对象: <code>atomic,readwrite,strong</code></p></li></ul><p>（5）用@property 声明的 NSString(或 NSArray,NSDictionary)经常使用 copy 关键字,为什么?如果改用 strong 关键字,可能造成什么问题?</p><blockquote><p>因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.</p><p>如果我们使用是 strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.</p></blockquote><p>（6）这个写法会出什么问题: @property(copy)NSMutableArray *array;</p><blockquote><p>因为 copy 策略拷贝出来的是一个不可变对象,然而却把它当成可变对象使用,很容易造成程序奔溃这里还有一个问题,该属性使用了同步锁,会在创建时生成一些额外的代码用于帮助编写多线程程序,这会带来性能问题,通过声明 nonatomic 可以节省这些虽然<br>很小但是不必要额外开销,在 iOS 开发中应该使用 nonatomic 替代 atomic.</p></blockquote><p>（7）如何让自定义类可以用 copy 修饰符?如何重写带 copy 关键字的 setter?</p><blockquote><p>若想令自己所写的对象具有拷贝功能,则需实现 NSCopying 协议。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 实现不可变版本拷贝</span><br>- (<span class="hljs-keyword">id</span>)copyWithZone:(<span class="hljs-built_in">NSZone</span> *)zone; <span class="hljs-comment">// 实现可变版本拷贝</span><br>- (<span class="hljs-keyword">id</span>)mutableCopyWithZone:(<span class="hljs-built_in">NSZone</span> *)zone;<br><span class="hljs-comment">// 重写带 copy 关键字的 setter</span><br>- (<span class="hljs-keyword">void</span>)setName:(<span class="hljs-built_in">NSString</span> *)name &#123;<br>    _name = [name <span class="hljs-keyword">copy</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><h4 id="copy-和-mutableCopy"><a href="#copy-和-mutableCopy" class="headerlink" title="copy 和 mutableCopy"></a>copy 和 mutableCopy</h4><ul><li><p><code>copy</code>拷贝出来的对象类型总是不可变类型(例如, NSString, NSDictionary, NSArray等等)</p></li><li><p><code>mutableCopy</code>拷贝出来的对象类型总是可变类型(例如, NSMutableString, NSMutableDictionary, NSMutableArray等等)</p></li></ul><hr><ul><li><code>copy</code> 对于可变对象为深拷贝，对于不可变对象为浅拷贝</li><li><code>mutableCopy</code> 始终是深拷贝</li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（ 七）</title>
    <link href="/2018/07/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-007/"/>
    <url>/2018/07/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-007/</url>
    
    <content type="html"><![CDATA[<h3 id="线程死锁的必要条件"><a href="#线程死锁的必要条件" class="headerlink" title="线程死锁的必要条件"></a>线程死锁的必要条件</h3><ol><li>互斥条件 : 一个资源每次只能被一个进程使用。</li><li>请求与保持条件 : 一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件 : 进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件 : 若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol><h4 id="多图下载，最后合并成一个图片的方式"><a href="#多图下载，最后合并成一个图片的方式" class="headerlink" title="多图下载，最后合并成一个图片的方式"></a>多图下载，最后合并成一个图片的方式</h4><ol><li>dispatch_group</li><li>信号量</li><li>NSOperationQueue</li></ol><h3 id="线程与进程的关系"><a href="#线程与进程的关系" class="headerlink" title="线程与进程的关系"></a>线程与进程的关系</h3><ol><li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li><li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li><li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束</li><li>线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li><li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li><li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</li></ol><h3 id="线程与Runloop的关系"><a href="#线程与Runloop的关系" class="headerlink" title="线程与Runloop的关系"></a>线程与Runloop的关系</h3><ol><li>RunLoop 的作用就是来管理线程的，当线程的 RunLoop开启后，线程就会在执行完任务后，处于休眠状态，随时等待接受新的任务，而不是退出。</li><li>只有主线程的RunLoop是默认开启的，所以程序在开启后，会一直运行，不会退出。其他线程的RunLoop如果需要开启，就手动开启。</li></ol>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（六）</title>
    <link href="/2018/06/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-006/"/>
    <url>/2018/06/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-006/</url>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p>如何是自己写的对象具有拷贝功能</p><blockquote><p> 需实现 NSCopying 协议。</p></blockquote></li><li><p>说说你如何理解weak属性</p><blockquote><p>Runtime维护了一个weak表，用于存储指向某个对象的所有weak指针。weak表其实是一个hash（哈希）表，Key是所指对象的地址，Value是weak指针的地址（这个地址的值是所指对象的地址）数组。<br><br>1、初始化时：runtime会调用objc_initWeak函数，初始化一个新的weak指针指向对象的地址。<br><br>2、添加引用时：objc_initWeak函数会调用 objc_storeWeak() 函数， objc_storeWeak() 的作用是更新指针指向，创建对应的弱引用表。<br><br>3、释放时，调用clearDeallocating函数。clearDeallocating函数首先根据对象地址获取所有weak指针地址的数组，然后遍历这个数组把其中的数据设为nil，最后把这个entry从weak表中删除，最后清理对象的记录。</p></blockquote></li><li><p>UIView和CALayer的关系</p><blockquote><p>每个UIView都对应着一个CALayer,当我们创建了一个UIView之后也会创建对应的CALayer。UIView之所以能够显示内容，其实还是靠CALayer来绘制的。UIView本身就像是CALayer的管理者，访问UIView的坐标，例如：frame，center等，其实是访问内部layer的frame、position等相关属性。</p></blockquote></li></ul><ul><li><p>@synthesize和@dynamic分别什么作用?</p><blockquote><p>1、@property有两个对应的词，一个是 @synthesize，一个是 @dynamic。如果 @synthesize和 @dynamic都没写，那么默认的就是@syntheszie var = _var;<br><br>2、@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法，那么编译器会自动为你加上这两个方法。<br><br>3、@dynamic 告诉编译器：属性的 setter 与 getter 方法由用户自己实现，不自动生成。（当然对于 readonly 的属性只需提供 getter 即可）。假如一个属性被声明为 @dynamic var，然后你没有提供 @setter方法和 @getter 方法，编译的时候没问题，但是当程序运行到 instance.var = someVar，由于缺 setter 方法会导致程序崩溃；或者当运行到 someVar = var 时，由于缺 getter 方法同样会导致崩溃。编译时没问题，运行时才执行相应的方法，这就是所谓的动态绑定。</p></blockquote></li><li><p>动态绑定</p></li><li><p>Category(类别)、Extension(扩展)和继承的区别</p><blockquote><p>1、Category：分类就是对一个类的功能进行扩展,,让这个类能够适应不不同情况的需求.在一般的实际开发中,我们都会对系统的一些常用类进行扩展,比如,NSString,Button,Label等等,简单来说类别是一种为现有的类添加新方法的方式。<br><br><br>2、Extension：是Category的一个特例<br>作用:为一个类增加私有方法,属性或成员变量,也就是说只能这些只能在本文件中被使用其名字为匿名(为空),<br>并且新添加的方法一定要予以实现。(Category没有这个限制)<br><br><br>3、继承：多个类具有相同的实例变量和方法时，考虑用继承。即子类可以继承父类的相同特性。如animal具有年龄和体重两个属性，dog也具有年龄和体重两 个属性，dog可以继承animal的这两个属性，即为继承。</p></blockquote></li><li><p>为什么代理要用weak？delegate和DataSource有什么区别？Block和代理的区别？</p></li></ul><ul><li><p>id和NSObject *的区别</p><blockquote><p>1、NSObject包含了一些其他的方法，需要实现NSObject协议，可以用NSObject来表示id，但是不能用id来表示NSObject。<br><br>2、id关键字在编译的时候不会被检查，而NSObject在编译的时候被被检查是否含有一些错误的方法<br><br>3、id可以是任何对象，包括不是NSObject的对象<br><br>4、定义id的时候不需要*，而定义NSOject的时候需要。</p></blockquote></li><li><p>针对系统提供的Block API，是否也要考虑循环引用的问题？</p><blockquote><p>系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑。<br>以下这些使用方式不会引起循环引用的问题</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[UIView animateWithDuration:1.2 animations:<span class="hljs-comment">^&#123;</span><br><span class="hljs-comment">        [self.view layoutIfNeeded];</span><br><span class="hljs-comment">    &#125;</span>]<span class="hljs-comment">;</span><br>    <br>    [[NSOperationQueue mainQueue] addOperationWithBlock:<span class="hljs-comment">^&#123;</span><br><span class="hljs-comment">       // Do Some Thing</span><br><span class="hljs-comment">    &#125;</span>]<span class="hljs-comment">;</span><br>    <br>    [[NSNotificationCenter defaultCenter] addObserverForName:@<span class="hljs-string">&quot;someNotification&quot;</span> object:nil queue:[NSOperationQueue mainQueue] usingBlock:^(<span class="hljs-name">NSNotification</span> * _Nonnull note) &#123;<br>         // Do Some Thing<br>    &#125;]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>但如果方法中的一些参数是 成员变量，那么可以造成循环引用，如 GCD 、NSNotificationCenter调用就要小心一点，比如 GCD 内部如果引用了 self，而且 GCD 的参数是 成员变量，则要考虑到循环引用，举例如下：<br><br>GCD-&gt;分析：self–&gt;_operationsQueue–&gt;block–&gt;self形成闭环，就造成了循环引用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less">&gt;<span class="hljs-selector-tag">dispatch_group_async</span>(_operationsGroup, _operationsQueue, ^&#123;<br>       <span class="hljs-comment">// Do Some Thing</span><br>&gt;&#125;);<br></code></pre></td></tr></table></figure><p>NSNotificationCenter-&gt;分析:self–&gt;_observer–&gt;block–&gt;self形成闭环，就造成了循环引用</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">&gt;_observer = [[<span class="hljs-built_in">NSNotificationCenter</span> defaultCenter] addObserverForName:<span class="hljs-string">@&quot;testKey&quot;</span> object:<span class="hljs-literal">nil</span> queue:<span class="hljs-literal">nil</span> usingBlock:^(<span class="hljs-built_in">NSNotification</span> *note)&#123;<br><span class="hljs-comment">// Do Some Thing</span><br>&gt;&#125;];<br></code></pre></td></tr></table></figure></blockquote></li><li><p>在@property中为什么 NSString （或NSArray，NSDictionary）使用copy关键字？改成Strong有可能会造成什么问题？</p><blockquote><p>1、因为父类指针可以指向子类对象,使用copy的目的是为了让本对象的属性不受外界影响,使用copy无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.<br><br>2、如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.</p></blockquote></li><li><p>关键字const/static/extern、UIKIT_EXTERN区别和用法</p><blockquote><p>1、const<br><br>（1）const用来修饰右边的基本变量或指针变量<br><br>（2）被修饰的变量只读，不能被修改<br><br> <br>2、static<br><br>（1）修饰局部变量<br><br>（2）修饰全局变量<br><br>（3）修饰函数<br><br><br>3、extern<br><br>（1）声明外部全局变量。这里需要特别注意extern只能声明，不能用于实现，而且定义和分配内存都在原来类中。<br><br><br>4、UIKIT_EXTERN<br><br>（1）将函数修饰为兼容以往C编译方式的、具有extern属性(文件外可见性)、public修饰的方法或变量库外仍可见的属性</p></blockquote><h3 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h3></li><li><p>main()之前有哪些过程？</p></li><li><p>KVO的原理</p></li></ul><blockquote><p>当观察某对象时，KVO动态创建该对象的子类，并重写子类被观察属性setter方法，随后通知观察者该属性的变化状况。</p></blockquote><ul><li><p>Swift如何使用KVO？</p></li><li><p>Swift有哪些匹配模式？</p></li><li><p>Objc向一个对象发送消息，发生了什么？</p><blockquote><p>Runtime库会根据对象的isa指针找到该对象实际所属的类，然后在该类中的方法列表以及其父类方法列表中寻找方法运行，然后在发送消息的时候，objc_msgSend方法不会返回值，所谓的返回内容都是具体调用时执行的。</p></blockquote></li><li><p>静态库的原理是什么？你有没有写过哪些静态库? 遇到哪些问题？</p></li><li><p>Runloop是用来做什么的？runloop和线程的关系？主线程默认开始runloop了吗？ 子线程呢？</p><blockquote></blockquote></li><li><p>不手动指定autoreleasepool的前提下，autoreleasepool在什么什么时刻释放？（比如在vc的viewDidLoad中创建）</p><blockquote><ul><li>手动干预释放时机 - 指定autoreleasepool就是所谓的：当前作用域大括号结束时释放。</li><li>系统自动去释放 - 不手动指定autoreleasepool<br>Autorelease对象出了作用域之后，会被添加到最近一次创建的自动释放池中，并会在当前的 runloop 迭代结束时释放。<br>如果在一个vc的viewDidLoad中创建一个 Autorelease对象，那么该对象会在 viewDidAppear 方法执行前就被销毁了。</li></ul></blockquote></li></ul><ul><li><p>OC中的消息转发机制+代码实现</p><blockquote></blockquote></li><li><p>以 + scheduledTimerWithTimeInterval…的方式触发的NSTimer，在滑动的列表时，timer会暂时回调，为什么？如何解决？</p><blockquote></blockquote></li><li><p>如何手动触发一个value的KVO？</p><blockquote><p>自动触发：</p><blockquote><p>自动触发是指类似的这种场景：在注册KVO之前设置一个初始值，<br>注册之后设置一个不一样的值，就可以触发了。</p></blockquote></blockquote></li></ul><blockquote><p>手动触发：</p><blockquote><p>键值观察通知依赖于NSObject的两个方法：<br>willChangeValueForKey：和didChangeValueForKey：。<br>在一个被观察属性发生改变之前，willChangeValueForKey：一定会被调用，这就会记录旧的值。<br>而当改变发生后，didChangeValueForKey：会被调用，<br>继而objectServeValueForKey：ofObject：change：content：也会被调用。<br>如果可以手动实现这些调用，就可以实现“手动触发”了。</p></blockquote></blockquote><ul><li>如何定位和分析项目中影响性能的地方？以及如何进行性能优化？</li><li>串行并行，异步同步的区别<blockquote><ul><li>串行并行<blockquote><p>指的是能否开启新的线程。同步不能开启新的线程，异步可以。</p></blockquote></li><li>异步同步<blockquote><p>指的是任务的执行方式。串行是指多个任务时，各个任务按顺序执行，完成一个之后才能进行下一个。并行指的是多个任务可以同时执行。异步是多个任务并行的前提条件。</p></blockquote></li></ul></blockquote></li></ul><ul><li>线程是什么？进程是什么？二者有什么区别和联系？<blockquote><ul><li>线程是CPU独立运行和独立调度的基本单位</li><li>进程是资源分配的基本单位；</li><li>两者的联系：进程和线程都是操作系统所运行的程序运行的基本单元。</li><li>区别：<blockquote><ul><li>进程具有独立的空间地址，一个进程崩溃后，在保护模式下不会对其它进程产生影响。</li><li>线程只是一个进程的不同执行路径，线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉。</li></ul></blockquote></li></ul></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（五）</title>
    <link href="/2018/05/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-005/"/>
    <url>/2018/05/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-005/</url>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-4869f853f408a4d9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><h2 id="基础面试题"><a href="#基础面试题" class="headerlink" title="基础面试题"></a>基础面试题</h2><h3 id="一、两种拷贝的差别"><a href="#一、两种拷贝的差别" class="headerlink" title="一、两种拷贝的差别"></a>一、两种拷贝的差别</h3><ul><li><p>浅拷贝：指针（地址）拷贝，不会产生新对象</p></li><li><p>深拷贝：内容拷贝，会产生新对象</p></li></ul><h3 id="二、Category和Extension的差别"><a href="#二、Category和Extension的差别" class="headerlink" title="二、Category和Extension的差别"></a>二、Category和Extension的差别</h3><ul><li><p>分类是有名称的，类扩展没有名称</p></li><li><p>分类只能扩充方法、不能扩充成员变量（需要利用RunTime重写set、get方法）；类扩展可以扩充方法和成员变量</p></li><li><p>类扩展一般就写在.m文件中，用来扩充私有的方法和成员变量（属性）</p></li></ul><h3 id="三、KVO和KVC的差别"><a href="#三、KVO和KVC的差别" class="headerlink" title="三、KVO和KVC的差别"></a>三、KVO和KVC的差别</h3><ul><li>KVC是键值编码，可以通过一个字符串的key（属性名）修改对象的属性值</li><li></li><li>KVO是键值监听，可以监听一个对象属性值的改变</li></ul><h3 id="四、property属性介绍"><a href="#四、property属性介绍" class="headerlink" title="四、property属性介绍"></a>四、property属性介绍</h3><ul><li><p>copy是创建一个新对象，两个对象内容相同，旧对象没有变化。新的对象retain为1，与旧有对象的引用计数不变。旧对象发生改变不影响新对象，copy减少对象对上下文的依赖。NSString、Block等类型</p></li><li><p>retain属性表示两个对象地址相同（建立一个指针，指针拷贝），内容相同，这个对象的retain值+1。两个对象要改变就一起改变。</p></li><li><p>weak其实类似于assign，叫弱引用，也是不增加引用计数。一般只有在防止循环引用时使用，比如父类引用了子类，子类又去引用父类。IBOutlet、Delegate一般用的就是weak，这是因为它们会在类外部被调用，防止循环引用。</p></li><li><p>assign：非OC对象类型， 基本数据类型（两个对象相互引用的时候，一端用retain， 一端用assign）</p></li><li><p>strong就类似与retain了，叫强引用，会增加引用计数，类内部使用的属性一般都是strong修饰的，现在ARC已经基本替代了MRC，所以我们最常见的就是strong了。retain：OC对象类型</p></li><li><p>nonatomic 在修饰属性时，我们往往还会加一个nonatomic，这又是什么呢？它的名字叫非原子访问。对应的有atomic，是原子性的访问。我们知道，在使用多线程时为了避免在写操作时同时进行写导致问题，经常会对要写的对象进行加锁，也就是同一时刻只允许一个线程去操作它。如果一个属性是由atomic修饰的，那么系统就会进行线程保护，防止多个写操作同时进行。这有好处，但也有坏处，那就是消耗系统资源，所以对于iPhone这种小型设备，如果不是进行多线程的写操作，就可以使用nonatomic，取消线程保护，提高性能。</p></li></ul><h3 id="五、代理，通知，和block的区别"><a href="#五、代理，通知，和block的区别" class="headerlink" title="五、代理，通知，和block的区别"></a>五、代理，通知，和block的区别</h3><ul><li><p>通知：NotificationCenter 通知中心：“一对多”，在APP中，很多控制器都需要知道一个事件，应该用通知；</p></li><li><p>代理：一对一”，对同一个协议，一个对象只能设置一个代理delegate，所以单例对象就不能用代理；代理更注重过程信息的传输：比如发起一个网络请求，可能想要知道此时请求是否已经开始、是否收到了数据、数据是否已经接受完成、数据接收失败</p></li><li><p>block：delegate一样，一般都是“一对一”之间通信交互，相比代理block有以下特点：</p><pre><code>          1、写法更简练，不需要写protocol、函数等等          2、block注重结果的传输：比如对于一个事件，只想知道成功或者失败，并不需要知道进行了多少或者额外的一些信息          3、block需要注意防止循环引用</code></pre></li></ul><h3 id="六、网络"><a href="#六、网络" class="headerlink" title="六、网络"></a>六、网络</h3><ul><li><p>HTTP（HyperText Transfer Protocol、超文本传输协议)是OSI七层中应用层的协议。HTTP 是基于 TCP/IP协议的应用层协议。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p></li><li><p>TCP（Transmission Control Protocol，传输控制协议）是OSI七层中传输层的协议。TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。TCP提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。 理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接前，TCP 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求</p></li><li><p>UDP (User Datagram Protocol,用户数据报协议)是OSI参考模型中无连接的传输层协议.UDP用户数据报协议，是一个无连接的简单的面向数据报的运输层协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快。</p></li><li><p>socket是对TCP或者UDP协议的封装和实现，socket并不是协议，差不多每一种语言都实现了对TCP和UDP封装和实现的Socket代码库，方便开发程序员使用，socket是对TCP或者UDP协议的封装和实现，这样我就可以基于你所使用语言的Socket来实现更多的功能，有基于Socket TCP的HTTP请求，有基于Socket TCP长连接的消息推送，也可以基于Socket TCP/UDP自定义一套自己的通信协议。<br>（5）关系—&gt; HTTP基于TCP，HTTP请求需要使用Socket TCP来完成。</p></li></ul><h3 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h3><ul><li><p>进程：进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。</p></li><li><p>线程是程序执行时的最小单位，它是进程的一个执行流，是CPU调度和分派的基本单位，一个进程可以由很多个线程组成，线程间共享进程的所有资源，每个线程有自己的堆栈和局部变量。</p></li><li><p>pthread：C语言编程，手动管理线程周期，使用难度大，不常用。</p></li><li><p>NSThread：OC语言编程，手动管理线程周期，面向对象，偶尔使用</p></li><li><p>GCD：C语言编程，支持多核，自动管理线程周期，常用</p></li><li><p>NSOperation：OC语言编程，基于GCD，比GCD新增新功能，常用</p></li><li><p>线程锁：线程死锁有“互等”，然后卡住的意思,也由于和同/异步处理顺序，线程的等待导致队列加入的顺序与队列的FIFO原则(先进先出）冲突引起。</p></li><li><p>并行：并行指的是一种技术，一个同时处理多个任务的技术。它描述了一种能够同时处理多个任务的能力，侧重点在于“运行”。</p></li><li><p>串行：表示任务必须按顺序来，一个一个执行，前一个执行完了才能执行后一个。</p></li><li><p>并发：并发指的是一种现象，一种经常出现，无可避免的现象。它描述的是“多个任务同时发生，需要被处理”这一现象。它的侧重点在于“发生”。</p></li><li><p>队列：不管是串行队列（SerialQueue）还是并行队列（ConcurrencyQueue），都是FIFO队列。也就意味着，任务一定是一个一个地，按照先进先出的顺序来调度。</p></li><li><p>同步：就是在发出一个调用时，在没有得到结果之前，该调用就不返回。但是一旦调用返回，就得到返回值了。</p></li><li><p>异步：调用在发出之后，这个调用就直接返回了，所以没有返回结果。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（三）</title>
    <link href="/2018/03/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-003/"/>
    <url>/2018/03/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-003/</url>
    
    <content type="html"><![CDATA[<h2 id="一、UI视图"><a href="#一、UI视图" class="headerlink" title="一、UI视图"></a>一、UI视图</h2><h3 id="括事件传递"><a href="#括事件传递" class="headerlink" title="括事件传递"></a>括事件传递</h3><h3 id="视图响应"><a href="#视图响应" class="headerlink" title="视图响应"></a>视图响应</h3><h3 id="UI布局"><a href="#UI布局" class="headerlink" title="UI布局"></a>UI布局</h3><h3 id="UI绘制"><a href="#UI绘制" class="headerlink" title="UI绘制"></a>UI绘制</h3><h3 id="UITableview重用机制的理解等基本技术点"><a href="#UITableview重用机制的理解等基本技术点" class="headerlink" title="UITableview重用机制的理解等基本技术点"></a>UITableview重用机制的理解等基本技术点</h3><h3 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h3><h3 id="流式页面的性能优化"><a href="#流式页面的性能优化" class="headerlink" title="流式页面的性能优化"></a>流式页面的性能优化</h3><h3 id="异步绘制"><a href="#异步绘制" class="headerlink" title="异步绘制"></a>异步绘制</h3><h3 id="UI渲染机制"><a href="#UI渲染机制" class="headerlink" title="UI渲染机制"></a>UI渲染机制</h3><h2 id="Objective-C语言"><a href="#Objective-C语言" class="headerlink" title="Objective-C语言"></a>Objective-C语言</h2><h3 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h3><h3 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h3><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h3 id="关联对象"><a href="#关联对象" class="headerlink" title="关联对象"></a>关联对象</h3><h3 id="NSNotification"><a href="#NSNotification" class="headerlink" title="NSNotification"></a>NSNotification</h3><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h2 id="三、Runtime"><a href="#三、Runtime" class="headerlink" title="三、Runtime"></a>三、Runtime</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><h3 id="原类对象"><a href="#原类对象" class="headerlink" title="原类对象"></a>原类对象</h3><h3 id="消息传递机制"><a href="#消息传递机制" class="headerlink" title="消息传递机制"></a>消息传递机制</h3><h3 id="消息转发流程"><a href="#消息转发流程" class="headerlink" title="消息转发流程"></a>消息转发流程</h3><h3 id="Method-Swizzling"><a href="#Method-Swizzling" class="headerlink" title="Method-Swizzling"></a>Method-Swizzling</h3><h3 id="ISA-swizzling"><a href="#ISA-swizzling" class="headerlink" title="ISA-swizzling"></a>ISA-swizzling</h3><h3 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h3><h3 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h3><h2 id="四、内存管理"><a href="#四、内存管理" class="headerlink" title="四、内存管理"></a>四、内存管理</h2><h3 id="weak自动置nil"><a href="#weak自动置nil" class="headerlink" title="weak自动置nil"></a>weak自动置nil</h3><h3 id="ARC"><a href="#ARC" class="headerlink" title="ARC"></a>ARC</h3><h3 id="MRC"><a href="#MRC" class="headerlink" title="MRC"></a>MRC</h3><h3 id="自动释放池的实现原理"><a href="#自动释放池的实现原理" class="headerlink" title="自动释放池的实现原理"></a>自动释放池的实现原理</h3><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><h3 id="引用计数管理"><a href="#引用计数管理" class="headerlink" title="引用计数管理"></a>引用计数管理</h3><h2 id="五、Block"><a href="#五、Block" class="headerlink" title="五、Block"></a>五、Block</h2><h3 id="截获变量特性"><a href="#截获变量特性" class="headerlink" title="截获变量特性"></a>截获变量特性</h3><h3 id="Block关键字"><a href="#Block关键字" class="headerlink" title="__Block关键字"></a>__Block关键字</h3><h3 id="Block的本质"><a href="#Block的本质" class="headerlink" title="Block的本质"></a>Block的本质</h3><h3 id="Block的内存管理"><a href="#Block的内存管理" class="headerlink" title="Block的内存管理"></a>Block的内存管理</h3><h3 id="循环引用-1"><a href="#循环引用-1" class="headerlink" title="循环引用"></a>循环引用</h3><h2 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a>六、多线程</h2><h3 id="NSOperation-amp-NSOperationQueue-NSThread"><a href="#NSOperation-amp-NSOperationQueue-NSThread" class="headerlink" title="NSOperation&amp;NSOperationQueue ### NSThread"></a>NSOperation&amp;NSOperationQueue ### NSThread</h3><h3 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h3><h3 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h3><h3 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h3><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><h3 id="条件锁"><a href="#条件锁" class="headerlink" title="条件锁"></a>条件锁</h3><h2 id="七、RunLoop"><a href="#七、RunLoop" class="headerlink" title="七、RunLoop"></a>七、RunLoop</h2><h3 id="RunLoop为什么会有事做事没事休息，系统是怎样实现的"><a href="#RunLoop为什么会有事做事没事休息，系统是怎样实现的" class="headerlink" title="RunLoop为什么会有事做事没事休息，系统是怎样实现的"></a>RunLoop为什么会有事做事没事休息，系统是怎样实现的</h3><h3 id="怎样实现一个常驻线程"><a href="#怎样实现一个常驻线程" class="headerlink" title="怎样实现一个常驻线程"></a>怎样实现一个常驻线程</h3><h3 id="RunLoop和线程的关系是怎样"><a href="#RunLoop和线程的关系是怎样" class="headerlink" title="RunLoop和线程的关系是怎样"></a>RunLoop和线程的关系是怎样</h3><h2 id="八、网络"><a href="#八、网络" class="headerlink" title="八、网络"></a>八、网络</h2><h3 id="HTTP相关的中间人攻击"><a href="#HTTP相关的中间人攻击" class="headerlink" title="HTTP相关的中间人攻击"></a>HTTP相关的中间人攻击</h3><h3 id="HTTPS的连接建立流程"><a href="#HTTPS的连接建立流程" class="headerlink" title="HTTPS的连接建立流程"></a>HTTPS的连接建立流程</h3><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><h3 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h3><h3 id="TCP的滑动窗口协议"><a href="#TCP的滑动窗口协议" class="headerlink" title="TCP的滑动窗口协议"></a>TCP的滑动窗口协议</h3><h3 id="可靠传输是怎样保证的"><a href="#可靠传输是怎样保证的" class="headerlink" title="可靠传输是怎样保证的"></a>可靠传输是怎样保证的</h3><h3 id="TCP的慢启动特点"><a href="#TCP的慢启动特点" class="headerlink" title="TCP的慢启动特点"></a>TCP的慢启动特点</h3><h3 id="Session-Cookie的区别"><a href="#Session-Cookie的区别" class="headerlink" title="Session/Cookie的区别"></a>Session/Cookie的区别</h3><h2 id="九、设计模式"><a href="#九、设计模式" class="headerlink" title="九、设计模式"></a>九、设计模式</h2><h3 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h3><h3 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h3><h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><h3 id="桥接"><a href="#桥接" class="headerlink" title="桥接"></a>桥接</h3><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h2 id="十、架构-框架"><a href="#十、架构-框架" class="headerlink" title="十、架构/框架"></a>十、架构/框架</h2><h3 id="怎样设计图片缓存框架"><a href="#怎样设计图片缓存框架" class="headerlink" title="怎样设计图片缓存框架"></a>怎样设计图片缓存框架</h3><h3 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h3><h3 id="客户端的整体架构怎样实现"><a href="#客户端的整体架构怎样实现" class="headerlink" title="客户端的整体架构怎样实现"></a>客户端的整体架构怎样实现</h3><h3 id="常见的解耦方式有哪些"><a href="#常见的解耦方式有哪些" class="headerlink" title="常见的解耦方式有哪些"></a>常见的解耦方式有哪些</h3>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（四）</title>
    <link href="/2018/03/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-004/"/>
    <url>/2018/03/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-004/</url>
    
    <content type="html"><![CDATA[<p>1、swift和oc的区别</p><p>2、编译链接</p><p>3、synthesize &amp; denamic</p><p>4、在项目开发中常用的开发工具有哪些？</p><p>5、UITableView &amp; UICollection</p><p>6、NSProxy &amp; NSObject</p><p>7、Object &amp; Swift</p><p>8、传值通知 &amp; 推送通知（本地&amp;远程）</p><p>9、第三方库 &amp; 第三方平台</p><p>10、NSCache &amp; NSDcitionary</p><p>11、 UIView的setNeedsDisplay和setNeedsLayout方法</p><p>12、UILayer &amp; UIView</p><p>13、layoutSubViews &amp; drawRects</p><p>14、UDID &amp; UUID</p><p>15、CPU &amp; GPU</p><p>16、点（pt）&amp; 像素（px）</p><p>17、属性与成员变量</p><p>18、int和NSInteger的区别</p><p>（1）import和include</p><p>（2）@class</p><p>（3）全局 &amp; 静态变量</p><p>19、类和对象</p><p>（1）分类拓展协议中哪些可以声明属性?</p><p>（2）继承和类别的区别</p><p>（3）分类的作用</p><p>（4）分类的局限性</p><p>20、category &amp; extension</p><p>21、Foundation</p><p>（1）字符串</p><p>（2）字符串截取</p><p>（3）格式</p><p>22、NSArray和NSDictionary</p><p>（1）iOS遍历数组/字典的方法</p><p>（2）NSValue NSNumber</p><p>（3）其它</p><p>（4）如何避免循环引用</p><p>23、CFSocket使用有哪几个步骤</p><p>24、Core Foundation中提供了哪几种操作Socket的方法？</p><p>25、解析XML文件有哪几种方式？</p><p>26、什么是沙盒模型？哪些操作是属于私有api范畴?</p><p>27、在一个对象的方法里面：self.name= “object”；和 name =”object” 有什么不同吗?</p><p>28、请简要说明viewDidLoad和viewDidUnload何时调用</p><p>29、创建控制器、视图的方式</p><p>30、简述内存分区情况</p><p>31、队列和栈有什么区别</p><p>32、iOS的系统架构</p><p>33、控件主要响应3种事件</p><p>34、xib文件的构成分为哪3个图标？都具有什么功能</p><p>35、简述视图控件器的生命周期</p><p>36、app 项目的生命周期</p><p>（1）应用的生命周期</p><p>（2）简要说明一下APP的启动过程，main文件说起，main函数中有什么函数？作用是什么？</p><p>（3）UIApplicationMain函数作用</p><p>（4）main函数作用</p><p>37、 动画有基本类型有哪几种；表视图有哪几种基本样式。</p><p>38、实现简单的表格显示需要设置UITableView的什么属性、实现什么协议？</p><p>39、Cocoa Touch提供了哪几种Core Animation过渡类型？</p><p>40、UIView与CLayer有什么区别？</p><p>41、Quatrz 2D的绘图功能的三个核心概念是什么并简述其作用</p><p>42、iPhone OS主要提供了几种播放音频的方法？</p><p>43、使用AVAudioPlayer类调用哪个框架、使用步骤？</p><p>44、有哪几种手势通知方法、写清楚方法名？</p><p>45、ViewController的didReceiveMemoryWarning怎么被调用</p><p>46、什么时候用delegate,什么时候用Notification?</p><p>47、用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）</p><p>48、写一个”标准”宏MIN ，这个宏输入两个参数并返回较小的一个。</p><p>49、关键字const有什么含意？修饰类呢?static的作用,用于类呢?还有extern c的作用</p><p>50、关键字volatile有什么含意?并给出三个不同的例子</p><p>51、一个参数既可以是const还可以是volatile吗？ 一个指针可以是volatile 吗？解释为什么。</p><p>52、static 关键字的作用</p><p>53、列举几种进程的同步机制，并比较其优缺点。</p><p>54、进程之间通信的途径</p><p>55、进程死锁的原因</p><p>56、死锁的4个必要条件</p><p>57、死锁的处理</p><p>58、cocoa touch框架</p><p>59、自动释放池是什么,如何工作</p><p>60、sprintf,strcpy,memcpy使用上有什么要注意的地方</p><p>61、你了解svn,cvs等版本控制工具么？</p><p>62、什么是push</p><p>63、静态链接库</p><p>64、OC三大特性</p><p>（1）封装_点语法</p><p>（2）继承</p><p>（3）多态</p><p>65、OC中如何实现多态</p><p>66、Objective-C的优缺点</p><p>67、对于OC,你认为最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以话，有没有考虑或者实现过重新实现OC的功能，如果有，具体怎么做？</p><p>68、oc中可修改和不可以修改类型</p><p>69、我们说的oc是动态运行时语言是什么意思?</p><p>70、通知和协议的不同之处?</p><p>71、什么是推送消息?</p><p>72、关于多态性</p><p>73、什么是谓词?</p><p>74、做过的项目是否涉及网络访问功能，使用什么对象完成网络功能?</p><p>75、简单介绍下NSURLConnection类及+sendSynchronousRequest:returningResponse:error:与– initWithRequest:delegate:两个方法的区别?</p><p>76、谈谈Object-C的内存管理方式及过程？</p><p>77、Object-C有私有方法吗？私有变量呢？</p><p>78、说说响应链</p><p>79、时间传递 &amp; 响应者链</p><p>80、frame和bounds有什么不同?</p><p>81、方法和选择器有何不同?</p><p>82、OC的垃圾回收机制?</p><p>83、什么是延迟加载?</p><p>84、是否在一个视图控制器中嵌入两个tableview控制器?</p><p>85、一个tableView是否可以关联两个不同的数据源?你会怎么处理?</p><p>86、什么时候使用NSMutableArray，什么时候使用NSArray?</p><p>87、给出委托方法的实例，并且说出UITableVIew的Data Source方法</p><p>88、在应用中可以创建多少autorelease对象，是否有限制?</p><p>89、如果我们不创建内存池，是否有内存池提供给我们?</p><p>90、什么时候需要在程序中创建内存池?</p><p>91、类NSObject的那些方法经常被使用?</p><p>92、什么是简便构造方法?</p><p>93、如何使用Xcode设计通用应用?</p><p>94、 UIView的动画效果有那些?</p><p>95、Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类</p><p>96、内存管理 Autorelease、retain、copy、assign的set方法和含义？</p><p>97、C和obj-c 如何混用</p><p>98、类别的作用?继承和类别在实现中有何区别?</p><p>99、类别和类扩展的区别。</p><p>100、oc中的协议和java中的接口概念有何不同?</p><p>101、深拷贝与前拷贝区别</p><p>（1）什么是深拷贝浅拷贝</p><p>（2）字符串什么时候使用copy,strong</p><p>（3）字符串所在内存区域</p><p>（4）mutablecopy和copy @property(copy) NSMutableArray *arr;这样写有什么问题</p><p>（5）如何让自定义类可以使用copy修饰符</p><p>102、对于语句NSString*obj = [[NSData alloc] init]; obj在编译时和运行时分别时什么类型的对象？</p><p>103、#import 跟#include 又什么区别，@class呢, ＃import&lt;&gt; 跟 #import””又什么区别？</p><p>104、Objective-C的类可以多重继承么?可以实现多个接口么?Category是什么?重写一个类的方法用继承好还是分类好?为什么?</p><p>105、 #import 跟#include 又什么区别，@class呢, #import&lt;&gt; 跟 #import””又什么区别?</p><p>106、写一个setter方法用于完成@property (nonatomic,retain)NSString name,写一个setter方法用于完成@property(nonatomic，copy)NSString name</p><p>107、常见的Objective-C的数据类型有那些， 和C的基本数据类型有什么区别?如：NSInteger和int</p><p>108、id 声明的对象有什么特性?</p><p>109、Objective-C如何对内存管理的,说说你的看法和解决方法?</p><p>110、原子(atomic)跟非原子(non-atomic)属性有什么区别?</p><p>111、看下面的程序,第一个NSLog会输出什么?这时str的retainCount是多少?第二个和第三个呢? 为什么?</p><p>112、内存管理的几条原则时什么?按照默认法则.那些关键字生成的对象需要手动释放?在和property结合的时候怎样有效的避免内存泄露?</p><p>113、如何对iOS设备进行性能测试?</p><p>114、设计模式</p><p>（1）mvc模式</p><p>（2）单例模式</p><p>（3）mvvm模式</p><p>（4）观察者模式</p><p>（5）工厂模式</p><p>（6）代理模式</p><p>（7）策略模式</p><p>（8）适配器模式</p><p>（9）模版模式</p><p>（10）外观模式</p><p>（11）创建模式</p><p>（12）MVP模式</p><p>115、MVVM模式原理分析</p><p>116、说说常用的几种传值方式</p><p>117、什么时候用delegate，什么时候用Notification</p><p>118、对于单例的理解</p><p>119、从设计模式角度分析代理，通知和KVO区别？ios SDK 提供 的framework使用了哪些设计模式，为什么使用？有哪些好处和坏处?</p><p>120、KVO，NSNotification，delegate及block区别</p><p>121、运行时（runTime）</p><p>122、runtime/消息转发机制</p><p>（1）runtime</p><p>1.1、什么是runtime</p><p>1.2、runtime干什么用，使用场景</p><p>（2）消息机制</p><p>2.1、消息转发的原理</p><p>2.2、SEL isa super cmd 是什么</p><p>（3）动态绑定</p><p>123、使用bugly进行崩溃分析</p><p>124、jenkens 持续打包</p><p>125、KVO &amp; KVC</p><p>（1）底层实现</p><p>（2）KVO概述</p><p>（3）KVC概述</p><p>126、什么是KVO和KVC?</p><p>KVO和KVC</p><p>（1）如何调用私有变量，如何修改系统的只读属性，KVC的查找顺序</p><p>（2）什么是键-值,键路径是什么</p><p>（3）kvo的实现机制</p><p>（4）KVO计算属性，设置依赖键</p><p>（5）KVO集合属性</p><p>（6）kvo使用场景</p><p>127、SDWebImage(SDWebImage的实现机制）</p><p>（1）主要功能</p><p>（2）缓存</p><p>（3）内存缓存与磁盘缓存</p><p>128、框架 SDWebimage的缓存机制</p><p>129、网络安全</p><p>密码的安全原则</p><p>130、多线程</p><p>（1）多线程概念</p><p>（2）多线程的作用</p><p>（3）使用场景</p><p>131、NSOperationQueue和GCD的区别是什么</p><p>132、GCD与NSThread的区别</p><p>133、进程和线程的区别与联系是什么?</p><p>134、别异步执行两个耗时操作，等两次耗时操作都执行完毕后,再回到主线程执行操作. 使用队列组(dispatch_group_t)快速,高效的实现上述需求</p><p>135、在项目什么时候选择使用GCD，什么时候选择NSOperation?</p><p>136、对比iOS中的多线程技术</p><p>137、多线程优缺点</p><p>138、iOS中的延迟操作</p><p>139、串行队列同步执行和异步主队列</p><p>140、资源抢夺解决方案</p><p>141、dispatch_barrier_async的作用是什么？</p><p>142、在多线程Core Data中，NSC,MOC,NSObjectModel哪些需要在线程中创建或者传递？你是用什么策越来实现的？</p><p>143、+(void)load与 +(void)initialize区别load 和 initialize方法的区别</p><p>144、http的post与区别与联系，实践中如何选择它们？</p><p>145、说说关于UDP/TCP的区别？</p><p>146、http和scoket通信的区别?socket连接相关库,TCP,UDP的连接方法,HTTP的几种常用方式?</p><p>147、HTTP请求常用的几种方式</p><p>148、block</p><p>（1）使用block时什么情况会发生引用循环，如何解决？</p><p>（2）在block内如何修改block外部变量？</p><p>（3）Block &amp; MRC-Block</p><p>（4）什么是block</p><p>（5）block 实现原理</p><p>（6）关于block</p><p>（7）使用block和使用delegate完成委托模式有什么优点</p><p>（8）多线程与block</p><p>（9）谈谈对Block 的理解?并写出一个使用Block执行UIVew动画?</p><p>（10）写出上面代码的Block的定义（接上题）</p><p>149、Weak、strong、copy、assign 使用</p><p>（1）什么情况使用 weak 关键字，相比 assign 有什么不同？</p><p>（2）怎么用 copy 关键字？</p><p>（3）weak &amp; strong</p><p>（4）这个写法会出什么问题： @property (copy) NSMutableArray *array</p><p>（5） 如何让自己的类用 copy 修饰符？如何重写带 copy 关键字的 setter？</p><p>（6） @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</p><p>（7）ivar、getter、setter 是如何生成并添加到这个类中的?</p><p>（8）用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？</p><p>（9）@protocol 和 category 中如何使用 @property</p><p>（10）runtime如何通过selector找到对应的IMP地址？</p><p>（11）retain和copy区别</p><p>（12）copy和strong的使用？</p><p>（13）NSString和NSMutableString，前者线程安全，后者线程不安全。</p><p>（14）readwrite，readonly，assign，retain，copy，weak ,strong,nonatomic 属性的作用</p><p>150、OC与JS的交互（iOS与H5混编）</p><p>TableView性能优化</p><p>UITableView核心思想</p><p>UITableView的优化主要从三个方面入手：</p><p>151、TableView为什么会卡？</p><p>152、UITableView</p><p>（1）UITableView最核心的思想</p><p>（2）定义高度</p><p>（3）自定义高度原理</p><p>（4）老生常谈之UITableView的性能优化</p><p>（5）cell高度的计算</p><p>（5.1）定高的cell和动态高度的cell</p><p>（6）TableView渲染</p><p>（7）减少视图的数目</p><p>（8）减少多余的绘制操作</p><p>（9）不要给cell动态添加subView</p><p>（10）异步化UI，不要阻塞主线程</p><p>（11）滑动时按需加载对应的内容</p><p>（12）离屏渲染的问题</p><p>（13）离屏渲染优化方案</p><p>153、环信SDK使用</p><p>154、蓝牙</p><p>155、在iPhone应用中如何保存数据?</p><p>156、什么是coredata?</p><p>157、 什么是NSManagedObject模型?</p><p>158、什么是NSManagedobjectContext?</p><p>159、 iOS平台怎么做数据的持久化?coredata 和sqlite有无必然联系？coredata是一个关系型数据库吗？</p><p>160、CoreData &amp; SQLite3</p><p>161、数据存储</p><p>（1）数据存储技术</p><p>（1.1）数据存储的几种方式</p><p>（1.2）各自特点（面试考点）</p><p>（1.3）偏好设置（面试考点）</p><p>（1.4）归档（面试考点）</p><p>（2）数据库技术（SQLite&amp;CoreData）</p><p>162、Objective-C堆和栈的区别？</p><p>163、内存泄露 &amp; 内存溢出</p><p>164、堆 &amp; 栈</p><p>（1）堆栈空间分配区别</p><p>（2）堆栈缓存方式区别</p><p>（3）堆栈数据结构区别</p><p>165、内存管理</p><p>（1）内存区域</p><p>（1.1）堆和栈的区别</p><p>（1.2）iOS内存区域</p><p>（2）字符串的内存管理</p><p>（3）你是如何优化内存管理</p><p>（4）循环引用</p><p>（5）autorelease的使用</p><p>（5.1）工厂方法为什么不释放对象</p><p>（5.2）ARC下autorelease的使用场景</p><p>（5.3）自动释放池如何工作</p><p>（5.4）避免内存峰值</p><p>（5.5）ARC和MRC的混用</p><p>（5.6）NSTimer的内存管理</p><p>（5.7）ARC的实现原理</p><p>166、Runloop</p><p>167、fmmpeg框架</p><p>168、fmdb框架</p><p>169、320框架</p><p>170、UIKit和CoreAnimation和CoreGraphics的关系是什么？在开发中是否使用过CoreAnimation和CoreGraphics?</p><p>171、trasform</p><p>172、点讲动画和layer ,view的区别</p><p>173、图层与视图</p><p>174、平行的层级关系</p><p>175、图层的能力</p><p>176、使用图层</p><p>177、核心绘图</p><p>（1）View和layer的区别</p><p>（2）new和alloc init的区别</p><p>178、动画</p><p>179、UICollectionView</p><p>（1）何实现瀑布流,流水布局</p><p>（2）和UITableView的使用区别</p><p>180、UIImage</p><p>181、webview</p><p>182、描述九宫格算法</p><p>183、实现图片轮播图</p><p>184、iOS网络框架</p><p>185、网络</p><p>（1）网络基础</p><p>（2）网络传输</p><p>（3）AFN</p><p>186、AFNetworking &amp; ASIHttpRequest &amp; MKNetWorking</p><p>（1）底层实现</p><p>（2）对服务器返回的数据处理</p><p>（3）监听请求过程</p><p>（4）在文件下载和文件上传的使用难易度</p><p>（5）网络监控</p><p>（6）ASI提供的其他实用功能</p><p>（7）MKNetworkKit</p><p>187、性能优化</p><p>188、算法</p>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（二）</title>
    <link href="/2018/02/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-002/"/>
    <url>/2018/02/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-002/</url>
    
    <content type="html"><![CDATA[<h2 id="架构模式-编程思想-设计模式"><a href="#架构模式-编程思想-设计模式" class="headerlink" title="架构模式,编程思想,设计模式"></a>架构模式,编程思想,设计模式</h2><h3 id="1、架构模式"><a href="#1、架构模式" class="headerlink" title="1、架构模式"></a>1、架构模式</h3><ul><li>MVC:<blockquote><p>MVC即Model-VIew-Controller。MVC模式致力于关注点的切分，这意味着model和controller的逻辑是不与用户界面（View）挂钩的。Model层代表了描述业务逻辑和数据的一系列类的集合。它也定义了数据修改和操作的业务规则。View代表了UI组件，像UIView，UIButton，UITableView等。他只负责展示从controller接收到的数据。因此，维护和测试程序变得更加简单容易。然而在Cocoa的MVC模式中Controller经常被混杂在View的生命周期中，因此很难说View和ViewController是分离的，这也往往驱使人们写出臃肿的视图控制器，尽管仍可以将业务逻辑和数据转换到Model，但是大多数情况下当需要为View减负的时候我们却无能为力了。View的最大的任务就是向Controller传递用户动作事件。ViewController不再承担一切代理和数据源的职责，通常只负责一些分发和取消网络请求以及一些其他的任务。当在进行单元测试的时候你会发现问题越来越明显。因为你的ViewController和View是紧密耦合的，对它们进行测试就显得很艰难。Cocoa MVC看来并不是我们定义中理想的架构模式。</p></blockquote></li><li>MVVM:<blockquote><p>即Model-View-View Model。这个模式提供对View和View Model的双向数据绑定。这使得View Model的状态改变可以自动传递给View。典型的情况是，View Model通过使用obsever模式（观察者模式）来将View Model的变化通知给model。View Model负责暴漏方法，命令，其他属性来操作VIew的状态，组装model作为View动作的结果，并且触发View自己的事件。它和MVP模式看起来非常像:MVVM将ViewController视作View,View和Model之间没有紧密的联系。在使用MVVM模式时，自然而然会想到ReactiveCoca，反之亦然。尽管通过简单的绑定来使用MVVM是可实现的，但是ReactiveCocoa却能更好的发挥MVVM模式的特点。但是使用这个框架有个难以忽略的事实：当你刚开始使用ReactiveCoca的时候有很大的可能就会把事情搞砸。换句话来说就是，如果发现了一些错误，当你试图查看函数调用栈时你可能会喊：“天哪，好深的函数调用栈“！调试出这个bug可能会花费大量的时间。MVVM很诱人，因为它集合了上述方法的优点，并且由于在View层的绑定，它并不需要其他附加的代码来更新View，尽管这样，可测试性依然很强——符合我们理想中好架构模式的定义。</p></blockquote></li><li>MVP:<blockquote><p>这个模式把Presenter换成Controller就和MVC非常相像了。这个设计模式把应用程序分成了3个主要方面：Model、View和Presenter,其中的Model和View与MVC模中的角色相同。Presenter负责处理View背后所有的UI事件。它通过View接收用户输入，之后利用Model来处理用户的数据，最后把结果返回给View。与View和Controller不同，View和Presenter之间是完全解耦的，他们通过接口来交互。另外，presenter不像controller处理进入的请求。这不是正解决了Cocoa MVC中ViewController和View的耦合问题吗？就MVP模式而言，UIViewController的子类实际上就是Views并不是Presenters。这点区别使得这种模式的可测试性得到了极大的提高，付出的代价是开发速度的一些降低，因为必须要做一些手动的数据和事件绑定。但是这也意味着我们将最主要的任务划分到Presenter和Model，而View的功能较少——各个实体任务量分配不均衡。</p></blockquote></li><li>Viper架构模式:<blockquote><p>由视图 (View)，交互器 (Interactor)，展示器 (Presenter)，实体 (Entity) 以及路由 (Routing) 组成。<br><br>视图：根据展示器的要求显示界面，并将用户输入反馈给展示器。<br><br>交互器：包含由用例指定的业务逻辑。<br><br>展示器：包含为显示（从交互器接受的内容）做的准备工作的相关视图逻辑，并对用户输入进行反馈（从交互器获取新数据）。<br><br>实体：包含交互器要使用的基本模型对象。<br><br>路由：包含用来描述屏幕显示和显示顺序的导航逻辑。<br>Viper将应用程序的逻辑结构划分为不同的责任层。这使得它更容易隔离依赖项 (如数据库)，也更容易测试各层间的边界处的交互。<br><br>Viper的不同层提供了明确的程序逻辑以及导航控制代码来避免视图控制器太过于臃肿的问题，利用 Viper ，视图控制器可以简洁高效，意义明确地控制视图。视图控制器中代码和所有的其他类很容易理解，容易测试，理所当然也更易维护。<br>毫无疑问，Viper在划分责任的粒度上比以上几种模式都要优秀，自然而然就有更好的可测试性，当然你必须为很小功能的类写出大量的接口。如果是在大型项目中使用Viper，Viper架构模式符合我们理想中好架构模式的定义。</p></blockquote></li></ul><h3 id="2、编程思想"><a href="#2、编程思想" class="headerlink" title="2、编程思想"></a>2、编程思想</h3><h4 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h4><blockquote><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>在面向对象的语言中，对象、类、方法都是一种封装，对象是封装的最基本单位。<br><br>类的封装体现在每个类都有.h和.m两个文件，将定义与实现分开，.h声明（用户可见的外部接口），.m实现（用户不可见的内部实现）。方法的封装，是最常见的，每个方法中封装了一个小的功能，这是单一职责的很好体现，第三方框架和代码也是一种封装。封装使程序的结构更加清晰，将实现的信息封装隐藏，用的时候直接调用封装好的方法或类，提高效率。此外，可以减少程序间的相互依赖。</p><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>子类自动共享父类非私有数据结构和方法的机制，是类之间的一种关系。<br><br>继承是面向对象语言特有的，面向过程的语言不具有继承特性，OC是单继承。<br><br>继承提供了类的规范等级结构，使公共的特性能够共享，提高的软件的重用性。<br><br>类的继承性使所建的软件具有开发性、可扩充性，简化了对象、类的创建工作量，提高了代码的重用性。</p><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>用父类指针指向子类的对象。通过不同的对象调用相同的名称的方法，却产生不同的结果。<br><br>通过父类指针得到的几个对象，都调用了父类中某个方法，但实际上在运行的时候，是执行的自己真实类中的方法。<br><br>多态增强了软件的灵活性和重用性。</p></blockquote><h4 id="链式编程思想"><a href="#链式编程思想" class="headerlink" title="链式编程思想"></a>链式编程思想</h4><blockquote><p>将多个操作（多行代码）通过点号(.)链接在一起成为一句代码,使代码可读性好。a(1).b(2).c(3)<br><br>链式编程特点：方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值<br><br>代表：Masonry框架</p></blockquote><h4 id="响应式编程思想"><a href="#响应式编程思想" class="headerlink" title="响应式编程思想"></a>响应式编程思想</h4><blockquote><p>不需要考虑调用顺序，只需要知道考虑结果，类似于蝴蝶效应，产生一个事件，会影响很多东西，这些事件像流一样的传播出去，然后影响结果，借用面向对象的一句话，万物皆是流。<br></p></blockquote><blockquote><p>代表：KVO运用。</p></blockquote><h4 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h4><blockquote><p>是把操作尽量写成一系列嵌套的函数或者方法调用。<br><br>函数式编程本质:就是往方法中传入Block,方法中嵌套Block调用，把代码聚合起来管理<br><br>函数式编程特点：每个方法必须有返回值（本身对象）,把函数或者Block当做参数,block参数（需要操作的值）block返回值（操作结果）<br><br>代表：ReactiveCocoa。</p></blockquote><h2 id="底层进阶-深层理解"><a href="#底层进阶-深层理解" class="headerlink" title="底层进阶,深层理解"></a>底层进阶,深层理解</h2><h2 id="三方框架要知其然-而知其所以然"><a href="#三方框架要知其然-而知其所以然" class="headerlink" title="三方框架要知其然,而知其所以然"></a>三方框架要知其然,而知其所以然</h2><h3 id="1、AFNetworking"><a href="#1、AFNetworking" class="headerlink" title="1、AFNetworking"></a>1、AFNetworking</h3><p>AFNetworking有5个模块：</p><h4 id="NSURLSession-网络请求模块"><a href="#NSURLSession-网络请求模块" class="headerlink" title="NSURLSession 网络请求模块"></a>NSURLSession 网络请求模块</h4><blockquote><p>AFHTTPSessionManager继承自AFURLSessionManager<br><br>GET<br><br>POST<br><br>DELETE<br><br>PUT<br><br>PATCH<br><br>文件上传<br><br>AFURLSessionManager<br><br>管理所有的请求，设置了NSURLSessionTaskDelegate, NSRULSessionDataDelegate,NSURLSessionDownloadDelegate实现证书合法性校验，数据传输进度检测，数据请求成功/失败的回调。<br>使用Runtime用af_suspend替换 suspend, 用af_resume替换了resume 当调用者两个方法时往上层发送通知 AFNetworkingTaskDidSuspendNotification AFNetworkingTaskDidResumeNotification<br>请求服务器数据<br><br>上传数据<br><br>多线程下载数据</p></blockquote><h4 id="Reachability-监测网络状态模块"><a href="#Reachability-监测网络状态模块" class="headerlink" title="Reachability 监测网络状态模块"></a>Reachability 监测网络状态模块</h4><blockquote><p>AFNetworkReachabilityManager</p></blockquote><h4 id="Security-安全策略模块"><a href="#Security-安全策略模块" class="headerlink" title="Security 安全策略模块"></a>Security 安全策略模块</h4><blockquote><p>AFSecurityPolicy:iOS项目将服务器端的证书保存导入到项目中，AFN根据项目中的服务器证书来进行验证，验证服务器，保证访问服务器的安全性。<br><br>验证证书的模式有三种：<br><br>AFSSLPinningModeNone 不验证<br><br>AFSSLPinningModePublicKey 只验证公钥<br><br>AFSSLPinningModeCertificate 验证证书的所有内容</p></blockquote><h4 id="Serialization-序列化"><a href="#Serialization-序列化" class="headerlink" title="Serialization 序列化"></a>Serialization 序列化</h4><blockquote><p>AFURLRequestSerialization<br><br>AFURLResponseSerialization</p></blockquote><h4 id="UIKit-UI相关的一些类目"><a href="#UIKit-UI相关的一些类目" class="headerlink" title="UIKit UI相关的一些类目"></a>UIKit UI相关的一些类目</h4><h4 id="原理概述"><a href="#原理概述" class="headerlink" title="原理概述"></a>原理概述</h4><blockquote><p>AFNetworking 是对NSURLSessionTask的封装。AFHTTPSessionManager继承AFURLSessionManager对网络请求进行管理，使用AFURLRequestSerialization对网络请求进行封装，使用AFURLResponseSerialization对响应体进行处理，使用AFSecurityPolicy对服务器证书进行校验。支持HTTPS协议，支持本地证书和服务器证书进行对比验证。AFN数据传递主要使用block和notifacation方式。</p></blockquote><h4 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h4><blockquote><p>GET/POST等方法调用抽象的请求方法，指明请求参数，调用全能数据请求方法，指明数据请求方式和参数。<br>对请求进行序列化，如果序列化失败，就执行failure block。<br>为每一个NSURLSessionDataTask的dataTask增加代理。<br>对每一个NSURLSessionDataTask的dataTask增加代理的具体实现，对dataTask设置请求之后的回调delegate和处理block。</p></blockquote><h3 id="2、SDWebImage"><a href="#2、SDWebImage" class="headerlink" title="2、SDWebImage"></a>2、SDWebImage</h3><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><h5 id="SDImageCache"><a href="#SDImageCache" class="headerlink" title="SDImageCache"></a>SDImageCache</h5><p>在SDImageCache，图片采用了二级缓存策略。图片缓存时，在内存有缓存，在磁盘中也有缓存。其中，内存缓存是通过NSCache实现的。<br></p><h5 id="缓存步骤"><a href="#缓存步骤" class="headerlink" title="缓存步骤"></a>缓存步骤</h5><blockquote><ol><li>将图片缓存在内存中</li><li>判断图片的格式是png或是jpeg，将图片转化为NSData数据</li><li>如果是在mac_os系统中，直接将图片转化为NSBitmapImageRep数据</li><li>获取图片的存储路径，其中图片的文件名是通过传入的key经过md5加密后获得的。</li><li>将图片存储磁盘中</li></ol></blockquote><h5 id="获取图片步骤"><a href="#获取图片步骤" class="headerlink" title="获取图片步骤"></a>获取图片步骤</h5><blockquote><ol><li>先在内存缓存中寻找</li><li>如果内存中找不到图片，则在默认的磁盘根目录中寻找，如果还是找不到，再从自定义的只读目录路径中寻找</li><li>获取图片数据后，将图片数据从NSData转化为UIImage,转化是要根据图片的类型进行转化。</li><li>默认对图片进行解压缩，生成位图图片。</li><li>将位图图片返回。</li></ol></blockquote><h5 id="图片解压缩步骤"><a href="#图片解压缩步骤" class="headerlink" title="图片解压缩步骤"></a>图片解压缩步骤</h5><blockquote><ol><li>判断图片是否是动态图片，如果是，则不能解压缩</li><li>判断图片是否是透明的，如果是，则不能解压缩</li><li>判断图片的颜色空间模型是不是RGB，如果不是，不能解压缩</li><li>根据图片的大小创建一个上下文</li><li>将图片绘制在上下文中。</li><li>从上下文中读取一个不透明的位图图像，该图像就是解压缩后的图像</li><li>将位图图像返回</li></ol></blockquote><h5 id="对图片进行缩放步骤"><a href="#对图片进行缩放步骤" class="headerlink" title="对图片进行缩放步骤"></a>对图片进行缩放步骤</h5><blockquote><ol><li>如果是普通图像，则直接进行缩放</li><li>如果是动态图像，则要对图像中的每一张图像都进行缩放<h5 id="磁盘缓存清理步骤"><a href="#磁盘缓存清理步骤" class="headerlink" title="磁盘缓存清理步骤"></a>磁盘缓存清理步骤</h5></li><li>获取磁盘中图片的最后修改日期。(为了减少磁盘和内存数据交换，读取是并不将整个文件读入内存，仅仅将文件的一些属性读入内存中，包括最后修改日期，该文件是否为文件夹，文件的大小和对应文件的文件路径)</li><li>根据最后修改日期将图片进行分类，将那些已经存放超过最长存放时间的文件存储在删除数组，其他的文件信息存储在另一个字典中。并计算除去要删除的文件之外的所有文件大小</li><li>根据删除数组中的文件路径，将对应的文件删除。</li><li>判断剩下的文件大小是否超过用户现在的磁盘最大容量。</li><li>如果超过，则将剩余的文件进行安修改时间进行升序排列，然后删除修改时间最早的文件，直到甚剩余文件大小小于最大磁盘容量的一半。</li></ol></blockquote><h5 id="图片缓存清理时机"><a href="#图片缓存清理时机" class="headerlink" title="图片缓存清理时机"></a>图片缓存清理时机</h5><blockquote><ol><li>当系统发出内存不足通知时，会将内存中的所有图片缓存都删除掉。</li><li>当程序进入后台时，会对磁盘的文件数据进行清理。</li><li>当收到程序关闭通知时，会对磁盘中的文件数据进行清理。</li></ol></blockquote><h3 id="多线程与网络"><a href="#多线程与网络" class="headerlink" title="多线程与网络"></a>多线程与网络</h3><h3 id="内存管理-性能优化"><a href="#内存管理-性能优化" class="headerlink" title="内存管理,性能优化"></a>内存管理,性能优化</h3><h4 id="1、内存管理"><a href="#1、内存管理" class="headerlink" title="1、内存管理"></a>1、内存管理</h4><h4 id="2、性能优化"><a href="#2、性能优化" class="headerlink" title="2、性能优化"></a>2、性能优化</h4><h5 id="逻辑优化"><a href="#逻辑优化" class="headerlink" title="逻辑优化"></a>逻辑优化</h5><ol><li>代码封装优化</li><li>代码执行效率优化<h5 id="界面优化"><a href="#界面优化" class="headerlink" title="界面优化"></a>界面优化</h5></li><li>离屏渲染优化<blockquote><ol><li>shouldRasterize（光栅化）</li><li>mask（遮罩层）</li><li>shadows（阴影）</li><li>EdgeAnntialiasing（抗锯齿）</li><li>GroupOpacity（不透明）</li><li>复杂形状比如圆角等</li><li>渐变<br></li></ol></blockquote></li><li>界面加载优化</li></ol><h3 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h3><h3 id="音视频方向"><a href="#音视频方向" class="headerlink" title="音视频方向"></a>音视频方向</h3><h3 id="逆向方向"><a href="#逆向方向" class="headerlink" title="逆向方向"></a>逆向方向</h3>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS 面试题（一）</title>
    <link href="/2018/01/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-001/"/>
    <url>/2018/01/01/iOS%E9%9D%A2%E8%AF%95%E9%A2%98-001/</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h4 id="1-属性修饰词"><a href="#1-属性修饰词" class="headerlink" title="1. 属性修饰词"></a>1. 属性修饰词</h4><h4 id="nonatomic"><a href="#nonatomic" class="headerlink" title="nonatomic"></a>nonatomic</h4><p>非原子性访问，多线程并发访问会提高性能。</p><h4 id="atomic"><a href="#atomic" class="headerlink" title="atomic:"></a>atomic:</h4><p>原子性访问。</p><h4 id="strong"><a href="#strong" class="headerlink" title="strong"></a>strong</h4><p>ARC时中使用，相当于retain。</p><h4 id="weak"><a href="#weak" class="headerlink" title="weak"></a>weak</h4><p>相当于assign，可以把对应的指针变量置为nil。</p><h4 id="assgin"><a href="#assgin" class="headerlink" title="assgin"></a>assgin</h4><p>不会使引用计数加1，也就是直接赋值。</p><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p>建立一个索引计数为1的对象，在赋值时使用传入值的一份拷贝。</p><h4 id="retain"><a href="#retain" class="headerlink" title="retain"></a>retain</h4><p>会使引用计数加1。</p><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>此标记说明属性会被当成读写的，这也是默认属性。</p><h4 id="readwrite"><a href="#readwrite" class="headerlink" title="readwrite"></a>readwrite</h4><p>此标记说明属性只可以读，也就是不能设置，可以获取。</p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>（1）什么情况使用 weak 关键字？相比 assign 有什么不同?</p><ul><li>使用<blockquote><ol><li>协议声明使用weak</li><li>IBOutlet 使用weak</li></ol></blockquote></li><li>weak 和 assign 的不同点:<blockquote><p>weak 策略在属性所指的对象遭到摧毁时,系统会将 weak 修饰的属性对象的指针指向 nil,在 OC 给 nil 发消息是不会有什么问题的;如果使用 assign 策略在属性所指的对象遭到摧毁时,属性对象指针还指向原来的对象,由于对象已经被销毁,这时候就产生了野指针,如果这时候在给此对象发送消息,很容造成程序奔溃assigin 可以用于修饰非 OC 对象,而 weak 必须用于 OC 对象。</p></blockquote></li></ul><p>（2）使用 atomic 一定是线程安全的吗?</p><ul><li>不是,atomic 的本意是指属性的存取方法是线程安全的,并不保证整个对象是线程安全的。<blockquote><p>例如： 声明一个 NSMutableArray 的原子属性 stuff,此时 self.stuff 和 self.stuff =othersulf 都是线程安全的。但是,使用[self.stuff objectAtIndex:index]就不是线程安全的,需要用互斥锁来保证线程安全性。</p></blockquote></li></ul><p>（3）@synthesize 和 @dynamic 分别有什么作用</p><blockquote><ul><li>@property 有两个对应的词,一个是@synthesize,一个是@dynamic。<br>如果@synthesize 和@dynamic 都没写,那么默认的就是<br>@syntheszie var = _var;</li><li>@synthesize 的语义是如果你没有手动实现 setter 方法和 getter 方法,那么编译器会自动为你加上这两个方法。</li><li>@dynamic 告诉编译器:属性的 setter 与 getter 方法由用户自己实现,不自动生成。(当然对于 readonly 的属性只需提供 getter 即可)</li><li>假如一个属性被声明为@dynamic var；然后你没有提供@setter 方法和@getter 方法,编译的时候没问题,但是当程序运行到 instance.var = someVar,由于缺 setter方法会导致程序崩溃;<br>或者当运行到 someVar = instance.var 时,由于缺 getter 方法同样会导致崩溃。</li></ul></blockquote><p>（4）ARC 下,不显式指定任何属性关键字时,默认的关键字都有哪些?</p><blockquote><ul><li>基本数据：  <code>atomic,readwrite,assign</code></li><li>普通的 OC 对象: <code>atomic,readwrite,strong</code></li></ul></blockquote><p>（5）用@property 声明的 NSString(或 NSArray,NSDictionary)经常使用 copy 关键字,为什么?如果改用 strong 关键字,可能造成什么问题?</p><blockquote><p>因为父类指针可以指向子类对象,使用 copy 的目的是为了让本对象的属性不受外界影响,使用 copy 无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.</p><p>如果我们使用是 strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.</p></blockquote><p>（6）这个写法会出什么问题: @property(copy)NSMutableArray *array;</p><blockquote><p>因为 copy 策略拷贝出来的是一个不可变对象,然而却把它当成可变对象使用,很容易造成程序奔溃这里还有一个问题,该属性使用了同步锁,会在创建时生成一些额外的代码用于帮助编写多线程程序,这会带来性能问题,通过声明 nonatomic 可以节省这些虽然<br>很小但是不必要额外开销,在 iOS 开发中应该使用 nonatomic 替代 atomic.</p></blockquote><p>（7）如何让自定义类可以用 copy 修饰符?如何重写带 copy 关键字的 setter?</p><blockquote><p>若想令自己所写的对象具有拷贝功能,则需实现 NSCopying 协议。</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">// 实现不可变版本拷贝</span><br>- (<span class="hljs-keyword">id</span>)copyWithZone:(<span class="hljs-built_in">NSZone</span> *)zone; <span class="hljs-comment">// 实现可变版本拷贝</span><br>- (<span class="hljs-keyword">id</span>)mutableCopyWithZone:(<span class="hljs-built_in">NSZone</span> *)zone;<br><span class="hljs-comment">// 重写带 copy 关键字的 setter</span><br>- (<span class="hljs-keyword">void</span>)setName:(<span class="hljs-built_in">NSString</span> *)name &#123;<br>    _name = [name <span class="hljs-keyword">copy</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-我们说的Objective-C是动态运行时语言是什么意思？"><a href="#2-我们说的Objective-C是动态运行时语言是什么意思？" class="headerlink" title="2. 我们说的Objective-C是动态运行时语言是什么意思？"></a>2. 我们说的Objective-C是动态运行时语言是什么意思？</h4><blockquote><ul><li>动态类型。 如id类型。实际上静态类型因为其固定性和可预知性而使用得更加广泛。静态类型是强类型，而动态类型属于弱类型。运行时决定接收者。</li><li>动态绑定。让代码在运行时判断需要调用什么方法，而不是在编译时。与其他面向对象语言一样，方法调用和代码并没有在编译时连接在一起，而是在消息发送时才进行连接。运行时决定调用哪个方法。</li><li> 动态载入。让程序在运行时添加代码模块以及其他资源。用户可以根据需要加载一些可执行代码和资源，而不是在启动时就加载所有组件。可执行代码中可以含有和程序运行时整合的新类。</li></ul></blockquote><h4 id="3-讲一下MVC和MVVM，MVP？"><a href="#3-讲一下MVC和MVVM，MVP？" class="headerlink" title="3. 讲一下MVC和MVVM，MVP？"></a>3. 讲一下MVC和MVVM，MVP？</h4><ul><li>MVC:<blockquote><p>MVC即Model-VIew-Controller。MVC模式致力于关注点的切分，这意味着model和controller的逻辑是不与用户界面（View）挂钩的。Model层代表了描述业务逻辑和数据的一系列类的集合。它也定义了数据修改和操作的业务规则。View代表了UI组件，像UIView，UIButton，UITableView等。他只负责展示从controller接收到的数据。因此，维护和测试程序变得更加简单容易。然而在Cocoa的MVC模式中Controller经常被混杂在View的生命周期中，因此很难说View和ViewController是分离的，这也往往驱使人们写出臃肿的视图控制器，尽管仍可以将业务逻辑和数据转换到Model，但是大多数情况下当需要为View减负的时候我们却无能为力了。View的最大的任务就是向Controller传递用户动作事件。ViewController不再承担一切代理和数据源的职责，通常只负责一些分发和取消网络请求以及一些其他的任务。当在进行单元测试的时候你会发现问题越来越明显。因为你的ViewController和View是紧密耦合的，对它们进行测试就显得很艰难。Cocoa MVC看来并不是我们定义中理想的架构模式。</p></blockquote></li><li>MVVM:<blockquote><p>即Model-View-View Model。这个模式提供对View和View Model的双向数据绑定。这使得View Model的状态改变可以自动传递给View。典型的情况是，View Model通过使用obsever模式（观察者模式）来将View Model的变化通知给model。View Model负责暴漏方法，命令，其他属性来操作VIew的状态，组装model作为View动作的结果，并且触发View自己的事件。它和MVP模式看起来非常像:MVVM将ViewController视作View,View和Model之间没有紧密的联系。在使用MVVM模式时，自然而然会想到ReactiveCoca，反之亦然。尽管通过简单的绑定来使用MVVM是可实现的，但是ReactiveCocoa却能更好的发挥MVVM模式的特点。但是使用这个框架有个难以忽略的事实：当你刚开始使用ReactiveCoca的时候有很大的可能就会把事情搞砸。换句话来说就是，如果发现了一些错误，当你试图查看函数调用栈时你可能会喊：“天哪，好深的函数调用栈“！调试出这个bug可能会花费大量的时间。MVVM很诱人，因为它集合了上述方法的优点，并且由于在View层的绑定，它并不需要其他附加的代码来更新View，尽管这样，可测试性依然很强——符合我们理想中好架构模式的定义。</p></blockquote></li><li>MVP:<blockquote><p>这个模式把Presenter换成Controller就和MVC非常相像了。这个设计模式把应用程序分成了3个主要方面：Model、View和Presenter,其中的Model和View与MVC模中的角色相同。Presenter负责处理View背后所有的UI事件。它通过View接收用户输入，之后利用Model来处理用户的数据，最后把结果返回给View。与View和Controller不同，View和Presenter之间是完全解耦的，他们通过接口来交互。另外，presenter不像controller处理进入的请求。这不是正解决了Cocoa MVC中ViewController和View的耦合问题吗？就MVP模式而言，UIViewController的子类实际上就是Views并不是Presenters。这点区别使得这种模式的可测试性得到了极大的提高，付出的代价是开发速度的一些降低，因为必须要做一些手动的数据和事件绑定。但是这也意味着我们将最主要的任务划分到Presenter和Model，而View的功能较少——各个实体任务量分配不均衡。</p></blockquote></li></ul><h4 id="4-为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别"><a href="#4-为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别" class="headerlink" title="4. 为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别?"></a>4. 为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别?</h4><blockquote><ol><li>为什么代理要用weak? <blockquote><p>防止循环引用。例如View有一个协议，需要一个代理实现回调。一个Controller添加这个View，并且遵守协议，成为View的代理。如果不用week，用strong，Controller -&gt;View -&gt; delegate -&gt; Controller，就循环引用了。</p></blockquote></li><li>代理的delegate和dataSource有什么区别？<blockquote><p> delegate偏重于与用户交互的回调，有那些方法可以供我使用，例如UITableviewDelegate；dataSource偏重于数据的回调，view里面有什么东西，属性都是什么，例如UITableviewDatasource；</p></blockquote></li><li>block和代理的区别?<blockquote><p>代理和block的共同特性是回调机制，不同的是，代理的方法比较多，比较分散。使用block的代码比较集中统一。</p></blockquote></li></ol></blockquote><h4 id="5-属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？-dynamic关键字和-synthesize关键字是用来做什么的？"><a href="#5-属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？-dynamic关键字和-synthesize关键字是用来做什么的？" class="headerlink" title="5. 属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？"></a>5. 属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？</h4><blockquote><ol><li>@property = ivar + getter + setter; (实例变量+get方法+ set方法，也就是说使用@property系统会自动生成setter和getter方法;) <br></li><li>@synthesize propertyName = _propertyName; (这行代码会创造一个带下划线前缀的实例变量名，同时使用这个属性生成getter 和 setter 方法。) <br></li><li>禁止@synthesize:如果某属性已经在某处实现了自己的 setter/getter ,可以使用 @dynamic 来阻止 @synthesize 自动生成新的 setter/getter 覆盖。</li></ol></blockquote><h4 id="6-属性的默认关键字是什么？"><a href="#6-属性的默认关键字是什么？" class="headerlink" title="6. 属性的默认关键字是什么？"></a>6. 属性的默认关键字是什么？</h4><blockquote><p>基本类型 @property (atomic, assign) <br><br>对象类型 @property (atomic, strong)</p></blockquote><h4 id="7-NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）"><a href="#7-NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）" class="headerlink" title="7. NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）"></a>7. NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）</h4><blockquote><ol><li>因为父类指针可以指向子类对象,使用copy的目的是为了让本对象的属性不受外界影响,使用copy无论给我传入是一个可变对象还是不可对象,我本身持有的就是一个不可变的副本.</li><li>如果我们使用是strong,那么这个属性就有可能指向一个可变对象,如果这个可变对象在外部被修改了,那么会影响该属性.</li></ol></blockquote><h4 id="8-如何令自己所写的对象具有拷贝功能"><a href="#8-如何令自己所写的对象具有拷贝功能" class="headerlink" title="8. 如何令自己所写的对象具有拷贝功能?"></a>8. 如何令自己所写的对象具有拷贝功能?</h4><blockquote><ol><li>需声明该类遵从 NSCopying 协议</li><li>实现 NSCopying 协议。该协议只有一个方法: <code>- (id)copyWithZone:(NSZone *)zone;</code></li></ol></blockquote><h4 id="9-简述kvo、kvc、Delegate他们之间的区别？"><a href="#9-简述kvo、kvc、Delegate他们之间的区别？" class="headerlink" title="9. 简述kvo、kvc、Delegate他们之间的区别？"></a>9. 简述kvo、kvc、Delegate他们之间的区别？</h4><blockquote><ol><li>KVO（Key-Value- Observing）：一对多, 观察者模式, 是键值监听,键值观察机制, KVO的本质是当观察者为一个对象的属性进行了注册，被观察对象的isa指针被修改的时候，isa指针就会指向一个中间类，而不是真实的类。所以 isa指针其实不需要指向实例对象真实的类。所以我们的程序最好不要依赖于isa指针。在调用类的方法的时候，最好要明确对象实例的类名。</li><li>KVC(Key-Value-Coding)内部的实现：是键值编码, 一个对象在调用setValue的时候，（1）首先根据方法名找到运行方法的时候所需要的环 境参数。（2）他会从自己isa指针结合环境参数，找到具体的方法实现的接口。（3）再直接查找得来的具体的方法实现。</li><li>Delegate: 通常发送者和接收者的关系是直接的一对一的关系。代理的目的是改变或传递控制链。允许一个类在某些特定时刻通知到其他类，而不需要获取到那些类的指针。可以减少框架复杂度。消息的发送者(sender)告知接收者(receiver)某个事件将要发生，delegate同意然然后发送者响应事件，delegate机制使得接收者可以改变发送者的行为。</li><li>Notification: 观察者模式, 通常发送者和接收者的关系是间接的多对多关系。 消息的发送者告知接收者事件已经发生或者将要发送，仅此而已，接收者并不能反过来影响发送者的行为。<blockquote><p>(1) 效率肯定是delegate比NSNotification高。<br></p><p>(2) delegate方法比notification更加直接，最典型的特征是，delegate方法往往需要关注返回值，也就是delegate方法的结果。比如-windowShouldClose:，需要关心返回的是yes还是no。所以delegate方法往往包含should这个很传神的词。也就是好比你做我的delegate，我会问你我想关闭窗口你愿意吗？你需要给我一个答案，我根据你的答案来决定如何做下一步。相反的，notification最大的特色就是不关心接受者的态度，我只管把通告放出来，你接受不接受就是你的事情，同时我也不关心结果。所以notification往往用did这个词汇，比如NSWindowDidResizeNotification，那么nswindow对象放出这个notification后就什么都不管了也不会等待接受者的反应。</p></blockquote></li></ol></blockquote><h4 id="10-include与-import的区别？-import与-class的区别？"><a href="#10-include与-import的区别？-import与-class的区别？" class="headerlink" title="10. include与#import的区别？#import与@class的区别？"></a>10. include与#import的区别？#import与@class的区别？</h4><blockquote><ol><li>#import指令是Object-C针对@include的改进版本，能确保引用的文件只会被引用一次，不会陷入递归包含的问题中；</li><li>@import与@class的区别：<blockquote><p>#import会链入该头文件的全部信息，包括实体变量和方法等；二@class只是告诉编译器，其后面声明的名称是类的名称，至于这些类如何定义的，暂时不用考虑。在头文件中，一般只需要知道被引用的类的名称就可以了，不需要知道其内部的实体变量和方法，所以在头文件中一般使用@class来声明这个名称是类的名称；而在实现类里面，因为会用到这个引用类的内部的实体变量和方法，所以需要使用#import类包含这个被引用类的头文件。@class还可以解决循环包含的问题</p></blockquote></li><li>#import&lt;&gt;跟#import””的区别：<blockquote><p>#import&lt;&gt;用来包含系统自带的文件，#import””用来包含自定义的文件</p></blockquote></li></ol></blockquote><h4 id="11-nonatomic和atomic的区别？atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？"><a href="#11-nonatomic和atomic的区别？atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？" class="headerlink" title="11. nonatomic和atomic的区别？atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？"></a>11. nonatomic和atomic的区别？atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？</h4><blockquote><ol><li>nonatomic和atomic的区别<blockquote><p>nonatomic和atomic用来决定编译器生成的getter和setter操作是否为原子操作。</p></blockquote></li><li>atomic是绝对的线程安全么？<blockquote><p>atomic不是绝对的线程安全。atomic的本意是指属性的存取方法是线程安全的，并不保证整个对象是线程安全的。如：<br>声明一个NSMutableArray的原子属性stuff，此时self.stuff 和 self.stuff = otherstuff都是线程安全的。但是使用[self.stuff objectAtIndex:index]就不是线程安全的。需要用互斥锁来保证线程安全性。</p></blockquote></li><li>如何实现线程安全<blockquote><p>使用线程锁</p></blockquote></li></ol></blockquote><h4 id="12-UICollectionView自定义layout如何实现？"><a href="#12-UICollectionView自定义layout如何实现？" class="headerlink" title="12. UICollectionView自定义layout如何实现？"></a>12. UICollectionView自定义layout如何实现？</h4><blockquote><ol><li><code> -(void)prepareLayout;</code> 方法重写，并设置初始样式</li><li><code> - (CGRect)collectionViewContentSize;</code> 方法重写， 并使用它来返回CollectionView视图内容的宽高，</li><li>四个方法来确定布局信息<blockquote><ul><li><p><code> - (NSArray&lt;__kindof UICollectionViewLayoutAttributes *&gt; *)layoutAttributesForElementsInRect:(CGRect)rect;</code></p></li><li><p><code>- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath;</code></p></li><li><p><code> - (UICollectionViewLayoutAttributes *)layoutAttributesForSupplementaryViewOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)indexPath;</code></p></li><li><p><code> - (UICollectionViewLayoutAttributes *)layoutAttributesForDecorationViewOfKind:(NSString*)elementKind atIndexPath:(NSIndexPath *)indexPath;</code></p></li></ul></blockquote></li><li><code> - (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds;</code>如果返回YES，那么collectionView显示的范围发生改变时，就会重新刷新布局</li></ol></blockquote><h4 id="13-进程和线程的区别？同步异步的区别？并行和并发的区别？"><a href="#13-进程和线程的区别？同步异步的区别？并行和并发的区别？" class="headerlink" title="13. 进程和线程的区别？同步异步的区别？并行和并发的区别？"></a>13. 进程和线程的区别？同步异步的区别？并行和并发的区别？</h4><blockquote><ol><li>进程和线程的区别<blockquote><ul><li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li><li>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</li><li>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束</li><li>线程是轻两级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的</li><li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li><li>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志</li></ul></blockquote></li><li>同步和异步的区别<blockquote><ul><li>同步(synchronous)：进程之间的关系不是相互排斥临界资源的关系，而是相互依赖的关系。进一步的说明：就是前一个进程的输出作为后一个进程的输入，当第一个进程没有输出时第二个进程必须等待。具有同步关系的一组并发进程相互发送的信息称为消息或事件。</li><li>异步(asynchronous)：异步和同步是相对的，同步就是顺序执行，执行完一个再执行下一个，需要等待、协调运行。异步就是彼此独立,在等待某事件的过程中继续做自己的事，不需要等待这一事件完成后再工作。线程就是实现异步的一个方式。异步是让调用方法的主线程不需要同步等待另一线程的完成，从而可以让主线程干其它的事情。</li></ul></blockquote></li><li>并行和并发的区别<blockquote><ul><li>并发：在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这个几个程序都是在同一个处理机上运行。其中两种并发关系分别是同步和互斥。 <blockquote><ol><li>互斥：进程间相互排斥的使用临界资源的现象</li><li>同步：进程之间的关系不是相互排斥临界资源的关系，而是相互依赖的关系。进一步说明就是前一个进程的输出作为后一个进程的输入，当第一个进程没有输出时第二个进程必须等待。具有同步关系的一组并发进程相互发送的信息称为消息或事件。<br>其中并发又有伪并发和真并发，伪并发是指单核处理器的并发，真并发是指多核处理器的并发。</li></ol></blockquote></li><li>并行(parallelism)：在单处理器中多道程序设计系统中，进程被交替执行，表现出一种并发的外部特种；在多处理器系统中，进程不仅可以交替执行，而且可以重叠执行。在多处理器上的程序才可实现并行处理。从而可知，并行是针对多处理器而言的。并行是同时发生的多个并发事件，具有并发的含义，但并发不一定并行，也亦是说并发事件之间不一定要同一时刻发生。 </li></ul></blockquote></li></ol></blockquote><h4 id="14-线程间通信？"><a href="#14-线程间通信？" class="headerlink" title="14. 线程间通信？"></a>14. 线程间通信？</h4><blockquote><ol><li><code>NSThread</code><blockquote><ol><li> <code>- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(nullable id)arg waitUntilDone:(BOOL)wait;</code></li><li><code>- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thr withObject:(nullable id)arg waitUntilDone:(BOOL)wait;</code></li></ol></blockquote></li><li><code>CGD</code><blockquote><p> dispatch_async(dispatch_get_global_queue(0, 0), ^{…});</p></blockquote></li></ol></blockquote><h4 id="15-GCD的一些常用的函数？（group，barrier，信号量，线程同步）"><a href="#15-GCD的一些常用的函数？（group，barrier，信号量，线程同步）" class="headerlink" title="15. GCD的一些常用的函数？（group，barrier，信号量，线程同步）"></a>15. GCD的一些常用的函数？（group，barrier，信号量，线程同步）</h4><h4 id="16-如何访问并修改一个类的私有属性？"><a href="#16-如何访问并修改一个类的私有属性？" class="headerlink" title="16. 如何访问并修改一个类的私有属性？"></a>16. 如何访问并修改一个类的私有属性？</h4><blockquote><ol><li>KVO + KVC</li><li>runtime (class_copyIvarList, object_setIvar)</li></ol></blockquote><h4 id="17-数据持久化的几个方案（fmdb用没用过）"><a href="#17-数据持久化的几个方案（fmdb用没用过）" class="headerlink" title="17. 数据持久化的几个方案（fmdb用没用过）"></a>17. 数据持久化的几个方案（fmdb用没用过）</h4><blockquote><ol><li>CoreData</li><li>Sqlite 3</li><li>FMDB （Sqlite 3封装）</li><li>钥匙串</li><li>NSUserDefualt</li><li>NSKeyedArchiver</li><li>NSCache</li><li>沙盒</li></ol></blockquote><h4 id="18-说一下AppDelegate的几个方法？从后台到前台调用了哪些方法？第一次启动调用了哪些方法？从前台到后台调用了哪些方法？"><a href="#18-说一下AppDelegate的几个方法？从后台到前台调用了哪些方法？第一次启动调用了哪些方法？从前台到后台调用了哪些方法？" class="headerlink" title="18. 说一下AppDelegate的几个方法？从后台到前台调用了哪些方法？第一次启动调用了哪些方法？从前台到后台调用了哪些方法？"></a>18. 说一下AppDelegate的几个方法？从后台到前台调用了哪些方法？第一次启动调用了哪些方法？从前台到后台调用了哪些方法？</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>.当应用程序将要进入非活动状态执行，在此期间，应用程序不接受消息或事件，比如来电<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationWillResignActive</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;应用程序将要进入非活动状态，即将进入后台&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">2</span>.应用程序已经进入后台运行<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationDidEnterBackground</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;如果应用程序支持后台运行，则应用程序已经进入后台运行&quot;</span>); <span class="hljs-comment">//如果需要退出后台,则在这里加上:exit(0);</span><br>&#125;<br><br><span class="hljs-selector-tag">3</span>.应用程序将要进入活动状态执行<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationWillEnterForeground</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;应用程序将要进入活动状态，即将进入前台运行&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">4</span>.应用程序已经进入活动状态<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationDidBecomeActive</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;应用程序已进入前台，处于活动状态&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">5</span>.应用程序将要退出，通常用于保存数据和一些退出前的清理工作<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationWillTerminate</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;应用程序将要退出，通常用于保存数据和一些退出前的清理工作&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">6</span>.当设备为应用程序分配了太多的内存，操作系统会终止应用程序的运行，在终止前会执行这个方法，通常可以在这里进行内存清理工作，防止程序被终止<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationDidReceiveMemoryWarning</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;系统内存不足，需要进行清理工作&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">7</span>.当系统时间发生改变时执行<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationSignificantTimeChange</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;当系统时间发生改变时执行&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-tag">8</span>.推送消息时，获取设备的<span class="hljs-selector-tag">tokenid</span><br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">application</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> <span class="hljs-selector-tag">didRegisterForRemoteNotificationsWithDeviceToken</span>:(NSData *)<span class="hljs-selector-tag">deviceToken</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,deviceToken);<br>&#125;<br><br><span class="hljs-selector-tag">9</span><span class="hljs-selector-class">.tokenid</span>获取失败时,做相应处理<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">application</span>:(UIApplication *)<span class="hljs-selector-tag">app</span> <span class="hljs-selector-tag">didFailToRegisterForRemoteNotificationsWithError</span>:(NSError *)<span class="hljs-selector-tag">error</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;fail to register for remoteNotifications: %@&quot;</span>, [err description]);<br>&#125;<br><br><span class="hljs-selector-tag">10</span>.接收到推送消息处理<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">application</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> <span class="hljs-selector-tag">didReceiveRemoteNotification</span>:(NSDictionary *)<span class="hljs-selector-tag">userInfo</span> &#123;<br>    <span class="hljs-comment">//设置icon上的标记数字设置为0；</span><br>    <span class="hljs-comment">//application.applicationIconBadgeNumber = 0;</span><br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;%@&quot;</span>,userInfo);<br>&#125;<br><br><span class="hljs-selector-tag">11</span>.当程序载入后执行<br><br><span class="hljs-selector-tag">-</span> (void)<span class="hljs-selector-tag">applicationDidFinishLaunching</span>:(UIApplication *)<span class="hljs-selector-tag">application</span> &#123;<br>    <span class="hljs-selector-tag">NSLog</span>(@<span class="hljs-string">&quot;当程序载入后执行&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="19-NSCache优于NSDictionary的几点？"><a href="#19-NSCache优于NSDictionary的几点？" class="headerlink" title="19. NSCache优于NSDictionary的几点？"></a>19. NSCache优于NSDictionary的几点？</h4><blockquote><p>NSCache 是一个容器类，类似于NSDIctionary,通过key-value 形式存储和查询值，用于临时存储对象。</p><p>注意一点它和NSDictionary区别就是，NSCache 中的key不必实现copy，NSDictionary中的key必须实现copy</p><p>NSCache中存储的对象也不必实现NSCoding协议，因为毕竟是临时存储，类似于内存缓存，程序退出后就被释放了。</p></blockquote><h4 id="20-知不知道Designated-Initializer？使用它的时候有什么需要注意的问题？"><a href="#20-知不知道Designated-Initializer？使用它的时候有什么需要注意的问题？" class="headerlink" title="20. 知不知道Designated Initializer？使用它的时候有什么需要注意的问题？"></a>20. 知不知道Designated Initializer？使用它的时候有什么需要注意的问题？</h4><h4 id="21-实现description方法能取到什么效果？"><a href="#21-实现description方法能取到什么效果？" class="headerlink" title="21. 实现description方法能取到什么效果？"></a>21. 实现description方法能取到什么效果？</h4><blockquote><p>可以输出对象内部的一些成变量的值</p></blockquote><h4 id="22-objc使用什么机制管理对象内存？"><a href="#22-objc使用什么机制管理对象内存？" class="headerlink" title="22. objc使用什么机制管理对象内存？"></a>22. objc使用什么机制管理对象内存？</h4><blockquote><p>ARC (automatic reference counting)<br>MRC (manual retain-release)</p></blockquote><h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><ol><li>block的实质是什么？一共有几种block？都是什么情况下生成的？</li><li>使用系统的某些block api，是否考虑引用循环问题？</li><li>谈谈block的理解？并写出一个使用block执行UIVew动画？</li></ol><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><ol><li>runtime如何实现weak属性？</li><li>runtime如何通过selector找到对应的IMP地址？</li><li>能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？</li><li>runtime如何实现weak变量的自动置nil？</li><li>在开发中如何使用runtime？什么应用场景？</li></ol><h2 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h2><ol><li>isa指针？（对象的isa，类对象的isa，元类的isa都要说）</li><li>类方法和实例方法有什么区别？</li><li>介绍一下分类，能用分类做什么？内部是如何实现的？它为什么会覆盖掉原来的方法？</li><li>运行时能增加成员变量么？能增加属性么？如果能，如何增加？如果不能，为什么？</li><li>objc中向一个nil对象发送消息将会发生什么？（返回值是对象，是标量，结构体）</li></ol><h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><ol><li>UITableview的优化方法（缓存高度，异步绘制，减少层级，hide，避免离屏渲染）</li><li>有没有用过运行时，用它都能做什么？（交换方法，创建类，给新创建的类增加方法，改变isa指针）</li><li>看过哪些第三方框架的源码？都是如何实现的？（如果没有，问一下多图下载的设计）</li><li>SDWebImage的缓存策略？</li><li>AFN为什么添加一条常驻线程？</li><li>KVO的使用？实现原理？（为什么要创建子类来实现）</li><li>KVC的使用？实现原理？（KVC拿到key以后，是如何赋值的？知不知道集合操作符，能不能访问私有属性，能不能直接访问_ivar）</li></ol><h2 id="iOS的沙盒目录结构"><a href="#iOS的沙盒目录结构" class="headerlink" title="iOS的沙盒目录结构"></a>iOS的沙盒目录结构</h2><ol><li>AppName.app</li><li>Documents</li><li>Library –&gt; 3.1 Preferences 3.2 Caches</li><li>tmp</li></ol>]]></content>
    
    
    <categories>
      
      <category>iOS</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/01/01/hello-world/"/>
    <url>/2018/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
